ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
399371,comment,398597,399244,0,0,brianr,,,"<a href=""http://sivers.org/blog"" rel=""nofollow"">http://sivers.org/blog</a>",1229421540
399370,comment,399225,399330,0,0,StrawberryFrog,,,"You say ""trend ... fewer and fewer men in the loop."" and I say ""smooth transition to robots"".",1229421458
399369,story,,,1,0,astrec,"RubyFringe presentation",http://www.zedshaw.com/blog/2008-12-16.html,,1229421183
399368,comment,399346,399346,0,0,Oompa,,,"I've been reading the Pragmatic Programmer and the copy I have is in black and white, and I've noticed the exact same thing.",1229421029
399367,story,,,1,0,dighary,"Hp Multimedia Gaming Laptop",http://www.eexplore.org/hp-gaming-multimedia-laptop-notebook-reviews/,,1229420986
399366,comment,398496,398846,0,0,coryrc,,,"Well, I'm a big Lispnik and wish I could use it for everything -- so I try! but AVRs (an 8-bit microcontroller) can't run managed code anywhere near fast enough. My code is completely statically or stack allocated and almost all structures are in the global namespace, so it is nearly perfectly optimized. A lot less is in the global namespace on ARM processors because the word size can index the entire memory.<p>One way I've used Lisp is to generate code in either an if-else form or switch-case form. If you have a sparse lookup table (say, 30 values out of 256 map to a byte) you don't want to allocate space for those useless 226 values, so you could write out each by hand. Instead, I maintain a list of pairs at the beginning of the file (along with all the other constants) and I wrote a CL function that converts them to C code. Sometimes using if-elses results in a smaller binary verses switch-case, and sometimes the other way. I only have to change two words and recompile to test the result both ways. Doing this by hand for each statement... yuck. But I saved over 100 bytes on my last project, enough to get a necessary feature working before shipping.<p>I use emacs, so when I edit code inside the lisp preprocessor tags, I type 'M-x lisp-mode' and press enter. Then emacs properly indents the lines and I can use SLIME to execute the preprocessor functions right there. Sometimes I need to add the comment:<p><pre><code>  ;|\n</code></pre>\nas the first line because the lisp mode catches a pipe in the C source (CL block comment) and formats everything incorrectly. Conversely, I sometimes have to place this after a Lisp section:<p><pre><code>  //'\n</code></pre>\n...for the single quote (even inside a comment) freaks out the emacs reader. Not sure how this works in emacs23 yet.<p>Basically, I use Lisp to remove as many assumptions from the code as possible. As a result, my devices work just the way I say they will -- contrary to the other programmer here. Sadly, my coworkers think waterfall is a genius new idea they came up with. It's quite frustrating because I'd still like to learn from others, but I fear going somewhere where I'd be forced to follow a bad methodology (at least here I have the freedom to follow what I think are best practices, on the projects I develop/lead/design).<p>Back to the lisp preprocessor: When I call 'make' each source file is attached to the standard input of a lisp process launched off a file of <processor_name>.lisp, and the output is written into <original_file>.c.cpp-lisp.c (yes, very ugly, but it works). The gcc is run as normal, with the output written back to <original_file>.o to clean up the file structure.<p>One problem I ran into is CL up-casing all input. Fortunately, avr-libc has all constants as uppercase, and most of my preprocessor passes through strings unchanged (if it makes sense), but I have had many times when I had to work around this. The project above should allow these problems to be solved easily.<p>Atmel releases all the register information (names, bit names, read/write/both, etc) in an XML file. The next step in upgrading my preprocessor is to automatically generate mapping functions from generic names to specific names from this XML file (which is first processed by xml-to-sexp). This function lets me write something like this:<p><pre><code>  (set-bit 'RXENn :sequence COMPUTER_UART)\n</code></pre>\nand then change the zero to one in<p><pre><code>  (defparameter COMPUTER_UART 0)\n</code></pre>\nto use the second uart instead of the first. If this was done using pure C, either a search and replace for RXEN0->RXEN1 (and you'd have to check that you don't use any other UART registers, nor in any other files, etc) or you have series of #define's at the top of the file like #define COMPUTER_UART_RX_ENABLE() ... Finally, the other major problem is changing output pins. As the AVR is 8-bit, the output pins are in groups of eight. Normally, you would have code like this:<p><pre><code>  #define LED_PIN PC1\n  ...\n  PORTC |= (1<<LED_PIN);\n</code></pre>\nbut, what if you change LED_PIN to be PB0? Now it is on PORTB so you must change everywhere you write it. So you do:<p><pre><code>  #define LED_PIN PB0\n  #define LED_PIN_PORT PORTB\n  #define SET_LED_PIN() LED_PIN_PORT |= (1<<LED_PIN)\n  ...\n  SET_LED_PIN();\n</code></pre>\nwell, then you need CLEAR_LED_PIN(), and SET_LED_PIN_AS_OUTPUT() and SET_LED_PIN_AS_INPUT()... all of sudden you want one little constant and you get five extra garbage lines of boilerplate. Instead, my mapping function knows the port of PB0 is PORTB so you only need one line:<p><pre><code>  (defparameter LED_PIN 'PB0)\n</code></pre>\nNow, if you end up needing more direct control, you can still use the Lisp code to generate assertions.<p>Anyway, all the problems in these two posts are some of the most commons ones brought up to the forums at avrfreaks.net and that I've experienced, so I wrote these tools to mitigate them. Unfortunately, it is too gross (in the dark corners you can find some of my first real CL code!) and too poorly designed (should be automatically generated based off Atmel XML files) to be released to the public, but the proof is in the pudding: I came back to a six-month-old project, made what could have been major changes (we were upgrading the product) in less than a day and everything worked the first compile and passed all the ""QA"" tests.",1229420685
399365,story,,,76,71,kalvin,"PBS: Secret history of the credit card",http://www.pbs.org/wgbh/pages/frontline/shows/credit/more/rise.html,,1229419310
399364,comment,398569,399007,0,0,tome,,,Thanks!,1229419275
399363,story,,,4,1,nootopian,"IE users advised to switch until a serious security flaw fixed",http://news.bbc.co.uk/1/hi/technology/7784908.stm,,1229418994
399362,comment,398354,398354,0,0,wenbert,,,"PHP is a tool. Just like all other programming languages. If PHP can be used to solve your real-world problems then okay - Go for it. It's free, easy to use, the documentation is the best there is And lots of frameworks to choose from. If not, then use something else. But for me, after a few years of coding PHP, I haven't had anything that PHP can't do for me (in terms of web development). Especially these days that Code Igniter, Zend Framework and the likes are going more mainstream...<p>EDIT:\njust wanted to add that I have been wanting to use Tools like Ruby on Rails, but when I think of it -- it is so much easier to do this and that in PHP.<p>i have read books on RoR, etc. but haven't find the time to implement on a real-world project yet. maybe it's just me or that i'm too lazy :D",1229418771
399361,comment,398597,399143,0,0,jmtulloss,,,"I agree. Right out of school I took the plunge and it didn't work out. Now I have a decent job and a comfortable life. I'm happy to do that for a while and then take another plunge when the Next Big Thing comes along. After all, the first one didn't kill me, why would the second?",1229418569
