ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
45114,story,,,1,0,orlenko,"Using timeout with xmlrpclib",http://blog.bjola.ca/2007/08/using-timeout-with-xmlrpclib.html,,1187761958
45113,story,,,3,0,tojileon,"Microsoft launches pay-as-you-go Office",http://news.bbc.co.uk/2/hi/technology/6956521.stm,,1187761198
45112,comment,45082,45082,0,0,bluishgreen,,,"For my 2 cents these are books I read in the past year and was very impressed with the clarity of the presentation. <p>Theory of Computing. Michael Sipser.<p>Introduction to Algorithms, by T. H. Corman, C. E. Leiserson, and R. L. Rivest<p>How to design programs\n<a href=""http://www.htdp.org/2003-09-26/Book/curriculum-Z-H-1.html#node_toc_start"" rel=""nofollow"">http://www.htdp.org/2003-09-26/Book/curriculum-Z-H-1.html#no...</a><p>I think I will add something that I am interested in, it is not of interest to programmers, but heck, we are hackers! <p>All the Math you missed: Thomas A Garrity<p>Mathematics: Form and function. Mac Lane. <p>These are the first 2 books I would buy if I am interested in math and want to know more. These books are simply index books. They go over the land mark concepts in mathematics along with the key theorems and how they evolved in the historical context. You will be surpriced at how obvious things took years for people to learn and will come to appreciate the value of mathematical knowledge. <p>The algorithm will be like this: You want to know about some field of mathematics. Say Differential geometry. You can consult the sections on both these books. Will take you about 3 full days. And then go ahead and read the list of suggested books. This is the real gold mine of both these books., they suggest the best books for all of the sub-fields of math.  Besides they really list the key theorems in a few pages with proof sketches and this is like a map for you. You can follow the map to exactly where you want. This sort of idea, you will get only after studying that field for say a year. And these books just give it to you right away. <p>I think we need a continuous thread for this sort of book suggestion, reviews etc. \n",1187760229
45111,comment,45082,45082,0,0,dawie,,,"The Pragmatic Programmer: From Journeyman to Master by Andrew Hunt and David Thomas",1187760063
45110,story,,,2,0,rms,"Has anyone used Haml? What do you think?",http://haml.hamptoncatlin.com/,,1187759895
45109,comment,44580,44929,0,0,wanorris,,,"Scheme is awesome as long as you are mathematically fearless enough to learn from square one using books like <i>How to Design Programs</i> and <i>The Structure and Interpretation of Computer Programs</i>. They provide a great foundation if you feel right at home in math, and you're not too concerned with building something practical for your first project.<p>For people who aren't as confident in their math, I would recommend Python, as other have mentioned. It's thoroughly friendly to newcomers, there's tons of good documentation (the free tutorial written by Guido is incredible), the libraries are among the best available, and, like Scheme, it's easy to start by biting off a manageable chunk and then gradually learning more details as you go.",1187759828
45108,comment,44580,45098,0,0,alex_c,,,"Not really.  Your program can work for the wrong reasons, if you don't understand what the language is doing.<p>In C, if you're wrong, chances are your program either won't compile or it'll give you a nice segfault or bus error.<p>In something like Javascript, you can easily be ""wrong"" every time because you don't understand an aspect of the language, and still have your program ""work"" 9 times out of 10.<p>If your logic is wrong then yes, it doesn't make a difference what language you're using, but that's not what I was talking about.",1187759673
45107,comment,45082,45082,0,0,pramodbiligiri,,,"The Art of Unix Programming by Eric Raymond: <a href=""http://www.catb.org/~esr/writings/taoup/html/"" rel=""nofollow"">http://www.catb.org/~esr/writings/taoup/html/</a>",1187758929
45106,comment,45076,45105,0,0,rms,,,"So was your idea closer to dabble.db?",1187758803
