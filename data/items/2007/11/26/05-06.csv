ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
83493,comment,83429,83473,0,0,staunch,,,"If you saw those requests from a bad guy you'd be wishing you could change it to:<p><pre><code>    curl https://myserver.com/runme.sh 2>/dev/null|/bin/bash\n\n</code></pre>",1196056347
83491,comment,83196,83196,0,0,nradov,,,"The single entry issue has apparently been resolved; I can't think of a single modern language that allows calling into the middle of a routine. But it's interesting that after so many years there is no general consensus on single exit versus multiple exits. The PMD static analysis tool for Java will (by default) generate a warning for multiple exits <a href=""http://pmd.sourceforge.net/rules/controversial.html"" rel=""nofollow"">http://pmd.sourceforge.net/rules/controversial.html</a> . In Steve McConnell's book ""Code Complete, Second Edition"" <a href=""http://www.cc2e.com/"" rel=""nofollow"">http://www.cc2e.com/</a> he recommends minimizing exits, but using multiple exits when that improves reliability. Since he has reviewed work by thousands of developers using many languages and styles his recommendations carry significant weight. I understand that Martin Fowler also makes a similar recommendation in his book ""Refactoring: Improving the Design of Existing Code"" <a href=""http://martinfowler.com/books.html#refactoring"" rel=""nofollow"">http://martinfowler.com/books.html#refactoring</a> , although I haven't gotten around to reading it yet.<p>Based on my own experience I do it either way depending on what keeps the code simpler and easier to understand. One common problem with using a single-exit design is that it often forces you to use a mutable variable, or at least separate variable declaration from initialization. For most of the code I write now I force myself to use immutable (""final"" in Java) variables in 95%+ of cases and have found this delivers huge benefits in reliability and maintainability. Managing state well is just as important as managing control flow. I haven't seen multiple-exit designs cause any later maintenance defects that a single-exit design would have prevented.<p>I'm not sure what problems edw519 has seen over the years, but perhaps many of the maintenance defects he saw were caused more by long routines than by multiple exits. If you keep most routines short enough to fit on a single screen that makes it easy for maintenance programmers to follow the flow regardless of the number of exits.",1196055755
83490,comment,83429,83473,0,0,nickb,,,"That's ok if you don't have a password on your account or you don't require a password to wake up from sleep. That's too dangerous so I recommend the following:<p>Set your Mac to use Filevault and go to Security section and select ""Require password after waking up from sleep"" so if someone opens up your laptop, they'll be greeted with a login screen. Now you want them to reboot...<p>What I did to make a 'honey pot' is this: I created a guest account (named it 'Krista') and that account doesn't require a password so if someone steals my laptop and reboots it, they'll be able to use this account. The account itself is locked down with very little permissions. I allow the use of a browser and the browser launches immediately after login (add it to Login items). The home page of the browser is set to my server's redirect page that uses meta refresh to immediately take the user to Yahoo. But I do get their IP. I also have curl set to ping a page every 20 min or so.<p>You could pay some cash for Orbicule (they use your iSight to grab pics of a person sitting in front of the screen) etc but this method is more than good enough. A step-up would be to proxy all of the requests from the browser through the proxy you control... but I haven't found a nice proxy to install on a shared server.<p>Unfortunately, I don't know of any method that would survive a reinstall of OS X but most thieves don't know how to do that anyway.",1196055614
83489,comment,83429,83473,0,0,qaexl,,,"Hey, good idea ... I'm going to do that.",1196055437
83488,comment,83429,83429,0,0,chengmi,,,"1) A car is for transportation, not storage. 2) Laptops, like children, should never be left unattended. 3) No one needs insurance until they need it. 4) Finish your code, make money, and buy a new laptop.",1196053829
83487,comment,83348,83480,0,0,amichail,,,"If a student already knows English, then it's better to learn to write small programs in a high-level language than it is to learn another natural language.",1196053696
83486,comment,83483,83485,0,0,amichail,,,"You would get less money from ads per click, but for most people, you would get a much larger audience looking at your stronger submissions.<p>Also, submissions can simply be links with no commentary.  You would still make money from those.<p>You should also be able to make money from commenting on other people's submissions.<p>One possibility is to pay people based on their karma.",1196053408
