ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
17893,comment,17824,17842,0,0,ecuzzillo,,,"I doubt the top-level people (responsible for things like the 32 G requirement) at MS are really that dumb, because if they were, we would probably hear more horror stories. Ballmer is dumb, but he's a little high-level for that kind of misfeature. No, I think the problem is an emergent property of the MS bureaucracy system; everybody in it hates it and hates the products it produces, but it has too much inertia for anybody who wants to fix it to do so. ",1177861617
17892,comment,17802,17802,0,0,ced,,,"How do recessions affect the market for startups?",1177861397
17891,comment,17701,17839,0,0,bsaunder,,,"Let me reconsider (I had forgotten about Paul Graham's, Python article).  I suspect there are other langauges (not many) that reach this same level of intelligence tagging.<p>I think the second paragraph of his Python article captures much of my intent.  But still, there seems to be something just a bit different about LISP than most other langauges.<p>Perhaps it is LISP's durribility or the fact that over time different (smart) people develop new lanuages and eventually begin to incorporate more and more features of LISP.  LISP clearly got some things right in a fundamental way that every one seems to be rediscovering every decade.  This leads me to believe that if you understand LISP, you have a deeper understanding of how things really fit together.<p>With specific regards to your question, I'd include most main stream programming languages (but that's kinda obvious).  At this point, I'd include Ruby in this list, but may not Python.  Although even in the case of Python, it strikes me as being very similar to other OO languages (better perhaps, but similar none-the-less).<p>",1177861365
17890,story,,,6,1,mojuba,"A bit of future Lisp [fiction]",http://www-formal.stanford.edu/jmc/robotandbaby/robotandbaby.html,,1177861218
17889,story,,,10,12,Sam_Odio,"Integration Is The Killer App",http://startupmeme.com/2007/04/29/integration-is-the-killer-app/,,1177860886
17888,comment,17855,17855,0,0,mdakin,,,"A cool aspect of closures not stressed in the video is that they end up capturing all enclosing lexical environments (not just the parameter environments), even those you make using let!  For example in Common Lisp:<p>(let ((x 0)) (defun counter () (setq x (+ x 1)) x))<p>Or in Scheme:<p>(define counter (let ((x 0)) (lambda () (set! x (+ x 1)) x)))<p>You can make a closure named ""counter"" that has access to the environment containing ""x"" so that every time you call those functions they return the next ""x"".<p>If you really want to understand closures I recommend reading Section 3.2 of SICP [1] and learning how to draw environment diagrams.<p>[1] <a href=""http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_sec_3.2"">http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-21.html#%25_sec_3.2</a>
",1177859995
17887,comment,17858,17858,0,0,iamwil,,,"This sounds like a PR submarine that pg talked about.  I only tried it out briefly, and Quinat<i> shows a web of related searches, much like another one...Brain..something.  Perhaps it's simply because I'm not use to that way of searching, so I should give it a go again.  <p>However, their search results are from Google.  It's not really doing anything innovating in the search part of search, but rather the visualization of search.  It's good to put a finger on the pulse, but I nearly confused one with the other.",1177859691
17886,story,,,1,0,jslogan,"Noboby cares about your business",http://www.jslogan.com/content/view/163/,,1177859212
17885,comment,17773,17773,0,0,jey,,,"Who cares whether product X fits nebulous poorly defined hype-generating buzzword Y?",1177859122
