ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
44007,comment,43686,43874,0,0,stuki,,,"	I suspect evolution dealt with 'bad parents' long ago.<p>	My parents certainly weren't bad. Not that they ever did much beyond enrolling and sending me off to public school, but still. If public school wasn't there, I'm sure they wouldn't have left me completely illiterate. In fact I'm sure, and my parents now agree, I would likely have been 'better' schooled if it wasn't for public schools' near complete monopoly on funding and mindshare when and where I grew up. <p>	None of the parents of people I know were 'bad' either, including those of many who insist on using mythical 'bad parents' as excuses for public education. Furthermore, amongst those I have asked, none of them seem to have acquaintances with bad parents, and I have asked enough people, from enough different backgrounds, to be convinced this 'bad parents test' could be applied recursively through all six degrees of separation without turning up more than, at most, some exceedingly rare corner cases. Rare as in at least an order of magnitude below likely available private charity to deal with them.<p>	This doesn't mean I think everyone's parents are equally ambitious on their children's behalf, or equally concerned with educating their child; just that in absence of public schools, almost no parent would completely neglect facilitating any kind of education for their children, whatsoever.\n",1187499580
44006,story,,,1,2,tigerec,"Fallacy of the Non-disclosure Agreement",http://onstartups.com/home/tabid/3339/bid/189/Startup-Reality-Distortion-3-The-Fallacy-Of-the-Non-Disclosure-Agreement-NDA.aspx,,1187499291
44005,comment,44000,44000,0,0,gibsonf1,,,"An interesting point on healthcare:  can you name the major turning point from the days of old when doctors made house calls to today?  It is the establishment of Medicare and Medicaid, which permanently distorted the entire health care market.  The government is very much involved with our health care system, and the result is growing trouble in health care.  Adding more regulation will make it worse - history makes this point quite clearly.<p>I think government should provide our National Defense, the Justice System, and Police.",1187498828
44004,comment,44000,44000,0,0,s_baar,,,"Besides a lot of the safety stuff you mentioned, health care for orphans and subsidized college education based off of merit and inability to pay (combined with a co-op, if the education is expensive), not disadvantagedness. I have always been surprised not only by libertarians not talking about this type of stuff, but how mainstream anti-libertarian arguments don't focus on these glaring issues.",1187498452
44003,story,,,2,0,bootload,"Mixing friends and business",http://www.scripting.com/stories/2007/08/17/friendshipAndBlogging.html,,1187498077
44002,comment,43839,43839,0,0,eli,,,"""Venerable analyst John Dvorak, who generally actually understands what he is writing about..."" <p><i>cough</i> <i>sputter</i>  Are you kidding me? Dvorak? <p>This is the guy who once wrote an article bitching about how the ""Idle Process"" was sucking up all his CPU cycles in XP.  This is the guy who admitted on tape that he trolls for links from Apple fans by writing slanted anti-Apple articles.",1187497876
44001,comment,43942,43970,0,0,dmnd,,,"Didn't work for me either, but this comment thread did. ~ Melb, Aus.",1187497788
44000,story,,,11,64,rms,"What services would the perfect government provide?",,"Lots of hackers are libertarians, because there is a lot of logic behind the free market. But I think it's a terrible idea to let the free market handle absolutely everything, as advocated by some libertarians. Free education is a great thing that society offers even if the system isn't perfect. The free market has completely failed with healthcare in the USA. We need police and fire protection. I'm glad that every road isn't a toll road.<p>Imagine an economically very free society with an average taxrate of 25%. What services should this government provide for free or subsidize?",1187497540
43999,comment,43905,43905,0,0,bootload,,,"<i>""... My startup is a webapp, and we have a lot of problems designing the interface ... We think it should all fit in a 1024 x 768 px screen, of course is the screen is bigger than that, The interface will also look good, 800 x 600 screens is just a problem ...""</i><p><i>'we think'</i>? Get a demo out and ask your users what size is best for them. Hint: grab someone for a quick 5min usage test (Joel test, 12 Steps to Better Code) ~  <a href=""http://www.joelonsoftware.com/articles/fog0000000043.html"" rel=""nofollow"">http://www.joelonsoftware.com/articles/fog0000000043.html</a>",1187497434
43998,story,,,3,0,bootload,"A bootstrap begins with a lot of typing",http://www.scripting.com/stories/2007/08/17/aBootstrapBeginsWithALotOf.html,,1187497118
43997,comment,43848,43848,0,0,eli,,,"short answer: no\n",1187496897
43996,story,,,4,0,rms,"Minds, Brains, and Programs",http://www.bbsonline.org/Preprints/OldArchive/bbs.searle2.html,,1187496619
43995,comment,43845,43845,0,0,palish,,,"It seems like quantifying the loss of a developer in terms of dollar value is pretty futile.  That value is volatile from company to company.<p>One thing we can <i>try</i> to do is measure the skill difference between two programmers.  This is a hard problem, but if we assume that some percentage of their checkins are new features, some percentage are bug fixes, and so on.. Perhaps even going through and manually tagging each changelist (have a convention to prefix a changelist with BUG: or FEATURE:), then we have a sort of rough statistical model of their performance.<p>So now we have two categories, <i>bug fix</i> and <i>new feature</i>.  (I'm grouping refactoring into bug fixes for now.)  Their performance in each category can be measured by (number_of_changelists / time).  This assumes a perfect world, where each bug fix doesn't introduce new bugs, and each feature doesn't add any new bugs.  These totally contradict one another, so we can tweak some parameters, perhaps introducing a percentage chance that one of their changelists will introduce a bug, which counts against their productivity score. (You can do some more interesting statistical analysis here at the sourcecode level to determine who's bug was fixed, and actually measure how often they produce bugs.)<p>But wait a second, what's the value for 'time'?  It could be their whole stay at the company.  But what if we change it to be, say, a week?  Now we can get a velocity value by doing productivity(t) - productivity(t-1).<p>Those two metrics combined are pretty useful to measure a programmer.  You have their productivity over a time value, and you have their velocity based on previous producitivity values.<p>Now we apply it to the whole company.  Add up everyone's productivity for the week and you get the current company productivity.  Subtract that with everyone's productivity for the last week and you get the company's productivity velocity.  To measure how each of them would affect the company if they left, subtract out their productivity from the equation and compare that with them in the equation.<p>If your productivity score includes how often you produce bugs, you can actually measure who is hurting productivity more than they're helping it.  However, each bug is of a different magnitude, so that number is bogus until you can measure the complexity of each bug.<p>The one thing this system does <i>not</i> take into account is information lost because only that person knew that information.  That's a very valuable asset and nearly impossible to measure.  So the best way to account for that is to increase a programmer's productivity velocity over time.  You can assume that if they're setting out to accomplish something, whether it's a new bug fix or a new feature, they will accomplish it in less time if they start working on it 10 years on the job versus one day on the job.<p>Also, someone (perhaps the project leader) needs to put a weight for each changelist.  The weight measures how valuable the new feature was, or how much value was added by fixing a bug.  This has to be done by someone other than the developer, because they'd have an incentive to lie. <p>This seems to work, because if you have a superstar leave after one day with the company, it doesn't hurt the company at all.  Whereas if he leaves after ten years with the company, not only will the company's absolute productivity go down, but the velocity will take a hit for the next month or so too.<p>All in all, it seems pretty hard to accurately measure a programmer's value, so I say screw it.  Humans are great at recognizing patterns.  The whole team should be able to recognize that Bob isn't pulling his weight or is under-motivated, and either give him extra vacation or reassign him to a sister company.  Plus if the programmers ever found out they were being measured, the company's productivity would drop like Wile E Coyote.  This sort of analysis should really only be applied after a programmer has left or if the company has made the affirmative decision to fire them (possibly to reestimate schedules), not as an ongoing thing.<p>This is something I came up with off the top of my head just now, so it's probably totally wrong.  More research into this field would be really interesting, because if we can measure productivity for a programmer, one could measure the global productivity scores for all programmers.  Somehow, I think a certain company that starts with a Y and ends with an R that would be really interested in that.<p>New startup idea?  I'm too busy with mine, go for it.  Businesses might pay oodles if you manage to measure programmer productivity accurately (or give the impression that you are).",1187496550
43994,comment,43608,43985,0,0,rms,,,"Alright, I can't defend what I wrote because I wrote it while somewhat inebriated and these things are never as coherent the next morning... maybe I should avoid trolling on news.yc in such states, it's gotten me into trouble before. :)<p>I have absolutely no justification for why Strong AI is less likely than immortality. I think it's wishful thinking on my part because I have a paranoid fear that a strong AI would freeze humanity at its current level of evolution. In other words, I think a far future society with infinitely intelligent humans is much more desirable than a far future society with dumb humans governed by a God-like AI.<p>The most likely path to immortality that I see is allowing consciousness uploads. I think reverse engineering a brain would give us the knowledge to accomplish such a task. Perhaps there will be some way to merge instead of upload so that we can maintain our ego/self, but either way, it's a kind of immortality. From a digitized human consciousness, Strong AI should come pretty quickly, as the digitized human or outsiders can start modifying the architecture and structure of copies of uploaded consciousnesses. In this scenario, the technological and biological singularities happen at the same time. Which I guess means that the technological and biological singularities happen together.",1187496395
43993,comment,43832,43832,0,0,hira_khan,,,"I will try to answer the questions, to best of my knowledge.\nI understand traditional outsourcing has been detrimental to product development, and probably worked well for business process outsourcing. At GeniTeam, with a focus on high-tech startup, the processes and models are totally different to traditional outsourcing firms. I believe a dozen success stories will definitely help people give the model a thought. \nHosting virtual team in Pakistan provided us with access to untapped skilled labor resources. With the recent surge in demand for skilled IT resources, startups won't be able to recruit resources within US; hence companies relying on innovative solutions to meet HR demands will get definitely get sustainable advantage. \nDespite the fact of my upbringing in Pakistan, the experience has been very good. The good universities in Pakistan e.g. LUMS, FAST, GIKI etc, builds basic problem solving skills, that can be applied across various problems. To instantiate the argument, I will share with you that our resources are working on ahead of curve technologies, i.e. Flex 2.0, Open Laszlo, Google Gears etc, for which it's even hard to find resources in USA. ",1187496232
