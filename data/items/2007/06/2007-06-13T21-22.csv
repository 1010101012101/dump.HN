ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
27913,comment,27907,27907,0,0,plusbryan,,,"This is Bryan, of the YC-backed startup Pairwise. I highly recommend this opportunity.<p>Christian is my roommate, so I have some insider info about ZapTix.com that I figured I should share here.<p>Christian is non-technical, which is why he's looking for a technical co-founder. But the sales and marketing skills that he brings to the table are immense and vital for this business. <p>The current site was built by an offshore team, which for better or worse, is not working out very well for him nor handling his upward growth. Based on suggestions from myself and his technical friends, he's now looking for a technical co-founder to join his team.<p>If I know one thing about Christian, it's that he's a hardworking entrepreneur who also maintains an admirable work-life balance. He's also a people guy. Within a month of moving to SF, he started the most popular tech event in the city - SFbeta, along with well-paying sponsors! He's well liked by all that know him and would be a great person with which to work.<p>I also know first-hand that the company is currently profitable, with several big-name clients, and imho has a ton of room to grow. If I weren't already tied to my current project, I would work with him.
",1181771869
27912,comment,27907,27907,0,0,palish,,,"Good luck.  I'd love if it worked out.  Ticketmaster probably has contracts with individual locations that bands play at, though.",1181771865
27911,comment,27875,27910,0,0,richcollins,,,"That sounds reasonable",1181771648
27910,comment,27875,27875,0,0,mdakin,,,"Think of unit-testing as a tool and not a dogma.<p>Proper unit-testing roughly doubles the amount of time it takes me to write a ""unit"" of code.  This is a high cost so I do not have 100% unit-test coverage.  <p>Over time I have developed an intuition about whether I NEED a unit-test for a particular unit.  When I think I need tests I write them.  <p>Typically I'm correct about whether the units need tests but when I make a mistake (as evidenced by bugs in the code I didn't unit-test) I go back and write the tests.  <p>This ""middle way"" works well for me.",1181771149
27909,comment,27907,27907,0,0,blader,,,"I'd also like to vouch for Christian. He has friends every where, and I'm happy to be counted among them. Christian is best known for running the largest web 2.0 schmooze fests in San Francisco, and has been very successful in getting clients for Zaptix over the past two years as a single founder.",1181771114
27908,comment,27907,27907,0,0,brianmckenzie,,,"This guy Christian Perry is a good friend of mine, and I'm sure he'd be pretty cool to work with. Zaptix also has a lot of potential, I've bought tickets on there and it was very easy.",1181770905
27907,story,,,23,22,ChristianPerry,"Co-founders wanted for TicketMaster killer.",http://zaptix.blogspot.com/,,1181770608
27906,story,,,1,0,szczupak,"A startup to download demos, trailers and even full version of games",http://www.businesshackers.com/2007/06/13/have-you-heard-about-greatgamesexperiment/,,1181770574
27905,comment,27532,27532,0,0,mojuba,,,"Can anyone explain why I can't register as Ludwig van Beethoven on Facebook? Who decides that John Smith is more ""legitimate"" than LvanB?",1181770533
27904,comment,27875,27876,0,0,nostrademons,,,"I've gone back and forth on this issue too.  I don't really have a firm opinion on the subject, so all I can do is share my experiences.<p>At inAsphere.com (2000 teen content dot-com), we had no tests and didn't really miss them.  Our software was dead-simple though: a bunch of 3rd-party forum and link directory stuff.  We got killed for other reasons (i.e. there wasn't really a market and we kinda sucked content-wise).<p>At Traxit (2000-2001 venture backed startup I worked at, selling remote access software to get through firewalls) we had no unit tests, and it sank the company.  We got into a QA death spiral, where every bug that QA found made the engineers introduce 5 more, and the product quality suffered so much that we cancelled our launch.  Cancelling the launch is the <i>absolute worst thing</i> you can do if you have venture funding, because the VCs will swoop in, throw out most of the management team, and try to pick up the pieces.  Of course they'll fail, so the company folded about 6 months after I left.<p>At FictionAlley (2002-2005 nonprofit Harry Potter fanfiction archive), I started with comprehensive unit tests, determined not to repeat the mistakes at Traxit.  I then got frustrated with how I was spending as much time writing test code as production code, and abandoned them.  It eventually launched, a little buggy, and the users were reasonably happy despite some annoyance at the bugs.  However, the lack of up-to-date tests has made it very difficult for new developers to come up to speed and change things, which means that imperfections in the architecture have kinda fossilized.<p>At my previous project at my current employer (2006 IDE plugin), I released without any unit tests.  I then spent 2-3 weeks <i>immediately</i> after release writing a fairly comprehensive test suite for it.  Overall it's been pretty successful: product quality is fairly high, and the tests have caught several insidious bugs since.  I find they're most useful as a sanity check to show me I'm about to do something stupid.  Often I'll do something that looks like a trivial refactoring and then roll back when I find out it's made a whole bunch of tests fail.<p>At my current project at my employer (2007 financial webapp), we have no unit tests.  We are getting along okay without them, but that could be because we haven't really met reality yet.  When my employer has released previous products (again, without any unit tests or QA), we've had to deal with some pretty pissed-off customers because of the product quality or lack thereof.<p>At my startup (2007, flash games website), I've had fairly comprehensive unit tests from the beginning.  I haven't been running them lately, and they're a bit out of date, again because it takes as much time to maintain the tests as to write the code.  While I was running them, they were useful in the same way as above: they keep me from doing stupid things and making silly mistakes.  I plan to go back and make them pass 100% before or soon after launch.<p>If I had to summarize, I'd recommend that you skip them until after launch, and then <i>any</i> time you don't have an imminent feature request, spend that firming up the test suite.  That way you don't delay your release too much but they'll still be there for you when you need them, and you also don't start writing them until the feature set has somewhat stabilized.  They're a big investment, but they do pay you back.",1181770236
27903,comment,27875,27900,0,0,nmeans,,,"When you've got 30,000 lines of code, you don't always have time to go back through and read all the code to make sure that the particular change you're making doesn't have drastic effects somewhere.<p>Writing good tests means you don't have to find and read the 200 relevant lines of code.",1181769946
27902,comment,27846,27846,0,0,tx,,,"I'm currently with RoR and while I <i>love</i> Ruby language I feel that RoR, while being super-productive for basic things,  forces me to dig deep into its own (not very readable) source code to figure out non-trivial things that are not mentioned anywhere in the documentation.<p>And looking at Rails code, I find that often DHH overuses Ruby dynamism without practical benefits. Look at Rails::Initializer class and how it starts the application and handles configuration: lots of dynamism and supposed flexibility, but yet there is no simple way to access the active instance of Configuration object from arbitrary place in your Rails application, which is (to me) seems like a first thing anyone would expect from configuration.<p>Another example is suppressing previously rendered output (in ActionView). ""Official"" documentation does not mention those methods, I found them (yet again) by drilling through Rails code.<p>Finally, I am not impressed with Rails session support. With a framework so powerful and ""magical"" I still need to <i>manually</i> deal with cookies and session data, because there is very weak control over session expiration mechanism in Rails.<p>Having said all that, I still enjoy developing with RoR w-w-a-a-a-ay more than Microsoft's ""WinForms on the web"" approach in .NET, and Ruby is really fun.<p>",1181769836
27901,comment,27875,27897,0,0,nmeans,,,"If you've got good coverage, you'll have a great chance that they will.  You've got to actively monitor your coverage though.<p>As far as backups go, a backup is only as good as it's age.  If a startup is struggling to decide if they've got the resources for writing tests, they probably don't have the resources for maintaining a real-time database mirror either.  You can argue that you should always back up before you roll out a code update, but the real world's not always like that.",1181769814
27900,comment,27875,27889,0,0,richcollins,,,"Is there evidence that time spent writing tests improves the quality of the code over time spent reading the code and trying to make sure it is simple and straightforward?",1181769732
27899,comment,27875,27894,0,0,richcollins,,,"That is a pretty conformist thing to say",1181769652
27898,comment,27550,27859,0,0,gyro_robo,,,"Oh sure, blame Arc.",1181769573
27897,comment,27875,27887,0,0,richcollins,,,"Shouldn't you be backing this kind of data up?  You can't guarantee that tests will catch this anyway.",1181769467
27896,comment,27883,27893,0,0,paul,,,"Oops, fixed :)<p>thanks",1181769423
27895,comment,27875,27888,0,0,jsjenkins168,,,"I'd say try to plan for how much you will need to scale your code, and also how many others will be working on your code.<p>As your code gets larger, and as you start to have others working on it (who could break it), unit tests become more important. If you dont foresee either of these happening, then the time investment for tests may not be worth it..",1181769309
27894,comment,27875,27875,0,0,jcwentz,,,"Writing tests is just part of programming, whether it's for a startup or any other project.",1181769282
27893,comment,27883,27883,0,0,abstractbill,,,"First sentence, ""Do believe that..."", should be ""Do <i>you</i> believe that..."" - unless you deliberately wrote it like this to catch out people who believe there's only one way to write things ;-)<p>Nice post btw.",1181769264
27892,story,,,2,0,jcwentz,"Chime.TV: A Prettier Way to Watch YouTube",http://www.techcrunch.com/2007/06/12/chimetv-a-prettier-way-to-watch-youtube/,,1181769160
27891,comment,27758,27826,0,0,louisadekoya,,,"I recently read about partnerup.com but can't join -  apparently because I live outside the U.S.",1181769141
27890,story,,,19,12,toffer,"According to Alexa, iLike has lost 70% of their Web site traffic since launching on Facebook",http://plentyoffish.wordpress.com/2007/06/13/facebook-ilike/,,1181769116
27889,comment,27875,27875,0,0,spejic,,,"I actually complete disagree with sillydude. Even though automated tests may make the team be a bit slower while developing, the suite sure as hell makes the code the team produces more reliable. So, while the speed of development is very important, so is quality of the product you get out there, even when it's something simple. The more small, simple bugs you can get out of the way before launch, the better. So, automated tests are, at least in my opinion, high priority.
",1181769029
27888,comment,27875,27884,0,0,richcollins,,,"We didn't write tests for our last startup and we never had too many problems with bugs.<p>We do write tests for this one and we don't have too many problems with bugs.<p>Tests take almost as much time to develop as the features do.  I just wonder if it is worth the time and if other people with startups write automated tests.",1181768887
27887,comment,27875,27875,0,0,nmeans,,,"If you have humans writing code for you, tests are an imperative.  Without tests, one seemingly small code error can wipe out a smatter of user-created data accidentally.  Sure, it's worse case, but it could also mean lights out for your startup.  You have to decide if it's worth the risk.",1181768853
