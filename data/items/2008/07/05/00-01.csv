ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
236691,story,,,2,0,nickb,"Google's process to open sourcing their code",http://namakajiri.net/complog/open-source-code-in-google/?style=text,,1215219229
236690,comment,236609,236609,0,0,walesmd,,,"Add me to your messengers and let's discuss them. I'm always interested in new projects.\nYahoo: shrimp20\nAIM: evicerator52\nMSN: evicerator52@hotmail.com\nEmail: webmaster-at-michaelwalesREMOVEME.com",1215219099
236689,comment,236269,236467,0,0,st3fan,,,"/usr/bin/apropos<p>GCC is on your Leopard DVD. Just install the developer tools. Maybe apropos was also in there. Dunno.<p>Personally, I am <i>extremely</i> happy with OS X 10.5 for my Java, C++ and Python development. Everything that I need is there. Great editors, Emacs, IntelliJ IDEA, all the usual open source tools through MacPorts.<p>Leopard also has some clear advantages over Linux for me, like for example dtrace and it's visual cousin Instruments.app. Dtrace is one of those tools that you will miss sooooo much when you are putting your code in production on Linux. It will probably be the reason for me/us to move to OpenSolaris as a production platform.<p>My only gripe is that Apple is slow slow slow with Java. I really hope they will let Sun and/or the community do Java 7 for OS X. It seems they abandoned that effort and put everybody on the iPhone or so.",1215218959
236688,story,,,2,0,nickb,"Protective order will keep Viacom out of sensitive YouTube user data",http://news.cnet.com/8301-13577_3-9983631-36.html,,1215218832
236686,comment,235942,236673,0,0,parenthesis,,,"I think Ardour and Rosegarden would be fairer comparisons with Logic Pro. But your point still stands that it was programs like Logic, Cubase, ProTools, Studio Vision that made the market and between them figured out which features should be available and how they should be presented to the user.",1215218167
236685,comment,236537,236574,0,0,vlad,,,"And a fourth, during the fourth of july weekend.  :)",1215218020
236684,comment,236683,236683,0,0,vlad,,,"Although this is the UK version of the page, the US version of the FAQ for students entirely avoids this question, thus supporting the idea that there has been a change in policy.",1215217532
236683,story,,,1,2,vlad,"Adobe Education Program Now Allows Commercial Use",http://www.adobe.com/uk/education/purchasing/faq.html,,1215217494
236682,comment,236504,236644,0,0,krschultz,,,"Correct, OpenMoko uses the CacaoVM with GNUClasspath for Java - although it is primarily not a Java device. Android is running the DarvickVM which is not actually Java, and runs a Java syntax on top of it. Though the code is compatible, byte code is not, so binary packages for OpenMoko or Android will not run on each other. Thus the two stacks need to be side by side, or you need to rebuild all the packages from one for the other.",1215217474
236681,comment,236177,236658,0,0,sophist,,,LOL,1215217332
236680,comment,236524,236524,0,0,steveplace,,,"Google is just using a 0-based array indexing system.",1215217207
236679,comment,236504,236678,0,0,krschultz,,,"I hear you, I spent all WEEK fighting with OpenEmbedded. Painfully, it is better than LTIB. Actually there is a sub-set of OE called Poky that is really solid. OE's problem is that the packages vary in quality - primarily in their ability to compile on multiple platforms - Poky picks the betters ones and has fewer platforms, it works very well.",1215217155
236678,comment,236504,236528,0,0,pmorici,,,"The one thing I'm a bit weary about is their build environment.  Last I checked they use OpenEmbedded, which to put it plainly, blew chunks last I tried to use it.  After 48 hours of not sleeping I gave up and switched to OpenWRT's new buildroot-ng which I found significantly easier to use.",1215217010
236677,comment,236504,236558,0,0,pmorici,,,"It runs Linux so you could probably make android work on it.",1215216816
236676,comment,236609,236609,0,0,cmcginnis,,,"<a href=""http://news.ycombinator.com/user?id=ojbyrne"" rel=""nofollow"">http://news.ycombinator.com/user?id=ojbyrne</a><p>worked once...",1215216553
236675,comment,235942,236065,0,0,swivelmaster,,,"Photoshop is worth it if your business depends on it.  Gimp wastes your time.  It takes a few weeks to work off the price of Photoshop vs the time you'd lose trying to get Gimp to work properly.",1215216303
236674,comment,236465,236615,0,0,sfg,,,"I think its more about building a patent arsenal so that when other large software companies think about enforcing a patent against Google they will get scared off due to the risk of a counter action.",1215216215
236673,comment,235942,236031,0,0,swivelmaster,,,"Sorry, I started to write a more details explanation of my position last night but was interrupted and closed the browser.<p>Stallman is suggesting that software should be free because people shouldn't have to pay for it, and so that anyone can modify it.<p>In theory that sounds great, but the truth is that capitalism has driven most of the software that actually enhances the lives of the majority of people who have computers.  Look at the differences between Gimp and Photoshop (or even Paint Shop Pro), or between Impulse Tracker and Logic Pro.  (IT wasn't free, actually, but it was really cheap!)  Software that people pay for is usually better, and far more useful.<p>I tried using Gimp at my company for a while to save us money, and I was practically pulling my hair out after ten minutes.  It sucks.  It really, really sucks.  It does a lot of cool things, but it's buggy and it's difficult to use.<p>If Adobe wasn't rich because they sell their software, their software wouldn't be nearly as good.  Same with most other software companies.<p>Now if it wasn't proprietary, most of the advantages of being able to sell it would go out the window.  If everyone had the source code to Photoshop, Photoshop would be nearly worthless.  And then everyone would go off and add features when they could, and each feature would only be usable to the person who wrote it.  There's no reason to make it usable if you're writing it for yourself.<p>And that's how Photoshop could become Gimp.",1215216092
236672,comment,235706,236231,0,0,pg,,,"I suspect the biggest problem with Lisp adoption may just be that people find s-expressions terrifyingly incomprehensible.  Though there's always some reason the median programmer doesn't want to use Lisp, the reason changes.  In the 1980s people said Lisp was too slow.  Now it's libraries.  This kind of variety is the signature of reasons people offer when they're avoiding something out of fear or laziness.",1215216088
