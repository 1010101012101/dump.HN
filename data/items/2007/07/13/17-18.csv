ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
34074,comment,34065,34065,0,0,donna,,,"How can you tell the differnce between a fad and an advancement?",1184349451
34073,comment,34065,34072,0,0,amichail,,,"Also, check out this refactoring book:<p><a href=""http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672"" rel=""nofollow"">http://www.amazon.com/Refactoring-Improving-Design-Existing-...</a>",1184349135
34072,comment,34065,34065,0,0,amichail,,,"For routine programming, the GoF Design Patterns book will be more helpful to you than algorithms books.<p>But if you really want to learn more about algorithms, check out this book:<p><a href=""http://www.amazon.com/Algorithm-Design-Jon-Kleinberg/dp/0321295358"" rel=""nofollow"">http://www.amazon.com/Algorithm-Design-Jon-Kleinberg/dp/0321...</a><p>As for programming languages, the java + eclipse combination is excellent.",1184348212
34071,comment,34065,34068,0,0,juwo,,,"""find the appropriate journals. Get an ACM membership so you can search and get full text of the library""<p>for developers with full time jobs?",1184347840
34070,comment,34065,34065,0,0,Mouse2k,,,"I'm currently a CS double-major in an American university. We learnt algorithms with Sedgewick's books (available for C and Java) and patterns with the Gang of Four book. I find that I rarely use the algorithms for web programming, but do use some patterns (MVC, Observer). <p>As for latest advances, there are many languages on the cutting edge, such as Haskell, OCaml and Erlang that would be worthy to study just to expand your horizons. These languages ARE many of the latest advances in CS. I'm currently diving into Lisp, and have found that some concepts are timeless (code as data, macros).",1184347789
34069,comment,33984,34028,0,0,henryw,,,thanks,1184347626
34068,comment,34065,34065,0,0,far33d,,,"Computer Science, as a field is very mature, and as a result, very specialized in its research (though I disagree with the idea that core algorithm research is more relevant for the average developer than what you call fads). <p>The best thing to do is to first get more specific: what kind of algorithm? Is it database implementations? Virtualization techniques? Filesystem optimization? Graphics hardware? Programming languages? <p>Then, find the appropriate journals. Get an ACM membership so you can search and get full text of the library. <p>\n",1184347328
34067,story,,,4,0,far33d,"Facebook for $6 Billion? Wrong Question..",http://www.businessweek.com/the_thread/techbeat/archives/2007/07/facebook_for_6.html?campaign_id=rss_daily,,1184347148
34066,comment,33886,34034,0,0,whacked_new,,,"I tend to think online discussion systems will evolve to approximate real discussion. The online aspect is simply to allow easier information management, synchronization of more people (which would be physically impossible), and decrease of distance. Temporal issues aside, it makes pretty much sense, in that problems in real discussion easily predict problems in online discussion, and fixes to online discussion systems address problems in live discussion. It seems to me, however, that developers of discussion systems stop relating the online system to the real interaction and try to impose methods that make more programming sense, but less natural sense. Of course I'm probably not qualified to say this because I don't know how valid my theories are; we will see.<p>Nevertheless, based on this perspective, I suspect the tiered system would not work, simply because we don't think in tiers in real life. Everything is graded in subjective degrees. One day your Lisp email list would evolve into a nonsensical banter (somebody starts posting after getting drunk). One day a couple geniuses post on digg and write a bestseller novel on the comment system within 24 hours. Perhaps unlikely, but not impossible. There are zero barriers in real life that let this happen; when it needs to happen, it will. But online, the system becomes the barrier.<p>So instead of a multi-tier system, I believe the best system is bound to be an aribtrarily-tiered system. How might this work? Consider yomama on reddit, who posts yo mama jokes on every thread. Troll yes, but also a clown. If there is a clown thread, yomama gets the crown (sorry). Thing is, there are ""tiers"" in the sense that you only have upmod and downmod. And really, what do those mean? A tier of good, a tier of bad? Predefined categories will never be enough.<p>If there are disagreeing voices, I'd love to hear.",1184346841
34065,story,,,13,40,juwo,"How does one learn about the latest advances in Computer Science (not fads) to apply and improve your work? ",,"Note: core stuff like algorithms, new patterns etc. <i>not</i> fads like RoR, Ajax...<p>Stuff that usually sits in abtruse papers, out of mind for the average developer. \nAccessible to the average developer, and in a form more easily digestible \n(studying research papers is not practical for all). <p>When I picked up the Cormen book recently, I saw lots of new stuff I didnt learn in College.",1184346301
