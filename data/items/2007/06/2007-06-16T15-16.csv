ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
28550,story,,,16,24,farmer,"Fred Wilson: The Age Question (Why younger founders have an advantage)",http://avc.blogs.com/a_vc/2007/06/the_age_questio.html,,1182008881
28549,comment,28393,28421,0,0,Alex3917,,,"Digg is in the top 100.<p>Unless you think your personal blog is going to be more popular than Wikipedia, it's just not going to happen. ",1182007768
28548,comment,28352,28352,0,0,pg,,,"The problem is with redirects. For some reason, early versions of Safari (pre 2) don't follow our redirects.  <p>The simplest reproduction of the problem is:<p><a href=""http://news.ycombinator.com/safaritest"" rel=""nofollow"">http://news.ycombinator.com/safaritest</a><p>which redirects to apple.com in other browsers but generates an error in early versions of Safari.<p>I'd be very grateful if any Safari expert out there could tell me what's going wrong.",1182007236
28547,comment,27875,27970,0,0,weel,,,"You say that type mismatch errors are orthogonal to testing. This may be the case in languages like Java, which has a strong but not very expressive type system. In strongly typed functional programming languages like ML and Haskell, though, you can, with a bit of good design, capture a lot of information about what you want your program to do in the type system, to be checked automatically. Take, for example, the comment on this page by somebody who says that the only testing s/he does is XHTML validation. With strongly typed functional programming, it is possible, and not really even all that hard, to write an embedded combinator library for XHTML such that programs that generate improper XHTML don't type check in the first place.",1182006908
28546,comment,28410,28520,0,0,weel,,,"OCaml is an object oriented language, yet people who do real work in OCaml (and yes, there are such people, and their work is very real) appear to rarely use the object oriented features at all. The reason seems to be that the combination of a fancy module system with the standard trappings of higher-order, typed functional programming (algebraic data types, pattern matching, and the like) solves most of the same problems as OO in ways that OCaml users find easier to use.",1182006345
28545,story,,,1,0,budu3,"Google world domination in 2050",http://www.techcrunch.com/2007/06/15/the-rise-of-the-prosumer/,,1182006158
