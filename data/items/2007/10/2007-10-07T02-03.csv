ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
64323,comment,64101,64101,0,0,edw519,,,"This is always a tricky problem in business.  If the algorithm isn't sophisticated enough, it's not effective enough.  If it's too complex to be easily understood by the people who work with its results, then they wash their hands of it.  ""Why do we have 700 yellow shirts in stock?!?""  ""I don't know; the computer did it.""<p>Sometimes it's best to leave the most complicated algorithms to NASA.  I'd be curious to learn the bottom line results of this effort.<p>",1191724495
64322,comment,64188,64308,0,0,prime0196,,,"Milestones are comprised of objective and goals. Hacking can easily be structured as either a goal or objective.",1191723839
64321,story,,,1,0,nickb,"The ten worst presentation moments",http://www.microsoft.com/uk/atwork/work/presentationdisasters.mspx,,1191723578
64320,comment,64085,64307,0,0,nostrademons,,,"They'll still have to rewrite.  The ""infrastructure"" he was referring to was GoogleFS/BigTable/MapReduce and their other massively-distributed backends.  You don't have access to them if you aren't Google.<p>I've heard that GWT isn't actually used by any notable (= public has heard of it) Google project.  Could be wrong though; no inside information.",1191723499
64319,comment,63702,64116,0,0,Zak,,,">If a series of statements might get interrupted halfway through, there needs to be an indication of this or else it's very easy to create bugs.<p>You can mitigate this by relying more on return values and less on side-effects. If the higher-level code depends on some side-effect, why not place the side-effect in the higher-level code after the function returns?",1191723029
64318,comment,63978,64218,0,0,greendestiny,,,"Facebook sucks in a lot of ways. I'm not a fan, in fact I'd actually quite enjoy seeing Zuckerberg crushed. There is just very little else online that facilitates shared experience. <p>Myspace has zero interest or ability to push itself further. Google hasn't really thrown its full weight behind orkut, not least because they have a much better money maker they need to protect. So the next generation facebook killer will probably have to be a startup - which means they have to be significantly better to attract users and reach a critical mass. ",1191722970
64317,comment,63978,64273,0,0,mattmaroon,,,"Oh, I don't know anything about Plaxo, other than what they do. Never had any use for it.",1191722895
64316,comment,64188,64291,0,0,gscott,,,"The only way I see this as possible is if you sit down with a ""front end"" graphics guy and create every page.  Then have the programmer put the code behind it.  <p>But beware the code that is written it will be hard for another programmer to pick up on.  Everyone writes code differently and it is just suprising in one language how many different ways there is to create a solution. 
",1191722696
64315,comment,64188,64266,0,0,nostrademons,,,"I was in this position in my last startup (they offered me a fat salary instead of equity), and it's a <i>terrible</i> position to be in, both for the employee and for the startup.  Here's why (bear with me on this, there's a lot of setup):<p>Economists like to divide all spending into two categories: consumption and investment.  Consumption is spending for things you'd like to have <i>now</i>, that'll give you an immediate benefit.  Investment is spending for tomorrow, in the hopes that you will gain more benefits later.  <p>Technology organizations face the same tradeoff, but with time rather than money.  Developers can work on features that immediately benefit users and pad the bottom line (consumption).  Or they can work on refactoring, infrastructure and tools that will make it easier to add features in the future (investment).  There's always a tradeoff.  If you spend too much time on investment, you're customers will wonder why you haven't done anything for them recently and stop giving you money.  If you spend too much time on consumption, you'll wonder why it suddenly starts taking 10 times as long to implement each feature, why the system is grinding to a halt, and why your developers have no clue what's causing your latest dozen bugs.<p>In my experience, the best developers spend 80-90% of their time on investment and 10-20% on consumption.  They'll apparently do nothing for 3 months and then crank out an app in a week (for an extreme example, check out PG's <i>On Lisp</i>: he writes a whole book on building up tools, and then in the very last chapter, he's like ""Oh, by the way, here's a Prolog interpreter.  In 50 lines.  Done"").  The worst programmers reverse that - they'll spend 80-90% of their time implementing your feature requests and only 10-20% cleaning things up, moving common code into functions, etc.<p>So here's your problem: under U.S. law, all ""investment"" that an employee creates is owned by their employer.  Meanwhile, their salary is dependent upon how good <i>you</i> think they are, which depends upon how much they've done to improve the bottom line.  In other words, they have every incentive to ""consume"" (push out quick features for the boss) and no incentive to ""invest"" (clean up code, setup infrastructure, build tools).  The only way to rectify this is to make them part of the company's capital structure, so that they are effectively part-owners of the code they build.<p>You might think that you know better and can compensate people based on how well they <i>actually</i> do, but in practice it's virtually impossible.  Ask yourself: how would you feel if your development team did <i>nothing</i> for 3 months.  Because that's what it'll look like if they're doing their jobs properly.  You say that you've got a terrific programmer who's working for no equity, but you're seeing him at his best.  It's easy to crank out impressive stuff on a small green-field project; it's much harder to keep it working as the project grows.  The choices he makes now will determine the future development of your software, even if you fire him and get someone else later.<p>Don't do this to your startup.  If you're a tech company, spend your equity getting a top-notch tech person, then give him the discretion he needs to do things right.  Otherwise (assuming you've gotten all the marketing/PR/idea stuff right), I can predict the path your startup will take.  You'll get lots of buzz and lots of users, and they'll love you for cranking out features quickly.  You'll dominate the market.  Then, about 1-2 years in, you'll hit a brick wall, and every feature you add will result in lots of mysterious bugs.  Fixing these will result in dozens of new bugs, and you won't be able to add any new features at all.  Competitors will arise and start catching up to you.  You'll fire your tech team, thinking that they must be incompetent.  You'll start a rewrite-from-scratch project, which you'll abandon when your investors come calling.  Then you go out of business.<p>I've gone through it once and probably would've gone through it a second time had I not just left my last employer.  It's not pretty.",1191722694
64314,comment,63009,64256,0,0,ivankirigin,,,"At what point do VCs learn to believe in bolder ideas? There are VCs outside hubs, right?<p>If the trend if that many more small startups with bold ideas start to win, other VCs have to become more bold, and so the difference between, for example, the Valley with their aggressive VCs and other areas would diminish.<p>I do agree with your basic premise though.",1191722493
