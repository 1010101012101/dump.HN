ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
89901,story,,,11,4,iamelgringo,"""temporary hack"" ",http://www.google.com/codesearch?q=%22temporary+hack%22&hl=en&btnG=Search+Code,,1197737896
89900,comment,89525,89525,0,0,kajecounterhack,,,"Step 1 - Go outside and run a few miles.<p>Step 2 - If you're not too tired, call some friends and throw a party.<p>Step 3 - Pull a 24 hour computer fast.<p>Step 4 - Get a girlfriend.<p><p>If you manage to get past step 4, you're probably switched off. If you get to step 4 and you switch back on, be prepared to start over.",1197737861
89899,story,,,3,0,zachbeane,"Three persuasion tips",http://xach.livejournal.com/148479.html,,1197737786
89898,story,,,5,0,iamelgringo,"E.W. Dijkstra Archive: Answers to questions from students of Software Engineering",http://www.cs.utexas.edu/users/EWD/transcriptions/EWD13xx/EWD1305.html,,1197737717
89897,story,,,11,0,iamelgringo,"Amazon SimpleDB and CouchDB compared",http://www.automatthew.com/2007/12/amazon-simpledb-and-couchdb-compared.html,,1197737663
89896,story,,,1,1,davidw,"Free Software Beer Network",http://journal.dedasys.com/articles/2007/12/15/free-software-beer-network,,1197737628
89895,comment,84547,87623,0,0,paulgb,,,"I was being sarcastic :P",1197737569
89894,story,,,17,2,iamelgringo,"Why Apple Isn't Japanese",http://www.newsweek.com/id/73236,,1197737444
89893,comment,89821,89821,0,0,mechanical_fish,,,"<a href=""http://www.codinghorror.com/blog/archives/001017.html"" rel=""nofollow"">http://www.codinghorror.com/blog/archives/001017.html</a>",1197737214
89892,story,,,1,0,nickb,"Pig Toy Gets Completely Squashed, Raises Like Terminator T1000",http://toxicblogs.blogspot.com/2007/12/pig-toy-gets-completely-squashed-raises.html,,1197736945
89891,comment,89525,89525,0,0,tel,,,"Meditation can do wonders. Just sit somewhere comfortable, give yourself 30 minutes, and don't think about anything. It can take practice -- maybe a lot of practice -- but the mental and physical recharge it gives is very refreshing. I find that the trick is scheduling it. Even if you can't turn off, just try for all 30 minutes. Eventually you'll get somewhere.<p>I liken it to getting into the Flow at doing nothing.",1197736905
89890,comment,89861,89881,0,0,raju,,,"""Having a well-defined home-life where you can have a clean house, and a simple spread of food available so that you have variety but don't have to think too hard when you go shopping. I've turned doing the dishes and ironing into relaxing, therapeutic exercises - works for me. There's nothing quite so simple and delighting as sweeping a wooden floor and having it clean at the end.""<p>I agree. I find that if I am working (reading) all the time [I have a full time job and am moonlighting] its hard to keep the house clean and organized, but having a clean, well organized home really helps me have a clear head, and get something done. It also reduces the amount of stress you feel. I know this sounds very ""new-agey"" but it does help. Further, the very task of cleaning has a very cathartic effect on me. Start small, with the kitchen or the restroom,  find a place for everything, and put everything in its place and see how you feel. This will also get you away from the computer for a while, and normally, after a few hours of cleaning I have neither the energy or the motivation to get any work done, so its a good day to take the evening off. <p>Hope this helps.",1197736804
89889,comment,89447,89516,0,0,mechanical_fish,,,"Don't forget the part where your brand-new custom framework needs to properly serialize and deserialize each value based on its type. Because according to this person:\n<a href=""http://www.satine.org/archives/2007/12/13/amazon-simpledb/"" rel=""nofollow"">http://www.satine.org/archives/2007/12/13/amazon-simpledb/</a><p>...Amazon's magical indexing technology is to make all searches lexicographical. So you have to ""zero-pad your integers, add positive offsets to negative integer sets, and convert dates into something like ISO 8601"". Or something.<p>But at least you don't have to write one of those fiendishly difficult CREATE TABLE statements! Ah, ""simplicity""!",1197736492
89888,story,,,2,1,nickb,"Snocap melting away",http://www.p2pnet.net/story/14340,,1197736484
89887,story,,,1,0,nickb,"Survey: People skills valued over those for IT",http://news.zdnet.com/2100-9595_22-6222828.html,,1197736355
89886,comment,89861,89861,0,0,awt,,,"Ditch it and work on something that interests you.",1197735948
89885,comment,89861,89865,0,0,hhm,,,"I thought you had lost (somehow) your capacity to solve some kind of problems. But now I see maybe you are talking about something very different: you aren't being able to do that because you don't have the will to do that.<p>Sorry to misunderstand you. If that's your problem, you don't need a doctor, my mistake.",1197735692
89884,comment,89861,89861,0,0,Kaizyn,,,"My suggestion for you is that you to set one small task for yourself per day and force yourself to complete it until you feel compelled to work hard at it again.  While it may be a real challenge for a time, at least then you will continue making forward progress.  Nothing like progress makes you want to work on something.  Good luck!",1197735476
89883,comment,89861,89861,0,0,quimax,,,"Not really nice to hear about somebody else through the same, really. I can not code a single routine since a week ago. Eight months working like a maniac on my startup. Alone. Crazy? Yeah.<p>Exhaustion? Probably. What to do? I was thinking on a small flight to Rome (I am in Madrid) I have friends there, but I do not fell very social. Ski? May be. What the hell! I hate feeling this way.<p>Max",1197735436
89882,comment,89861,89861,0,0,brlewis,,,"Tell at least one of your users that you're going to do it.  Then you'll do it.",1197735346
89881,comment,89861,89861,0,0,cturner,,,"> Why can't I do it? I feel like the people in the Bunuel\n> movie who can't leave the party.<p>I got to exactly this stage when I was working on my own projects last year. I was excited about them in concept but lost the ability to do work. I decided to move to a city with dull, predictable work and better wages in order to re-motivate myself and reduce mental stress. It has mostly worked - I've saved up a lot of cash this year and am now getting back into my projects. But whereas I thought it would take three months to get there, it was more like ten or eleven in the end but I'm back in form now and have resigned.<p>Last weekend I decided I needed a better backup strategy and just did it. This time last year I just would have felt extra stress at the prospect of it, and then not done it.<p>Here are the big factors I found:<p>1) Exercise and health. I have long-term back and shoulder problems. Since moving to london I've got into semi-regular exercise (still don't do enough) and have seen improvements this year with help from a physio. Being in regular exercise makes everything about life better, including those times where you settle down to do some work.<p>2) Bad goals leads to mental stress. I spent way too much time working on goals that were too distant from my project. Now I'm setting myself easy goals, and whever anything seems not quite easy I refuse to do it unless I can find a way to make it easy.<p>3) Having a well-defined home-life where you can have a clean house, and a simple spread of food available so that you have variety but don't have to think too hard when you go shopping. I've turned doing the dishes and ironing into relaxing, therapeutic exercises - works for me. There's nothing quite so simple and delighting as sweeping a wooden floor and having it clean at the end.<p>If you've never had a burnout before, it's probably worth seeing a councilor or a doctor just to talk through it with them. I find that I generally avoid talking about my problems because I was brought up in an environment where people who whinged were just ""attention-seeking"". But if I see someone where I don't give a damn what they think of me, and where I paying good money to sort out a problem, then my reticence goes.<p>In my experience, burnout is a curve, and once you've got to the point you're at now it requires dealing with and gets worse before it plateaus and gets better. If you're mentally exhausted it can be hard to build a plan for dealing with it, also. The authority of a plan defined by someone else for me to follow helps me in these circumstances.",1197735319
89880,comment,89615,89879,0,0,nostrademons,,,"As for questions you should ask of the employer:<p>1.) Be sure to ask what specific tasks you will be doing.  If it's a startup, they're going to say ""We can't know that, because there's lots of things to do and we all play multiple roles.""  Acknowledge that and press them on what you'll be doing within the first month of hiring (or start with that version of the question).<p>The reason for this (aside from it speaking well about your engagement, and weeding out companies where the daily work will suck) is that an inability to figure out what a new employee should be doing is a <i>huge</i> negative predictor of management skill.  I took a job like this; it worked out great for the first 8 months or so, when I took his lack of direction as a signal to pick out tasks that would be good for the organization and do them.  It turned bad when he decided to actually tell me to do something and then couldn't provide clear direction about what it was I was supposed to do, nor discretion to let me make the decision myself.<p>2.) Ask about the business model, growth rates, sources of revenue, and profitability of the startup.  You'll want to know this, but it's somewhat difficult to interpret it.  When I first started looking for startup jobs, I cared mostly about profitability, which was a mistake.<p>Basically, a ""startup"" as it's normally discussed on this site is a business that's growing really fast.  Like, a few hundred % a year (in other words, it has to be more than doubling each year).  Very few early-stage small businesses actually meet this criteria; I've never worked at one, though I've been at one or two where the market could've supported that if we'd gotten our act together and shipped product.<p>Profitability basically only has a bearing on whether you are likely to lose your job through no fault of your own.  If the company is profitable and you are productive, you're very unlikely to get laid off.  If the company is not profitable, everything is a race against running out of money.  If you join an unprofitable company, be sure you find out their burn rate, runway, and expected break-even point.  Make sure there's an adequate safety margin between the break-even point and runway; things tend to go wrong in startups, and everything takes twice as long as you expect.  Otherwise, expect your job to be toast at the end of the runway.<p>On a similar note, find out where the revenue is coming from.  A company that gets $4M in revenue from 100,000 customers is a lot a more stable than one that gets $4M from 4 customers.  Consulting companies are even less stable: consulting revenues tend to shrink dramatically in recessions.  A profitable consulting company is not a startup in the sense of this site: it can't scale at the growth rates of a typical startup, and if it wants to turn into a product company, it'll basically have to start from square one.<p>3.) Make sure you meet all your prospective coworkers.  You'll be working with these people a lot; make sure they are people you can work with.  Many startups have an employee-veto hiring policy anyway; if any employee doesn't like the new candidate, it's a no-hire.  (This is why I was doing interviews, BTW.)<p>4.) Ask if any employees have left recently, and why.  Some turnover - perhaps 10%/year, or one employee in a firm of 10 - is natural.  However, if the whole project team quit, that's a bad sign.<p>5.) Ask about exit strategies and where the founders see the company going over the years.  There's no right answer here, but there are things to be aware of.  For example, option-holding employees tend get screwed in an acquisition.  Many companies will either convert options to options in the acquirer or let employees buy in before the acquisition, but there's no requirement that they do so.  And in many cases, your stock grants are small enough that it doesn't matter much anyway.  The only early employee I know of that got rich off a startup was a VP in a company that went IPO; most made between $3k-10k.  (This is under Massachusetts culture/laws; things may be different in California or other states.)<p>If the founder intends to keep the company private and grow the business organically, stock grants are effectively worthless.  There's no liquidity; you can't sell them.  Go for a fat salary in that case.<p>6.) At the very end, ask about salary/benefits/stock.  These things do matter, you just don't want to seem too eager about them.  Companies will expect you to ask at some point, they just don't expect it to be the first thing you care about.",1197735078
89879,comment,89615,89878,0,0,nostrademons,,,"My first few interviews, I asked ""language trivia"" questions, usually about simple standard library calls or concurrency issues (I assume they know the basic syntax, and if they don't I can catch it when they write code).  I moved away from these in my later interviews, though, because I found they didn't really tell me anything interesting.  The standard libs in most languages are too big for anyone to know them all, so this is really testing how well their experience matches up with yours, and that's not often that relevant for the job.<p>I'm going to ask why you want the job.  The reason for this is that I've found passion is the best predictor of job performance (remember the senior software engineer who went through 3-4 months of interviews?  he turned out to be a much better programmer than me, at least at this particular job, because he cared about the project so much more).  Don't bullshit me with vague answers; you're not really doing yourself any favors if you apply for a job you don't really want.  But if you really want to work at a company because you believe in what they're doing, say that - your passion comes through how you speak and not necessarily what you say.<p>I don't ask this myself, but many people who have interviewed me have: ""How comfortable are you playing many different roles?""  In startups, you'll be doing this a lot - the job you're hired for is probably not what you'll be doing in six months.  Be sure you're comfortable with this before applying.<p>I also look for evidence that the candidate has done some research about us in their answers (and questions!) throughout the interview.  It's a big plus if you don't just want <i>a</i> job, but want <i>this</i> job.",1197735062
89878,comment,89615,89877,0,0,nostrademons,,,"I always have applicants write code on a whiteboard.  I usually pick a simple coding problem, like something that'd be an intro computer science problem or code kata.  (I tried using psykotic's Left Factoring Regular Expressions problem off programming Reddit once, but it was wildly inappropriate for the caliber of applicants we were getting.)  If you're hiring for a database design position, I might have you design a database schema instead.  I'm looking for:<p>1.) I don't care about syntax errors.  It's trivially easy to forget a semicolon or parentheses on a whiteboard and doesn't reflect poorly on you if you do (usually I'll just write them in at the end).<p>2.) I do care about how fast you can remember language keywords and commonly used library functions.  This is usually a good proxy for experience with the language, because after any significant development these tend to get ""burned in"" and you can write them out instinctively.  Someone who doesn't remember the syntax for a foreach loop in PHP probably hasn't programmed PHP in a while.<p>3.) You can make all the mistakes you want, but I'm looking at how quickly you realize they are mistakes.  It's a very bad habit to write something out, look at it, realize it's wrong, and then rewrite the whole thing.  (Okay, that's basically what I've been doing with my startup for the last month, but at least it's wrong on an architectural level, in ways that we couldn't have foreseen a month ago.)  It's a good habit to write things down and immediately correct them if they're wrong.<p>4.) If you come up with the textbook algorithm immediately, it shows me that you've had this problem in class and actually remember what you learned there (I may have you do another problem then).  If you come up with the textbook algorithm eventually, it shows me that you're good at thinking things through and analyzing a problem.  This is probably the best situation hiring-wise.  If you come up with a completely out-of-the-box solution that works and doesn't have any obvious fencepost or performance problems, it shows you're a creative thinker.  This is also speaks well about you as a candidate.  If you struggle and come up with something completely wrong, I'll probably prod you with questions about its behavior; this is not a good situation, but I'll look more favorably upon someone who finishes and gets the correct answer eventually than someone who gives up and says ""I don't know.""<p>5.) I like it when people use library functions rather than reinventing the wheel (particularly if they are library functions I don't know myself; though I will check and learn them myself after the interview to make sure you aren't bullshitting me ;-)).  If I ask someone to write a sorting algorithm and they put down ""sort()"", they get points for their cheekiness, though I'll have them do another problem or add some specific requirement that makes the library useless.<p>6.) It's good to talk through what you're doing, for the same reasons teachers ask you to show your work.  It lets you get partial credit for right-thinking but wrong-writing.  And if your thinking is off but you say it aloud, I'm more likely to ask prodding questions to make you rethink; I look at this more favorably than if you got to the end, pronounced it done, and it was wrong.  You're also more likely to catch the error yourself, and correcting yourself is actually a net positive.",1197735027
89877,comment,89615,89615,0,0,nostrademons,,,"(Wow, I think I wrote a comment too long for news.YC to process.  I'm going to break it up and post it as replies to itself.)<p>It varies a lot depending on your hiring circumstances.  I was hired on the spot, before the interview, because it was for an internship and I came highly recommended by a friend of the chief architect.  Then when I applied to the same company for a full-time position, I had an offer on-the-spot based on my internship.  OTOH, when we hired a more senior guy, he went through about 6 rounds of interviews over 3-4 months, including programming tests and full interviews with the rest of the staff.<p>Here's what I looked for when I was interviewing candidates who had no prior relationship with the company.  (And keep in mind that I'm far from the best interviewer, and more experienced interviewers may have more creative questions):<p>Expect questions about each prior project that you've listed on your resume.  The resume tells me what you've been involved with; during the interview, I'm going to want to find out:<p>1.) What precisely was your involvement?  Did you write small submodules while someone else stitched them together, or did you come up with the whole architecture?  Maintenance or new development?  Did you have ""people yell at you"" responsibility?  <p>2.) What technologies did you use (if not listed on your resume)?  This includes things like your IDE, source code management system, and bugtracker.  This actually wouldn't affect my ""hire or don't hire"" decision much (though I want to see that you at least know what IDEs, source control, and bugtracking are), but I want to know the information so that if you are hired you can get up to speed as quickly as possible.<p>3.) What challenges and dead-ends did you face, and how did you resolve them?<p>4.) Did it enter production, and how did customers respond to it?<p>5.) Was it a team or individual project?  Many interviewees assume that the right answer is ""team"" and try to make some of their solo efforts sound like team projects (""Well, I had my friend helping, and there were these classmates...""), but really I like to see <i>both</i>.  There are aspects to solo projects that are in some ways harder than group efforts.  (And of course, the point is to see what you've really done and not what you think the interviewer wants to hear you've done...)",1197734997
89876,comment,89861,89869,0,0,brooksbp,,,"Ditto.  I'm sitting in the university library.  Linear Algebra final in 1.5 hours.  And I'm reading Hacker News...",1197734645
