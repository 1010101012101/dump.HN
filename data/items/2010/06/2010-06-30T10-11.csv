ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
1474451,comment,1474094,1474226,0,0,edanm,,,"""In a way I find it very disturbing, that we need to learn how to parent our children.""<p>Really? Why?<p>I've never understood why people look at parenting differently than any other skill you have to learn.",1277895585
1474450,comment,1471771,1472160,0,0,varjag,,,"Uh no.<p>You can have a noisy neighbor, go through a lengthy feud involving building administration and law enforcement, and finally make them reasonably quiet at night. Now, try doing that with the tourists who are in just for a couple of days and don't give a damn.",1277895582
1474449,comment,1471083,1471386,0,0,jules,,,"Aren't cavities a solved problem? I don't have any cavities and neither do most young people I know. Brush your teeth twice a day!",1277895579
1474448,comment,1474315,1474315,0,0,jolosan,,,"Sometimes you need to find a mentor to give you a direction. Additionally, surround yourself with smart and talented designers.",1277895568
1474447,comment,1474094,1474390,0,0,Keyframe,,,"I was you a couple of days ago. Now I'm 29!",1277895495
1474446,comment,1474315,1474315,0,0,tom_ilsinszki,,,"Consider working with a designer even on small projects, because it's a low-cost and low-risk way to get to know designers and filter out the ones, you'd love to work with on bigger projects.<p>Also, I don't have proof for this, but based on my experiences, designers need to be less analytical, and a little more intuitive. While programmers need to try to be as analytical as possible (while programming at least). So, I think it's not really easy to be good at both (again, my opinion).<p>Advice: develop an eye for design, so you know what's good and what's not, and learn how to communicate with designers more effectively than most programmers.",1277895493
1474445,comment,1474094,1474094,0,0,fbnt,,,"personal relationships > money",1277895485
1474444,comment,1470665,1470665,0,0,pramit,,,"I agree with it. The real world teaches more than the classroom. I have written quite a bit about the efficiency of business education and have created alternatives as well.If you will permit me,
Do we need MBAs: A 5 part series <a href=""http://bighow.com/tags/doweneedmbas"" rel=""nofollow"">http://bighow.com/tags/doweneedmbas</a>
Do we need MBAs: A presentation <a href=""http://www.slideshare.net/pramitsingh/the-success-manual-do-we-need-mbas"" rel=""nofollow"">http://www.slideshare.net/pramitsingh/the-success-manual-do-...</a><p>Inspired by The Personal MBA, I went one step ahead and created The Success Manual: Guide to 130 important skills
- It contains summaries of 100+ Greatest business books. Version 2.0 is on the way <a href=""http://thesuccessmanual.bighow.com"" rel=""nofollow"">http://thesuccessmanual.bighow.com</a>",1277895482
1474442,comment,1474094,1474419,0,0,tome,,,"It seems to me that scorpion032's post is intended to be an ironic ""naivity in his 20's"" rather than a statement he actually believes.",1277895446
1474441,comment,1474096,1474096,0,0,barrkel,,,"I would draw the line at additive, multiplicative operators generally, but I would also include &&, || and comparisons in C-derived languages (contra Tim). Knowing the extra three precedence levels is a cheap investment that covers such a wide range of commonly used languages - C, Java, C++, C#, bash's let/for/etc.<p>I don't think it's necessary to have to parenthesize:<p><pre><code>    u*t + a*t*t / 2.0
</code></pre>
Working with Pascal (Delphi) quite a bit as I do, I also find this idiom - required in Pascal with its limited number of levels - tedious:<p><pre><code>    if (a > b) and (b < c) then // ...
</code></pre>
The trouble is that you begin writing this:<p><pre><code>    if a > b then
</code></pre>
but updating it to add in the new conditional means you have to go back and forth over the expression inserting parentheses. I think C and related languages at the expression level make this better by making comparison operators have a higher precedence to boolean operators.<p>Bitwise operators, of course, have an entirely different precedence level and if you're using C, it's easy to get caught out:<p><pre><code>    if (flags & MASK == FLAG1 | FLAG2) // cue much confusion</code></pre>",1277895444
1474440,comment,1474094,1474252,0,0,Keyframe,,,"Wise words lionhearted. Wise words.<p>Note that you can hire early flameouts in bundles and rotate them when each flames out though. If you can manage that, it's like driving with NOx.",1277895433
1474439,comment,1473770,1474352,0,0,seabee,,,"The good PR comes from harnessing somebody's enthusiasm for the product (how many people have you ever seen bother to make this kind of contact?) rather than turning them towards the 'Buy' page and ending it there.<p>The guy could easily have taken the licence and done nothing. Instead, he got it to #1 on reddit. Seems like a good PR move to me.",1277895407
1474438,story,,,2,0,edragonu,"Natural Productivity - iAdd for iPhone",http://www.dragosroua.com/natural-productivity-introducing-iadd-for-iphone/,,1277895388
1474437,comment,1474096,1474096,0,0,sovande,,,"Ridiculous, and miss out on boolean algebra and cool optimization <a href=""http://sigpipe.macromates.com/2009/07/27/simplifying-boolean-expressions/"" rel=""nofollow"">http://sigpipe.macromates.com/2009/07/27/simplifying-boolean...</a>",1277895362
1474436,comment,1474094,1474094,0,0,motters,,,"Some advice I'd give to people in their 20s entering the technology business is:<p>Don't accept ""I give you my word"" as part of any business negotiation or contract.  This probably applies more in the UK, where there is a tradition/myth of gentlemanly conduct between professionals.  On a couple of occasions in my 20s I got caught out in situations where the business partner had seemed to be completely trustworthy and had ""given their word"" that they would do the right thing.<p>Try to live a modest lifestyle, and save money.  In the technology business companies come and go, and you can never rely upon continuous employment.  Even in Europe, where there is supposedly a social security ""safety net"", there will be times when you need to fall back on savings made during the good times (this is assuming that you don't have wealthy parents).<p>Even if your job appears totally secure, it isn't.  When you don't have much experience behind you it is possible to be lulled into a false sense of security.  It doesn't matter how big the company is, or how illustrious the clients.<p>If you're doing contract work, always read the terms of the contract and be prepared to negotiate over clauses that you don't like.  Signing up to stuff without reading it can get you into trouble.<p>In the software world focussing your career around one language or platform can be a mistake.  Learn as much as you can about a variety of systems.  I didn't make this mistake myself, but saw people who did.  Don't let yourself become a language zealot, and avoid closing your mind off to other possibilities.",1277895340
1474435,story,,,1,0,lmacvittie,"Cloud Needs Context-Aware Provisioning ",http://devcentral.f5.com/weblogs/macvittie/archive/2010/06/30/cloud-needs-context-aware-provisioning.aspx,,1277895316
1474434,story,,,1,0,suzane,"Xbox 360 game lets players battle oil spill",http://www.msnbc.msn.com/id/38003248/ns/technology_and_science-games/,"Frustrated from weeks spent watching BP's oil spread far and wide across the gulf? Ever wish you could swoop super-hero like to the scene and stop the evil oil in its tracks yourself?",1277895132
1474433,comment,1474239,1474415,0,0,eru,,,"The guys on Haskell Cafe delight in complex problems (and solutions).  There's a list for beginners, too.<p>You will enjoy the Haskell Cafe later.<p>By the way, one small exercise (from a paper by Chris Okasaki): Write a function with the type<p><pre><code>  Tree a -> Tree Int
</code></pre>
where<p><pre><code>  data Tree a = Node a (Tree a) (Tree a) | Empty
</code></pre>
your function should all nodes in a tree with their position in level order traversal (also called breadth first search).  E.g. (lot == lever order traversal)<p><pre><code>  lot Empty = Empty
  lot (Node 'a' (Node 'b' Empty (Node 'c' Empty Empty))
                (Node 'd' Empty Empty)) =
      (Node '0' (Node '1' Empty (Node '3' Empty Empty))
                (Node '2' Empty Empty))</code></pre>",1277895103
1474432,comment,1474096,1474335,0,0,jsvaughan,,,"yeah i thought that was surprising.  operator precedence is one thing, but not knowing about default modifier, not so good.",1277894972
1474431,comment,1473869,1473869,0,0,known,,,"Isn't it possible to configure MySQL server and data to run in memory if we've enough RAM?",1277894946
1474430,comment,1474315,1474315,0,0,uggedal,,,"Read <a href=""http://designingfortheweb.co.uk/book/"" rel=""nofollow"">http://designingfortheweb.co.uk/book/</a>",1277894905
1474429,comment,1474315,1474315,0,0,mebassett,,,"I'm a terrible designer too, so I'm really not in any position to give advice, but I can share my process.  I figure, like any other technique, the way to get better is to do it a lot.  I usually get so frustrated after trying to make a decent design for one website that I don't do it again for several weeks.  Anyways:<p>0) learn new design techniques.  Try to do this regularly. Its like adding new tools to your toolbox.  A list Apart has a bunch of great tutorials, and checking out design galleries (<a href=""http://html5gallery.com/"" rel=""nofollow"">http://html5gallery.com/</a> has some nice sites) helps to give you inspiration and give you something to try to duplicate on your own.  I don't mean to duplicate good designs for your own work, but to duplicate good design so you can learn the techniques used.<p>1) Sketch a design on paper.  I don't focus on making it look cool or pretty because I don't know how.  I try to focus on solving the user's problems.  I do several sketches, and ask friends to glance at each.  At the very least to see if they get the idea of the website from looking at, but also to know which ones they like best.<p>2) Graphical Mockups.  I use the gimp or adobe fireworks.  Again, I make several different mockups from my best sketches (between 2-4).  And again, I have friends and colleagues review them and get their feedback.  I put as much detail as I can into each - hover effects, shading, et cetera.  I try to make a pixel-for-pixel mockup of what the actual html/css will look like.<p>3) Finally write the html/css for my best design.",1277894886
1474428,comment,1472706,1473445,0,0,sethg,,,"I have a biased sample, but almost all of the Russian expats I know are Jewish.  Their connections probably involve <i>being interrogated by</i> the KGB.",1277894846
1474427,comment,1474096,1474335,0,0,Tichy,,,"It rarely ever seems to be useful, though?",1277894771
1474426,comment,1474094,1474392,0,0,tome,,,"What do you mean by ""cold calling"" in this context?",1277894771
1474425,story,,,1,0,greengirl512,"Tool of the Day:  Envolve: Get Your Visitors Talking",http://www.usefultools.com/2010/06/get-your-visitors-talking/,,1277894744
1474424,comment,1474096,1474196,0,0,barrkel,,,"Java does not, as yet, have a kind of method or closure reference type, so this ambiguity doesn't exist - the parentheses on the method call are not an operator like in C++.",1277894728
1474423,comment,1474315,1474315,0,0,bombs,,,"The books suggested by SimpleBits were good for me, <a href=""http://astore.amazon.com/simplebits-20/191-2738847-5476816?_encoding=UTF8&node=8"" rel=""nofollow"">http://astore.amazon.com/simplebits-20/191-2738847-5476816?_...</a>.",1277894726
1474422,comment,1474207,1474207,0,0,bjonathan,,,"Great idea !",1277894725
1474421,comment,1474315,1474315,0,0,awt,,,"A book I've found to be very useful for picking the absolute basics of graphic design (which applies to web design in many ways) is ""The Non-Designer's Design Book.""<p>It covers the basic principles of graphic design:<p>Proximity<p>Alignment<p>Repetition<p>Contrast<p>It also covers the basics of using color in design.<p>Universal Principles of Design is also a fascinating read.<p>I've found that reading these books, then trying to design something is helping.  It helps if you've tried to design something before reading the books as well.",1277894637
1474420,comment,1474153,1474153,0,0,mr_eel,,,"Seriously; as soon as someone makes a phone better than the iPhone, I'll buy it. I've used Android phones and I feel they have a lot of potential, but the lack the polish, the fit-and-finish that the iPhone has. Frankly; I don't enjoy using them because they always seem laggy or the UIs between apps are wildly inconsistent.<p>These are fixable issues, but I haven't seen anything yet.",1277894612
1474419,comment,1474094,1474390,0,0,jarmop,,,"In the year 2020, you'll find this post of yours - and have a hearty laugh. How do I know? Because around 1998 I wrote quite similar sentiment...",1277894580
1474418,story,,,1,0,Rhapso,"Methane and Martial Law in the Gulf of Mexico",http://www.nationalexpositor.com/News/2631.html,,1277894552
1474417,story,,,1,0,donohoe,"Tesla Leaves I.P.O. Price in the Dust",http://dealbook.blogs.nytimes.com/2010/06/30/tesla-leaves-i-p-o-price-in-the-dust/?src=twr,,1277894530
1474416,comment,1474315,1474315,0,0,andycroll,,,"I always recommend Mark Boulton's book:<p><a href=""http://fivesimplesteps.com/books/practical-guide-designing-for-the-web"" rel=""nofollow"">http://fivesimplesteps.com/books/practical-guide-designing-f...</a><p>It's more about the theory of design, but presented in an accessible style and 'web' context.<p>There's also the Pragmatic Programmer's 'Design for Developers' book, but I haven't gotten around to anything more than skimming that one yet.<p><a href=""http://www.pragprog.com/titles/bhgwad/web-design-for-developers"" rel=""nofollow"">http://www.pragprog.com/titles/bhgwad/web-design-for-develop...</a><p>Hope these help.",1277894509
1474415,comment,1474239,1474351,0,0,danieldk,,,"I'd say: just try it. After reading haskell-cafe for a day, I felt utterly incapable of ever learning Haskell. I started picking up the language using Real World Haskell (quite an acceptable book). I can read most programs now and crafted some short programs. I still find predicting memory/time use under a lazy-evaluation regime difficult. But it is certainly a nice experience ;)",1277894467
1474413,comment,1473869,1473869,0,0,almost,,,"I don't understand all these ""why we're not using NoSQL"" posts. Why is it interesting that someone choose the default choice? Why would they use a NoSQL database of some sort for a major project unless they actually had a need for it? I'm half expecting a ""why we don't use Brainfuck""* post one of these days...<p>*Not that I'm comparing any NoSQL database or NoSQL databases in general to Brainfuck, it's just that I don't see the point of ""why we don't use X"" posts when there was no particular reason to suppose that they might use X in the first place.",1277894419
1474412,comment,1474239,1474351,0,0,eru,,,"I really like the syntax of Haskell.  You can get used to it fairly quickly.<p>> [...] but on the other hand they encourage programmers to do literary story-telling.<p>Try literate Haskell. (I say this only partially tongue-in-cheek.)  Really, I think that Haskell is very geared towards being read by humans.  This is mostly because it's so good at gluing, that you can break your problem apart in smaller pieces in the first place.<p>E.g. let's look at a program that computes sqrt(2).  With Haskell you can talk first about how to produce infinite list of ever better approximations:<p><pre><code>  next x = (2 / x + x) / 2
  approximations = iterate next 1
</code></pre>
and then talk about when to stop and finally give an answer later on.<p><pre><code>  goodEnough x = abs (2-x*x) <= 0.0001
  sqrtTwo = find goodEnough approximations
</code></pre>
In a strict language, you usually intermingle producing new values with watching out for the ending condition:<p><pre><code>  guess = 1
  while abs(2 - guess*guess) >= 0.0001:
    guess = (2/guess + guess) / 2
</code></pre>
Python's generators help, but they are more restricted.  (Which is intended, Python wants to stay simple.)",1277894418
1474411,comment,1473462,1473897,0,0,kevingadd,,,"Having used both Objective-C and .NET, I would much rather be faced with implementing a dynamic language atop .NET than have to do so atop Objective-C. While ObjC's dispatch system is quite dynamic, the relative weakness of the type system (if you can even call what ObjC has a 'type' system) and the amount of C baggage it drags along with it makes it a rather unfriendly environment for running dynamic code.<p>Here's one example: With the .NET type system, you can check a set of arguments against the signature of a method defined in the type information of an object instance, which means that you can be absolutely certain that your invocation will succeed without corrupting state or returning incorrect results. What's more, you can do this check at compile time (in a static language, like C#) or at run time, via reflection. The .NET JIT and runtime code generation facilities mean that you can do 'static' verification at load time for scripts instead of at the point of every invocation. In cases where you have a mismatch between the types requested and the types provided, you get clear, precise error feedback that allows the problem to be corrected. The .NET runtime is able to use this type system to perform a large number of useful safety checks against all code when it's first loaded, so that in many cases it can guarantee no memory corruption or out-of-bounds accesses will occur <i>without</i> having to check every single operation.<p>As the vast majority of Objective C invocations in a Cocoa application are effectively static (you're sending a message, as described in the Apple documentation, to an object of a given interface, as described in the Apple documentation, which you constructed following instructions in the Apple documentation), the dynamic nature of ObjC invocation wins you very little. The ObjC type system cannot provide you much assistance for those invocations, because it's built atop the C type system - GCC will check your argument types for you statically at compile time, but at run time, given an arbitrary ObjC object, it's going to be quite difficult to be certain that an invocation will succeed. What's more, in most cases GCC can provide no more than warnings, and those warnings are often incorrect.<p>On the other hand, for the vast majority of code written in a language like Ruby or Python, your method signatures contain no type information, so no validation can be performed. Neither Objective C or .NET win here because both require strong types for arguments. You need only look at NSArray to see how little you win by using Objective C in this case.<p>Ultimately, in both cases, neither environment is a good fit for a language like Ruby, but I would argue that .NET (and, for similar reasons, the JVM) provides a far stronger foundation upon which to build a language like Ruby. Building a language like Ruby on top of Objective C is only superior to building it in C due to its status as Apple's preferred language for OS X development.",1277894416
1474409,comment,1471223,1472673,0,0,dharma1,,,"thanks tried it - seems a bit buggy. The screensharing starts feeding back for instance.. the image quality could surely be better with h.264.. and I couldn't find an obvious way of drawing directly on top of my screen, almost like drawing on a transparency.<p>I have to say in terms of ease of use and speed, I prefer Skype's native code to Connectnow's Flash/Flex by a long stretch",1277894337
1474407,comment,1474315,1474315,0,0,nandemo,,,"Meta-comment: I really dislike the trend of abbreviating ""web design"" to ""design"". In a software context, I take ""design"" to be ""software design"", though even this abbreviation is usually unnecessary. Why pollute the namespace?",1277894220
1474406,comment,1474202,1474401,0,0,LogicHoleFlaw,,,"I just desoldered a half-dozen bad caps from my current motherboard and replaced them with new ones from a reliable manufacturer. It was a huge hassle. Fortunately the new caps are a lot cheaper than doing a motherboard swap/upgrade on the PC. It's an older one that I don't really want to mess with too much yet.",1277894194
1474404,comment,1474094,1474094,0,0,pavelludiq,,,"My twenties started 6 months ago, but I've already discovered several of these.<p>I discovered that despite knowing several languages and frameworks, i can't actually program. Despite being able to get descent grades in high-school without studying i can't do it with university material, so i have less time to play with computers, because i actually have to put in effort. I thought smoking is bad for you, the same way junk food is, actually it has a much bigger impact on your body, much faster. I thought i don't need to sleep...ever. I look forward to discovering more of these, as quickly as possible.",1277894045
1474403,comment,1474020,1474305,0,0,Hagelin,,,"techdirt.com vs. www.techdirt.com",1277893975
1474402,comment,1474094,1474094,0,0,todayiamme,,,"<i>Disclaimer: I am not even 19 yet. So take this comment with an ocean full of salt.</i><p>I have failed in my life more times than I can remember. In fact, everything I have ever done has been a failure at some level or the other. All of my plans to get myself out of the rut and actually do something with my life have failed.<p>I have so many shortcomings that I can't list them in a book let alone a comment, but pitfall has taught me something. Never ever give up. It is something so cliched, but somehow it's the essence of life. All of the advice above me has taught me a lot, but the thing is that while implementing that advice you <i>will</i> fail.<p>You will fail again and again and again. I really hope that life has dealt you a fair hand, but sooner or later you will feel like everything is lost, and that life is no longer worth living. Don't listen to yourself at that time. Give yourself time, and just get up and start moving. I really do hope that you don't have to experience this, but it is quite true.<p>It is something so obvious, but something really hard to do when you are in that situation. I <i>really</i> hope that you never ever go through that pain, but whenever you do just remember that life is worth far more than what we can ever imagine.<p>Other than that rather obvious piece of advice I would suggest that you should surround yourself with people who care about you. Find your family. It doesn't matter if it is united by biology or sheer love, but you need people in life to love you and give you those small things that we all take for granted.<p>I know just how corny this sounds, but I wouldn't be alive today if it weren't for this. Whenever you know that you are loved unconditionally it gives you a sense of security and peace that no amount of money in this world can buy. Those people are the ones that make your life worth living, and help you to achieve your goals.",1277893954
1474401,comment,1474202,1474202,0,0,dmfdmf,,,"The bad caps problem was well known to anyone in the industry and it hit other manufacturers as well, not just Dell.  It also was not just the Optiplex line as Dell claims.  I replaced many motherboards and Dell would ship a replacement board if you caught it while under warranty and mentioned swollen, leaky caps on the mb. Unfortunately, the problem usually would not be apparent until the warranty expired and, yes, they would ship you another defective motherboard that would work about 18 months. If the computer was out of warranty I would tell my client to pay for the mb or buy a new PC. I never saw data loss or fires from the bad caps just mysterious BSODs and boot failures (hang on startup).",1277893949
1474400,comment,1474094,1474339,0,0,bittersweet,,,"I love white beer (Hoegaarden, Wieckse Witte), anything wrong with it?",1277893942
1474399,story,,,1,0,thedigitalengel,"Evolution Vs. Modern Medicine",http://rants-musings-nonsense.blogspot.com/2010/06/evolution-vs-modern-medicine-why-it.html,,1277893939
1474398,comment,1471796,1473705,0,0,rquirk,,,"The WP pages on Chrome or Git only mention major features of those pieces of software. Features don't change that much. Part of the articles talk about the historic aspects of the projects, and again the past doesn't really change.<p>SO tends to go into minute detail on a particular aspect of something, so the staleness effect is amplified. For example, questions on how to  write a Chrome extension tend to be stale, as do ones on specific features of Git such as integration with Subversion, or submodule support.",1277893918
1474397,comment,1474315,1474389,0,0,l4u,,,"i love smashing magazine too.
also try to read some design books, e.g. Universal Principles of Design, The Non-Designer's Design Book",1277893877
1474396,comment,1474059,1474059,0,0,dijitalife,,,"Excellent slides on scalability!",1277893575
1474395,story,,,50,14,alexandros,"Space Nazi Trailers Draw Crowd Funding for Iron Sky Movie",http://www.wired.com/underwire/2010/06/iron-sky-space-nazis/,,1277893555
1474394,comment,1474315,1474361,0,0,Robin_Message,,,"They are all very Web 2.0-ey, which is fine but it's hard not to make something look nice when you pull in a lot of pretty visual elements (as long as you don't overdo it.) I felt as though the OP was more concerned with layout and how to present information and use columns and so on, especially since the sample he posted looked pretty enough but was just one long column of text in sections.<p>Also the only corporate looking tutorial ""Design a Professional Business Web Layout
Use drop-shadows and gradients to create a stylish 3-D look."" (about a third of the way down) looks terrible! Unbalanced, unfinished and instead of professional just looks deliberately boring and stereotyped.<p>Having said all that, they are a nice set of tutorials, thanks!",1277893527
1474393,comment,1474059,1474059,0,0,andykong,,,great.,1277893520
1474392,comment,1474094,1474268,0,0,nailer,,,"> 75% of romantic relationship are established through your network.<p>Yes, but if you can cold call you'll get get a wider range of possible results (says a happily married cold caller!).",1277893491
1474391,comment,1474094,1474094,0,0,Zakuzaa,,,"This should be reposted to Reddit as well.",1277893465
1474390,comment,1474094,1474094,0,0,scorpion032,,,"I am perfect. Not naive in any way.<p>I am 25.",1277893439
1474389,comment,1474315,1474315,0,0,base,,,"subscribe some design feeds like smashing magazine. Read them a few times a week and practice, you will get much better in few months.",1277893391
1474388,comment,1474094,1474334,0,0,chegra,,,"Phil Jackson placed Rodman on the Bulls despite his character flaw and generally being regarded as being unstable.  But Rodman was the best at what he did.  I think everybody comes with their flaws but choose people based on their genius not on their lack of flaws.<p>I think people have this notion that a person has to be this all around good person, when it is not true.  Like Woods, the media needs to present this image of being perfect.  What you need are people perfect for their position and manage their other flaws",1277893332
1474387,comment,1474315,1474315,0,0,Robin_Message,,,"A nice piece of advice I've seen is to start in black and white (and shades of grey) and get the contrast and lines and so on right first. Once that looks good, either leave it, or then add colour and texture (and maybe remove some of the lines and borders if the colour or texture changes make them unnecessary.)<p>Sketch designs on paper on a grid, with a nice pen. It's easier to try out ideas and evolve when they only take a minute.<p>Practice.",1277893262
1474385,story,,,2,0,Hagelin,"Jeff Bezos Princeton Commencement Speech",http://www.businessinsider.com/we-are-what-we-choose-2010-6,,1277893235
1474384,comment,1472401,1472597,0,0,kevinelliott,,,"Facetimepartner.com --- it's here. They reached out to me on Twitter. I tried to use it, but I couldn't find someone to chat with.",1277893225
1474383,comment,1473844,1474354,0,0,danieldk,,,"Of course, except that many runtimes/libraries handle tripping over array boundaries gracefully, rather than overwriting memory. And some languages avoid null/wild pointers completely.<p>Your programs will still be suspectible to buffer overflows, invalid dereferencing, etc. While, say, Haskell programmers do not have the same problems. Valgrind is no substitute to runtime checks and a proper type system.",1277893220
1474382,comment,1474096,1474096,0,0,jgrahamc,,,"Good man.  This is the sort of irrelevant detail beloved of pedants.  It does not make you a better programmer to know this sort of thing.<p>You probably should know your language's idioms, but this sort of detail is not useful.  I'd rather see a few extraneous parens around things that the compiler can happily remove.  This sort of attitude is why my Perl code tends to be readable.  There are all sorts of shortcuts and simplifications if you know the edge cases of the language, but I'd rather have clarity than cleverness.<p>e.g. my Perl coding style: <a href=""http://blog.jgc.org/2010/01/more-fun-with-toys-ikea-lillabo-train.html"" rel=""nofollow"">http://blog.jgc.org/2010/01/more-fun-with-toys-ikea-lillabo-...</a>",1277893177
1474381,story,,,1,0,xaverius,"How Microsoft Crowdsourced the Making of Office 2010",http://www.wired.com/gadgetlab/2010/06/microsoft-office-2010/,,1277893170
1474379,comment,1473462,1474134,0,0,bad_user,,,"> <i>I think it is safe to say that for most intents an purposes we can consider MacRuby just as fast as Objective-C</i><p>It isn't. MacRuby is much more dynamic than the dynamic part of Obj-C, not taking into account that Obj-C really is a superset of C.",1277893056
1474378,comment,1471988,1472174,0,0,lani,,,Eval!,1277893054
1474377,story,,,2,0,cosmohh,"Velocity 2010: Scalable Internet Architectures",http://www.slideshare.net/postwait/velocity-2010-scalable-internet-architectures,,1277893049
1474376,comment,1474096,1474096,0,0,_delirium,,,"I mostly do this, especially for mathematical expressions, but in some cases languages have developed idioms where the common and readable style is to leave out some parens. It's dumb to do it just as some kind language-lawyering way to save chars, and it does raise the amount of background knowledge about the language you need, but putting parens <i>everywhere</i> can really break readability as well.<p>For example, this is idiomatic and readable C (ignoring whether it's a good idea to write this specific string-copy loop these days):<p><pre><code>  while (*dst++ = *src++);
</code></pre>
whereas this is line noise that you have to decode:<p><pre><code>  while ((*(dst++)) = (*(src++)));
</code></pre>
The first form does require you to know that ++ binds tighter than the dereferencing operator, so the increment is incrementing the pointer, not the value it points to. But it's easier to scan, and used enough that people who code in C presumably can just glance at it. It makes a nice syntax pun due to the interaction of the order of operators and the postincrement, too. You can read it as: deref dst, then increment dst, which gives the nice intuition that the deref happens, and then the increment happens. The parenthesized version is more confusing on that point, and you'd probably just want to rewrite it into a more verbose loop with 3 separate body statements, if you were going to go that route.<p>Heck, even Java does this regularly. Method-call dot-chaining is idiomatic in Java, even though it relies on an evaluation rule to work properly:<p><pre><code>  foo.bar().baz().qux()
</code></pre>
Not idiomatic:<p><pre><code>  ((foo.bar()).baz()).qux()
</code></pre>
For the same two reasons basically. The fully parenthesized version is too noisy, and the unparenthesized version has a nice syntax-pun interpretation: it's a ""chain"" of results going down the list of methods.",1277893000
1474375,comment,1474207,1474207,0,0,base,,,"Is there a place where we can add a startup?",1277892898
1474374,story,,,1,0,jamescrowley,"Mike Magee rants against ""techie wizards"" subverting journalism with SEO",http://www.techeye.net/internet/google-wins-and-journalism-is-dead,,1277892787
1474372,story,,,5,0,dreemteem,"IPhone 4 shows the triumph of form over function",http://features.techworld.com/sme/3228608/iphone-4-shows-the-triumph-of-form-over-function/?cmpid=sbycombinatorrplant,,1277892750
1474371,comment,1473462,1473462,0,0,bad_user,,,"> <i>The Dalvik virtual machine that ships with Android interprets byte code. A byte code interpreter has a few advantages over a stack that runs native code. Performance is not one of those advantages.</i><p>This is a cheap shot.<p>First of all, when building a JIT or a tracing compiler, it's always better to start with an efficient interpreter ... and for all intents and purposes, Android has a kickass interpreter.<p>Then you can add incremental improvements ... like JITing, or various tricks to optimize dynamic code paths. And this is where Android is today ... the latest version comes with a JITter that will only get better.<p>What an efficient VM truly allows is for regular programmers to write efficient code without thinking much about optimizations. So most applications can benefit from a good VM precisely in terms of performance.<p>I've also seen rewritten C++ apps in Java that ran faster, for many reasons, one of them being that you have the power to think about architectural optimizations without getting lost in little details.<p>And one other thing ... a mobile phone doesn't have the resources (like RAM) to shove in it too many optimizations, but on the other hand you can built specialized CPUs optimized for Android's bytecode.<p>If you do that, the ""stack that runs native code"" can eat your dust.",1277892537
1474370,story,,,1,2,gaiusparx,"Ask HN: If you are CEO of Microsoft, will you build a Microsoft branded PC?",,"What is stopping MS from doing so? They already have MS branded phones and tons of experience building computing hardware (XBOX 360).",1277892431
1474369,comment,1462613,1463771,0,0,chroma,,,"I think it's more probable that the numbers in the infograph are inaccurate. We have no idea how the DOT did their survey.",1277892391
1474367,comment,1474315,1474315,0,0,erenemre,,,"When thinking about getting better at design, do not think making things pretty.<p>Instead, think how you can solve problems, how you can make your users' life easier. And this actually begins with a lot of thinking.<p>I cannot recommend you any specific sources but most of the people learn design by trying. If you want to improve your visual skills, look at other designers' works. Try to copy them (do not steal :), read tutorials.",1277892302
1474366,story,,,1,0,ElbertF,"Install Firefox 3.6 add-ons in Firefox 4 beta",http://elbertf.com/stream/134/how-to-install-firefox-3-6-add-ons-in-firefox-4-beta-avoid-compatibility-check,,1277892296
1474365,comment,1474315,1474315,0,0,maushu,,,"You can also read about design and user interfaces, it will not help you directly in making ""pretty interfaces"" but it will help you make ""interfaces that just work"".<p>Believe it or not one book that helped me with designing web/desktop interfaces was a game design book.",1277892293
1474364,comment,1474287,1474311,0,0,jwdunne,,,"Much appreciated!",1277892285
1474362,comment,1474094,1474303,0,0,patrickk,,,"I didn't mean to appear to disparage college, I myself am a recent graduate.<p>The point I was making was that <i>some</i> people, in order to be highly successful, have to do things that seem weird, risky or downright crazy in order to get ahead (things that their friends, family, business partners, investors etc wouldn't approve of or don't see the reason for).<p>Examples:<p>- Sergey Brin is <i>on leave</i> from his PhD studies in Stanford. If the price of me not having to use Yahoo or MSN to find stuff online is the knowledge that one of Google's co-founders doesn't have his PhD yet because he dropped out of his studies to co-found Google, then that's a price I'm willing to pay ;-). Apparently his parents still aren't happy that he doesn't have it, even though he's the 24th richest man in the world.<p><a href=""http://en.wikipedia.org/wiki/Sergey_Brin"" rel=""nofollow"">http://en.wikipedia.org/wiki/Sergey_Brin</a><p>- A guy called Michael Burry was the first man to 'predict' the housing market collapse in the US. Author Michael Lewis profiled him in his book, 'The Big Short'. His investors criticized him for years that such a stance was insane, un-American, impossible etc. Mr. Burry didn't listen to any of them, and stuck to his guns because his own research and insight told him he was right. He made millions in a short space of time when things went pear-shaped near the end of 2008. Others copied his strategy also, and made out like bandits.<p>See: <a href=""http://www.vanityfair.com/business/features/2010/04/wall-street-excerpt-201004"" rel=""nofollow"">http://www.vanityfair.com/business/features/2010/04/wall-str...</a>",1277892215
1474361,comment,1474315,1474315,0,0,s3b,,,"This is a good set of tutorials to get you started : <a href=""http://www.noupe.com/tutorial/the-ultimate-collection-of-brilliant-web-design-tutorials.html"" rel=""nofollow"">http://www.noupe.com/tutorial/the-ultimate-collection-of-bri...</a>",1277892178
