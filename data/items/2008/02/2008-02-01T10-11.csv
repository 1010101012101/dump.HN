ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
107757,story,,,1,0,paulsb,"Gmail Has a Daily Limit on Sending Email",http://www.labnol.org/internet/email/gmail-daily-limit-sending-bulk-email/2191/,,1201863046
107756,comment,107678,107748,0,0,timr,,,"Never been, but it sounds like exactly the wrong sort of environment for creativity and productivity.  Too many people attend; the communication overhead must be insane.<p>I <i>can</i> tell you that the folks in Seattle failed to launch last weekend.  From what I read, it sounded like there were too many chiefs, and not enough indians (or maybe just too many chiefs).  I might have gone, but by the time that I found out about it, the event was sold out.  It was therefore a bit galling to hear (later, via the blog) that some large percentage of the attendees were PMs, BizDev, and Marketing types.<p>Anyway, if you view it as a professional networking event, your expectations will probably be more in line with the reality of the situation.",1201862828
107755,comment,107612,107612,0,0,anon,,,"Perhaps we should stop paying taxes.<p>""No taxation without representation"".",1201862462
107754,comment,107683,107751,0,0,greendestiny,,,"People prefer infix with arithmetic operators. Why? Probably because thats what they know. If your example used named functions it would look like this:<p>(plus 3 4 (minus 1 (divide 3 4)) (times (minus 9 2) 8 3))<p>plus(3, 4, minus(1, divide(3, 4)), times(minus(9, 2), 8, 3))<p>Anyway none of this has anything to do with the assertion that people only use explicit state in procedural languages because the languages don't support nesting well. I prefer functional programming to procedural but that doesn't ring true for me at all. As a matter of fact I prefer functional languages that don't have lisp's bracketing syntax.",1201861490
107753,comment,107745,107745,0,0,justtease,,,"I've been thinking about the same thing. There's a Flickr tool for iphoto if you use a Mac and I currently use Furl for bookmarking.",1201861371
107752,comment,107542,107608,0,0,enonko,,,"I am. What kind of developments do you think are worth mentioning?",1201860750
107751,comment,107683,107750,0,0,curi,,,"infix and whether to call functions like foo(x y) or (foo x y) are separate issues.<p>if infix is C's advantage, that is pretty silly. because first of all there is only a limited number of infix operators, and when you make your own constructs they are prefix, but different from s-expressions in the kinda silly way i illustrated.<p>anyway, you can put infix into a lisp. people don't usually want to because it kinda sucks. unless you're working in certain domains.<p>infix means:<p>- memorizing order of operations and remembering it whenever reading code (does == or && have higher precedence? they didn't drill that one into us in middle school, so it doesn't feel quite so obvious as arithmetic order of operations)<p>- losing characters for use in identifiers<p>- commas in argument lists<p>- paren for changing order of operations<p>- functions that take a predefined number of arguments that has to be 1 or 2<p>- infix only works with a limited number of built in things, it doesn't scale nicely. i suppose you could change this, e.g. make # a special character, and then you can define infix foo then write arg1#foo#arg2. but like, that's ridiculous. no one wants to do that with functions in general. they only want to do it with math because they hate  math and don't want to have to understand anything about it, they just want to use it mechanically like they memorized in school.<p>- infix is an approach with less generality",1201860452
