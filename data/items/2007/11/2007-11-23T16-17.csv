ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
82989,comment,82835,82890,0,0,Darmani,,,"The standard of living has increased seven-fold in the past century. As a result, the definition of ""poverty"" is no longer homeless people starving to death, but a family living in a small house who own a car, TV set, and other ""luxuries."" Yeah, I think capitalism has done a lot to ""take care"" of people.<p>
And actually, the incentives to ""subsidize"" the disadvantage have always been there (why do middle-class atheists give to charity?), but that gets into sociobiology.",1195837092
82988,comment,82864,82961,0,0,boucher,,,"""a language that supports it properly...""<p>Meaning what exactly?  A language that automatically optimized for tail recursion?  Are there languages which don't support recursion ""properly?""  ",1195836938
82987,comment,82949,82949,0,0,nickb,,,"Couldn't agree more. FInding right employees at right prices is extremely hard to do in the Valley. You're competing with the likes of Google, Facebook etc and it can take forever to fill a position at an inflated price. While you're small and your startup consists of a few founders, there's no better place on Earth to be at but as soon as you get that check from a VC, things are gonna get tough.",1195836635
82986,comment,82864,82958,0,0,DanielBMarkham,,,"I have to disagree with #6. You can either write code for the compiler or the human. I prefer to write it for the human, because a lot of times the compiler understands exactly what's going on, but I'm pretty clueless when I come back after only a few days. I think you meant not understanding how the language works so using a lot of extra commands when one would do. However it's common to ""dumb down"" your code, especially if it is tricky, for the poor schmuck that has to maintain it. Remember -- writing code should not be like writing a mystery novel.",1195836470
82985,comment,82829,82829,0,0,boucher,,,"The slideshow is a bunch of JS introduction, and barely any ""metaprogramming"".  If you are really looking for a good JS read, check out this article:<p><a href=""http://simon.incutio.com/slides/2006/etech/javascript/js-reintroduction-notes.html"" rel=""nofollow"">http://simon.incutio.com/slides/2006/etech/javascript/js-rei...</a>
",1195836370
82984,comment,82864,82964,0,0,DanielBMarkham,,,"""obsessing over a few bits of code duplication...""<p>
Applying good coupling and cohesion principles is not obsessing. It's as much legitimate programming as writing an equality test.",1195836286
82983,comment,82864,82978,0,0,boucher,,,"You're still making two function calls when you could be making one.  If one of them gets lost in the fray, you'll spend just as much time solving that problem.",1195835893
82982,comment,82864,82973,0,0,Goladus,,,"Questions I have would be:<p>Why is the function being modified 14 times?  It sounds like the original abstraction was poorly conceived.  I would hope that at some point before edit #15, someone would think to break the function down into smaller pieces.",1195835728
82981,comment,82864,82973,0,0,boucher,,,"I see where you are coming from, but I'm just not buying it.  First, 15 different programmers are rarely touching the same piece of code over any short or medium span of time.  Second, even over the long term, if you have programmers who don't read the code they are making changes to before they change it, you should fire them.  <p>You can make the same argument that a bunch of nested ifs is going to end up with a lazy programmer who doesn't know what conditions need to be met, so he puts it in the wrong place, and now all of your careful code is broken.  Coding style is ultimately pretty personal, and this is no different.",1195835555
82980,comment,82949,82977,0,0,electric,,,"Or that an employee has ""stuck"" around for long enough to be unemployable elsewhere.<p>",1195835475
82979,comment,82949,82967,0,0,electric,,,"""Maybe Canadians are more reluctant to move cities for a different job than Americans are""<p>Canadians love living in Canada and in general move to the US very reluctantly. As a result Canadians have fewer career options relative to their US counterparts.  This results in low turnover.  You're right, it has nothing to do with a company's ""pro-employee"" which I assume means ""employee-friendly"" ways.<p><p><p>",1195835410
82978,comment,82864,82975,0,0,edw519,,,"""violates the afore mentioned copy paste rule""<p>Put it in a common function.  Sure, it may look a little frazzled today, but generations of future hackers will thank you.",1195835345
82977,comment,82949,82967,0,0,amichail,,,"""employee stickiness"" is a bad sign for employees.  It means that finding and keeping a rewarding job is hard.",1195835290
82976,comment,82864,82972,0,0,edw519,,,"Where'd you ever get the idea that there is any trade-off between ""quick"" and ""right""?<p>Doing things according to effective established principles saves a little time today and a lot of time tomorrow.<p>Quick and dirty usually ends up being neither.",1195835148
82975,comment,82864,82969,0,0,boucher,,,"Sometimes it makes more sense to bail early than it would to restructure.  It could be that its more readable, or a more natural progression of things.  Take this paper:<p><a href=""http://www.csd.uwo.ca/~yuri/Papers/pami04.pdf"" rel=""nofollow"">http://www.csd.uwo.ca/~yuri/Papers/pami04.pdf</a><p>It's really great, for the record.  Anyway, the algorithm they wrote uses an early exit.  In fact, they use a while(true), the ""worst case"" example.<p><pre><code>    initialize: S = {s}, T = {t}, A = {s, t}, O = {(Empty Set)} 
    while true 
        grow S or T to find an augmenting path P from s to t 
        if P = {(Empty Set)} terminate 
        augment on P 
        adopt orphans 
    end while 
</code></pre>
In programming this algorithm, sure, I could probably move the first grow before the loop, and grow at the end.  But, now its harder to understand, and violates the afore mentioned copy paste rule.<p>My point is this, take any such ""rule"" with a grain of salt.  There are plenty of examples where it makes sense to do something atypical.  
",1195835143
82974,comment,82877,82962,0,0,ntoshev,,,"Java APIs err on the side of overengineering - and it's not the language, it's the culture around it.<p>I do recommend Effective Java and Effective C++ (and its sequels). They show the limitations of the respective languages and how to overcome them.",1195835120
82973,comment,82864,82966,0,0,edw519,,,"""I'd rather detect an error and bail then have a slew of nested ifs.""<p>And here's what inevitably happens when you do that:<p>14 mods are applied and your early exit(s) get lost in the muck.<p>Programmer 15 puts his mod ON THE WRONG SIDE of your early exit because he never saw it.  He doesn't do regression testing, and the data base gets screwed up over the next 6 months.<p>Then I come along, find the errors, fix the data base, advise the user of the effects of the damage, and rewrite the whole program with single entry/single exit processing so that this never happens again.  And then post to a board like this only to re-engage in the same old debate.<p>Aside from poorly named variables, violation of ""single entry/single exit"" is the biggest lifespan reducing problem of code bases I've ever seen.<p>This is the future speaking.  Please don't do that.",1195834765
82972,comment,82864,82968,0,0,Goladus,,,"""Minutes ""obsessing"" today usually saves hours testing tomorrow.""<p>True, but the app has to make it to tomorrow for testing to matter at all.  It's better to be in the championship trying to figure out how to manage a tired team, than it is to conserve energy during the semifinals and wind up sitting in the bleachers.",1195834688
82971,story,,,14,2,theoneill,"British economy suffers brain drain as skilled workers take flight",http://www.thebusiness.co.uk/home-page/in-the-magazine/354171/economy-suffers-brain-drain-as-britains-population-takes-flight.thtml,,1195834687
82970,comment,82706,82738,0,0,indie01,,,">>5. Starve existing (and possible) social networks of users through network effects and platform lock-in (done)<p>This is what Microsoft did.  Maybe not necessarily with ""social networks,"" but in principle.  The fact that this little iteration of 'lock-in' is both preceded and followed by a ""getting investment money"" cycle would be a cause of alarm to me if I were a potential facebook investor or employee.  Scratch the ""investment"" word and you're left with just ""getting money.""  Welcome to the real world.<p>Lock-in is not a sustainable means of long-term growth, revenue, or profit.  Obfuscating code behind a bunch of platform-specific run-around gibberish and license lawsuit nonsense doesn't benefit users and gives developers major headaches.   Lawyers do seem to like it, though, since they always are ""getting money"".<p>As history has shown, superior, non-obfuscated, legal, free! open-source code will inevitably appear on the outside of any lock-in.  Lock-in creates something known in management as ""groupthink"" and it's almost never (ouch, sorry for the pun) ""group_wise_"".  Groupthink causes those on the inside to value that which is on the inside > the market is able to value it.  There's a reason disclosure is required in the world of securities: it's called ""insider trading.""<p>So for long-term strategy, I'd say facebook flubbed <i>bigtime</i> by being greedy.  Being greedy ala-Microsoft and ""not accepting anything less than a billion"" or . . . whatever the tipping point was that caused them to jump in the stew with Microsoft specifically . . . that was really just not smart.  Trying to be too many things to too many people?  <p>The Internet was built for niche markets.  I'm hopeful on the <i>open</i> source niche.  :)",1195834353
82969,comment,82864,82963,0,0,edw519,,,"""If you really hate early exits from loops, maybe you should just code the loop's condition differently.""<p>Exactly.<p>Like I mentioned before, I'm the poor schmuck that has to clean it up because someone didn't bother to take your (common sense) advice years ago.",1195834274
82968,comment,82864,82964,0,0,edw519,,,"""...obsessing over a few bits of code duplication is often a complete waste of time.""<p>For you, maybe.  But what about the guy who applies enhancements 3 years later and has trouble getting through testing because the exact same code was somewhere else and difficult to find because of the 67 mods since then.<p>Minutes ""obsessing"" today usually saves hours testing tomorrow.<p>",1195834113
82967,comment,82949,82949,0,0,dean,,,"""IBM is said to love buying Canadian companies like Cognos because of their tremendous employee stickiness. Next time one of my American clients ridicules Canada's pro-employee ways, I'll remind them of this.""<p>I didn't know Canada had ""pro-employee ways"" (whatever that is), let alone that they were being ridiculed for it by Americans. Last time I checked, Canadian companies were just as interested in down-sizing as American companies are. The ""employee stickiness"" IBM is talking about probably has more to do with the mindset of employees in Canada rather than anything employers or the government might be doing. Maybe Canadians are more reluctant to move cities for a different job than Americans are, but the people I know in IT in Canada, at least, have no qualms about leaving their jobs if they can find something better. Even people at Cognos.",1195834098
82966,comment,82864,82955,0,0,boucher,,,"Early returns make code more readable.  I'd rather detect an error and bail then have a slew of nested ifs.  <p>It isn't always about being clever.",1195833626
