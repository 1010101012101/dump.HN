ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
516724,comment,516032,516032,0,0,mkuhn,,,"So, I'm a business guy and currently doing my Masters in Strategy and International Management, then I will go on to take my MBA in Singapore. So much about how I got to know a lot of business guys, so now how do you recognize good ones:<p>1. There is a lot of arrogance among business people. They (probably as engineers) think that they know things, that others don't. If you meet someone with an arrogant attitude I would steer away from him. And even if it is only because it will e hard to work with them.<p>2. Smart. Really good business people are truly smart, but how do you recognize a smart business guy? I have found, that people who have mastered their subject can explain it in very simple terms. They can teach people the reasons behind their decisions and why they are doing something the way they do. And most of the time that explanation (at least in business) will be very straight forward and seem like something that is obvious, but it wouldn't have occurred to many other people and it had to be spotted. it's almost like good business ideas, the best ones often are obvious and can be understood by almost anyone.<p>3. Good business guys are curious. They are broadly interested and fascinated with a lot of stuff. In the article that spun off this thread the Blogger mentions curiosity and self teaching as important in a good programmer. And I would reiterate that point here. A good or even great business guy probably isn't into business because of business but because of other interests he wants to connect / advance. I for example study business because I am very interested in Technology (IT and classical engineering), Biology, Chemistry and Physics. My interest in business lead me to pick up that for my studies because it makes it possible for myself to later connect my areas of interest through my work. Am I a good business guy? I don't know, but I hope to be one day. But I have seen a lot of good business folk who shared that trait. They start learning about e.g. programming and they will probably never be as good as the experts in such a field but they will start to understand a field and can contribute a sense for business and the business perspective to the field.<p>4. A good business guy understands the field he works in.",1237107561
516723,comment,516541,516647,0,0,sgrove,,,"Hey, thought that was a pretty good idea for finding ""rising stars"". Seems like it's been done <a href=""http://www.boxuk.com/followfriday/"" rel=""nofollow"">http://www.boxuk.com/followfriday/</a><p>This obsession with large-scale followings seems rather pointless, but I do enjoy seeing other developers or interesting people.",1237107087
516722,comment,516391,516391,0,0,dschoon,,,"I enjoyed this article enough to wander about James' site for a bit. But I didn't appreciate his core point until I read several other articles: judge a language by the problems it solves. Or even more harshly: the problems it <i>has</i> solved. He hammers it home in this gem, which may or may not have appeared already:<p><a href=""http://prog21.dadgum.com/13.html"" rel=""nofollow"">http://prog21.dadgum.com/13.html</a> (<a href=""http://news.ycombinator.com/item?id=516718"" rel=""nofollow"">http://news.ycombinator.com/item?id=516718</a>)<p>...And I reluctantly agree with him. I love functional programming. The code is art.<p>But I cannot justify building a business around it: he hits many good points, but to me the killer is library availability (it's the natural extension of judging based on achievement). When I start a new project, I want to write as little code as possible. I can't do that if slightly-more-complicated-than-basic structures and patterns aren't available to me.<p>Sadly, this isn't even a criticism of the languages I love. It's circumstantial. But it's still killer.",1237106813
516721,comment,516276,516588,0,0,shiro,,,"The main problem is that there are limited number of users that really need large asset tracking solutions, and these big players have spent many years and now have something more or less working.<p>To surpass the existing systems, you really need to work on the actual production assets, and in the environment where hundreds of artists/programmers are updating it daily.   Such large ""practical"" production assets are not easily accessible to startups or open-source projects.<p>I don't say it is impossible, though; AlienBrain seems to manage sustaining business.  And I've seen few people who are truly happy with their asset management systems.",1237106780
516719,comment,516215,516215,0,0,piramida,,,"Oh great, article about how much money a scam generates! We need more of these on the Internet, it's too honest and valuable now! Everybody that's out of job should do some ebay scam, why bother working while there are so many easy money making schemes...",1237106442
516718,story,,,25,7,dschoon,"Would You Bet $100,000,000 on Your Pet Programming Language? (2007)",http://prog21.dadgum.com/13.html,,1237106318
516717,comment,516276,516404,0,0,shiro,,,"To your question: I guess not.   He just has a different development background.   Productions like game dev or CG work require to track huge binary objects and source code in sync (I'd argue that, in these environments, any attempt to manage binary objects and sources in separate systems has eventually failed; here, source code includes shader programs, for example, which typically depend on the texture images they work on; they're inseparable.  I've been there, done that)---but if you're in this industry and have managed to do it well, I'm eager to hear about your experience.<p>It seems that most of people discussing here agree that ""Git is good for <i>source</i> version control, while Perforce is for <i>asset</i> version control"".  So I'm not really sure what people is arguing about.",1237105843
516716,comment,515769,516188,0,0,chris11,,,"IT seems to be moving to making basic services commodities.<p>Financial services are already being handled by contractors for many small businesses. The requirements to legally handle credit card info can be expensive, so small websites just contract it out.<p>And unless you need some specific networking solution, like if you're running an mmorpg or using the network to trade stocks, outside services will probably meet your needs.<p>So your IT department running your server is basically an insurance policy against downtime. And once web hosting turns into a commodity, you'll probably be able spend less on insuring against downtime using outside services.. I'm sure you could spread your hosting out between several hosts for less than running your server.",1237105716
516715,comment,516480,516480,0,0,cliff,,,"Turns out this isn't 'new' by any means, but it is definitely cool. (i have no evidence to back up this statement other than childhood memory)",1237105616
516714,comment,516276,516341,0,0,jorgeortiz85,,,"How much code do you think Github stores? I'd wager at least several gigabytes.<p>Git -does- scale. It just doesn't scale as one huge repository. You do need tools on top to manage multiple projects. It'd be nice to have an open source Github.",1237105610
516713,comment,516323,516323,0,0,visitor4rmindia,,,"What I want: Time (I wish I could live forever) and Happiness.<p>Striving for it by: Friendship, Family, Health, Savings, Entertainment",1237105412
516712,comment,516215,516545,0,0,Eliezer,,,"Does any of the documentation suggest <i>why</i> it works?",1237105153
516711,comment,516108,516676,0,0,tlrobinson,,,"True, though reduced hardware cost is only part of the promise of cloud computing.<p>Elastic scalability is a major advantages in some cases, allowing you to rapidly scale up (and back down) while minimizing waste. ""The cloud"" absorbs the fluctuations.<p>Easy deployment and thus reduced administrative costs might be another. With EC2, etc that's might not be the case, since you still have to set up the OS images and other infrastructure yourself, but things like Heroku might help.",1237105006
516710,comment,516162,516700,0,0,visitor4rmindia,,,"It's more fundamental than that - if you don't feel like a great programmer then the techniques described (static checking, unit testing, code reviews) become what you <i>depend</i> upon rather than just tools of your job.<p>For instance, code reviews are <i></i>great<i></i> - but maybe you can't use them in your one-person startup. That shouldn't stop you from <i>still writing great code</i>! It may be harder - yes, but you have to have the confidence that you can do it.<p>I mean consider the author's dependence on static checking. There are a lot of wonderful dynamic languages available (and a lot of great programmers in those languages too!). The author - because of his philosophy of being a ""terrible programmer"" is simply going to miss out on whole genres of languages and techniques.<p>IMHO great programmers have confidence in themselves - just as in any other field. Tools and techniques are really secondary.<p>EDIT: Grammar.",1237104800
