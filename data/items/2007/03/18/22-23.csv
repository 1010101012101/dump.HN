ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
4893,comment,4861,4861,0,0,nickb,,,"Our Ruby on Rails app uses PostgreSQL (for now but that will change). We started off with MySQL but after growing quickly, we were forced to look into partitioning of the data. PostgreSQL was made to be easy for advanced stuff like that. We tried to do it with MySQL and failed because we're not MySQL experts and we managed to get it working with Postgres. Postgres has better documentation than MySQL so that might be the factor if you don't have a DBA you can readily ask for help. Here's a write-up by someone who went through similar process:<p><a href=""http://enfranchisedmind.com/blog/archive/2006/11/04/166"">http://enfranchisedmind.com/blog/archive/2006/11/04/166</a><p>Also, if you use Postgres on multi-CPU machines, it's faster than MySQL. But, make sure you read this:<p><a href=""http://www.suite101.com/article.cfm/oracle/115560"">http://www.suite101.com/article.cfm/oracle/115560</a>\n(comparison of Oracle/MySQL/PostgreSQL)<p>One last word of advice if you end up using PostgreSQL, learn and use this:<p><a href=""http://pgreplicator.sourceforge.net/"">http://pgreplicator.sourceforge.net/</a><p>Finally, we are moving back to MySQL because we found a really fast replacement for the MyISAM storage engine (a lot faster than Postgres) and our part-time DBA knows MySQL and this new storage engine a lot better than Postgres. We are also moving to VPS architecture and Postgres' performance advantage over MySQL on a VPS doesn't really exist.<p>In the end, go with what your staff/friends know and what your hosting place recommends. If they have an optimized DB stack and provide some kind of a support for it, stick with that DB because you can always go to them for help!\n",1174257816
