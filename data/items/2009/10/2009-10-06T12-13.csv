ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
864020,comment,863871,863944,0,0,makecheck,,,"<i>""fork() allows the ability to do anything before exec()...""</i><p>That is not entirely true.  See the ""CAVEATS"" section of ""man fork"".",1254833878
864019,story,,,3,0,alexandros,"REST - Theory vs. Practice [pdf]",http://jaoo.dk/aarhus-2009/file?path=/jaoo-aarhus-2009/slides/MikeAmundsen_and_SubbuAllamaraju_RESTTheoryVsPractice.pdf,,1254833873
864018,story,,,8,0,johnrobertreed,"NYC Launches Big Apps Competition to Find New Uses for City Data",http://www.centernetworks.com/nyc-big-apps-competition-city-data,,1254833848
864017,comment,863871,864006,0,0,jng,,,"no fork() in windows",1254833780
864016,story,,,12,0,tolmasky,"Managing Enstore",http://www.madebysofa.com/#blog/managing_enstore,,1254833772
864015,comment,862859,862921,0,0,roundsquare,,,"<i>Would be the best place to send every zodiac-preacher I know to 'disprove' so much of what they argue </i><p>If only.  Go back and read some the comments on the last post (on okcupid, not HN).  Someone there argues that just using the zodiac chart as shown (which is the sun or moon sign, I forget which) is insufficient.  Apparently we need to use more advanced Zodiac sign knowledge to determine compatibility.<p>In any event, no amount of statistical data will dissuade strong believers.",1254833751
864014,comment,862139,863237,0,0,unalone,,,"So you don't watch movies, either? Or read books? Two hours of time in which you learn nothing?",1254833708
864013,story,,,2,0,transburgh,"Palm Doesn't Want You To Buy Too Many Apps",http://gizmodo.com/5374986/palm-doesnt-want-you-to-buy-too-many-apps,,1254833698
864012,comment,862587,863270,0,0,elblanco,,,"The problem of people sharing the inanity of their day to as many people as possible. And the problem of people who want to read about the inane things that people do every day.",1254833668
864011,comment,863854,863854,0,0,messel,,,"Pretty fascinating history of a single application from a first person perspective. Hopefully some of the valuable lessons learned can leak into modern web programming practices (speaking from a desktop to recent web coder)",1254833626
864010,comment,863990,863990,0,0,charliepark,,,"I've been interested in cohort analyses for a while, but it's always felt like the ""meta"" coding that I don't have time for. I know, I know.<p>For those of you who run a cohort analysis on your startup, do you generate your cohorts dynamically every time you run the analysis (using created_at dates to group them into months or biweekly segments)? Or do you use some sort of data warehousing to create static data sets at the end of every day / week / month?",1254833463
864009,comment,862859,863174,0,0,araneae,,,"Agreed.  I think message quality would be highly significant, because black males (not to generalize or anything) are much more likely to use netspeak such as ""yo"" or ""wut"" that we learned earlier were response killers.  Of course, maybe the <i>reason</i> women don't like these words is because ""yo"" is a ""black"" word.<p>I didn't even think about the money thing, but we do know that women care an awful lot about it.  Who knows; a lot of the blatant racism towards black men (i.e. in the self report section) could be because women generalize that black men are poor.  It could also explain why everyone seems to want to get with a white dude; he's more likely to be rich/have higher status.",1254833413
864008,comment,863852,863852,0,0,vinutheraj,,,"And that list doesn't mention his contribution to quantum theory, that he laid the foundation of mathematical quantum theory !<p>He was a true genius in all senses of the word !<p><a href=""http://plato.stanford.edu/entries/qt-nvd/"" rel=""nofollow"">http://plato.stanford.edu/entries/qt-nvd/</a>",1254833400
864007,comment,863908,863908,0,0,bengebre,,,"This has got to be spam.  The username has SEO in it and this is their only post.  Not a good sign.",1254833371
864006,comment,863871,863871,0,0,bengtan,,,"I vaguely (possibly incorrectly) recall that fork is the only way to create a new process, and that, no matter what system call you use, deep down, it still needs to call fork().<p>Someone with a better memory may correct me.<p>I'm not sure if this holds true for Windows though.",1254833315
864005,comment,863871,863871,0,0,ErrantX,,,"On the subject of fork() and exec I have used that in the past so that the parent and the child can share I/O - thus allowing the parent to monitor the exec'd program more closely.<p>In the end I gave it up as a lost job; whilst the general idea of fork() is appealing we found much ""better"" ways for fine grained process control.",1254833282
864004,story,,,7,2,abennett,"Google Wave: a few tips for brand new users",http://www.itworld.com/internet/80005/google-wave-few-tips-brand-new-users,,1254833259
864003,story,,,4,1,bengebre,"NYC BigApps Opens Today",http://www.nycbigapps.com/,,1254833116
864002,story,,,4,0,chadkeck,"Ask HN: Review my multi-programming language teaching tool",,"I have been working on a project that started when I was in university.  It is a tool written in C++ using Nokia's Qt.  We named it WizBang.<p>WizBang makes learning and teaching procedural languages such as C, C++, Java, Python, etc. easier by constructing programs using blocks.<p>Users build programs visually, which they can run and view output from inside WizBang. But, WizBang's greatest feature is that the user can compile their WizBang program to real and valid code in many different procedural languages.<p>Downloads for Windows and Mac OS X, as well as the source, are hosted by sourceforge:<p>http://sourceforge.net/projects/wizbang/<p>I make zero money off of WizBang, the source is GPL'ed, I hope no one sees this as an attempt to peddle.  All comments and feedback are appreciated!",1254833050
864001,comment,863810,863972,0,0,thegrossman,,,"My mom always told me that I had a limited supply of semicolons in my semicolon bucket, and to not waste them on languages where they aren't strictly required.<p>Now, maybe she was just joshing me... but I'm not taking that chance.",1254832999
863999,story,,,6,3,johnrobertreed,"NYC BigApps Competition – $20k In Prize Money",http://flowingdata.com/2009/10/06/nyc-bigapps-competition-20k-in-prize-money/,,1254832962
863997,story,,,4,0,abennett,"Women in programming",http://www.itworld.com/business/80001/women-programming,,1254832932
863996,comment,863464,863782,0,0,dustingetz,,,"i know, google chrome installer took what, 2 clicks?",1254832917
863995,comment,863985,863985,0,0,ErrantX,,,"Im glad someone else has noticed this; I thought I was just being picky the last few days.<p>Ive been seriously struggling with my Google fu recently for this reason.",1254832868
863994,comment,863931,863975,0,0,appl3star,,,"Scott, I will put you on the list - I expect this to start before 2010.",1254832845
863993,comment,863219,863934,0,0,ErrantX,,,"Im not sure I agree.<p>Unit testing is about code being to a specific standard (i.e. that API works like X or like Y).<p>Surely your referring to Fuzz testing?",1254832799
863992,comment,863992,863476,0,0,brown9-2,,,"The article was written 3 years ago, so I'd be very curious to hear how much of that still is accurate today.",1254832784
863991,comment,862228,862465,0,0,GBKS,,,"There are any pitfalls in Flash development when it comes to performance and some of them are very difficult to keep in check. With the right knowledge and using a few tricks, Flash can be blazing fast. However, a lot of Flash developers do not come from a programming background, so it happens too often that they don't have the knowledge to master Flash. It takes a while to learn how to properly handle things like garbage collection and memory management (partly due to Adobe's documentation being sloppy as well). If all you do is ""hit the bug"" banner ads, it is unlikely that you have the time or the need to dive that deep.",1254832782
863990,story,,,16,4,arfrank,"The Cohort Analysis",http://www.avc.com/a_vc/2009/10/the-cohort-analysis.html,,1254832776
863989,comment,860414,861042,0,0,durana,,,"Yeah, I saw that too.  Too bad it seems like it was ~15 hours until Amazon checked an interface and saw the high utilization.",1254832726
863988,comment,863468,863936,0,0,kgrin,,,"Seriously, ModelForms are pretty much the greatest thing since sliced bread.",1254832661
863987,comment,863871,863926,0,0,abrahamsen,,,"Well, it is certainly the UNIX way.  Have many simple tools that do simple stuff, plus the ability to combine them for doing complex operations, rather than few complex tools that do complex operations directly.<p>I'd say it is more elegant design, whether or not it results in smaller or more elegant code.",1254832617
863985,story,,,4,3,jacquesm,"What's up with google search lately ?",,"I've seen a disturbing trend in the search results returned, it used to be that if you search for A B C that both A, B and C were present in the results.<p>Lately I'm seeing more and more occurrences of results that will contain A & B, A & C or B & C.<p>Is it just me, am I hallucinating or is google really changing the default search from AND to 'mostly AND' or even 'OR' ?",1254832549
863983,comment,863810,863967,0,0,thegrossman,,,"I tend to use minified libraries (JQuery, effects libraries, etc), but unminified application-specific code. Been burned too many times having to root out some obscure error on the live server, and not being able to do so because of minification.<p>However, I've never had a problem in the cases where I have indeed minified unsemicoloned code. Has anyone else, or is the problem just theoretical? If others have encountered an actual problem, I might have to rethink this strategy for larger codebases.",1254832525
863982,story,,,2,0,madmotive,"Javascript library for retrieving and aggregating profile data",http://identengine.com,,1254832516
863981,comment,863871,863871,0,0,kniwor,,,"Here is a use case...  We have a shell that must execute<p><pre><code>  $ cmd_a | cmd_b | cmd_c
</code></pre>
The simplest way for the shell to accomplish this request is to fork itself multiple times.  Doing so without fork would be difficult.  I figure since multitasking and pipes are old as eternity in the linux world, fork must have been an early necessity and this use case might have something to do with their prominence but then again I am just guessing.",1254832514
863980,comment,863871,863916,0,0,billpg,,,"> Forking predates threads.<p>Suddenly, everything becomes clear.",1254832470
863979,comment,863961,863961,0,0,Patient0,,,"This seems like more of a technology award than a Physics award. How long has it been since a pure theoretical physics Nobel has been awarded? Doesn't that say something?",1254832470
863978,comment,863641,863641,0,0,kgrin,,,"The author makes a telling comment about how ""worker-bee"" programmers can be reassigned that displays the same contempt for developers as the managers who call them ""resources"".  Call it a pet peeve, I guess.<p>One other factor to consider is that if a company were to do multiple acquisitions and consistently behave this way (immediately lay off every manager of the ""losing"" internal product), it would likely create a not-very-healthy culture of fear and opposition to acquisitions.<p>That's not to say, of course, that underperforming managers should get a break ""just because"".  Rather, it seems reasonable to say that their performance and future roles should be re-evaluated along with every other affected party's - and yes, they probably shouldn't end up leading the newly acquired team a la Collabra.<p>(Keep in mind that sometimes the internal product's lack of success is quite often due to senior management's decisions... the same senior management that makes the decision to acquire).",1254832423
863977,comment,863871,863871,0,0,barrkel,,,"fork() is strictly superior to an API like Win32 CreateProcess(), because it can do more with less.<p>Processes normally inherit lots of context from their parent: the user identity, the window station (Win32-speak), security capabilities, I/O handles / console, environment variables, current directory, etc. The most logical way to inherit everything is to make a logical copy, which is very cheap owing to memory architecture.<p>Because of this things that would normally need two APIs, one synchronous and one asynchronous, can be programmed easily. If you need the synchronous version, call it directly; otherwise, fork and call it, and wait on the pid (at a later point) if necessary in the parent.<p>And I rather vehemently disagree with you saying that the threading model has less complications than the process model. I believe there's almost universal agreement that the problem with threading is mutable shared state, and the process model avoids it.",1254832374
863976,comment,863908,863963,0,0,Edinburger,,,"Maybe it's a startup business although if it's a 'rate my startup' post they probably should have said so.",1254832361
863975,comment,863931,863931,0,0,ScottWhigham,,,"I think that I would at least want to take a deeper look. If I am a first-time entrepreneur making the jump, the community part is helpful to me.",1254832347
863974,story,,,6,0,madmotive,"Ident Engine discovers and retrieves distributed identities",http://www.alistapart.com/articles/discovering-magic/,,1254832326
863973,comment,860286,863086,0,0,davemc500hats,,,"sorry you feel that way, but i'm actually quite proud of those posts... to each his/her own i guess.<p>for me, both entrepreneurship & technology are about passion. to remove that passion from my writing would seem to miss the point.",1254832321
863972,comment,863810,863955,0,0,chunkyslink,,,">> I've stopped using semicolons round about 6 months ago and have never looked back. It makes my life simpler, I'm happier, and my sex life has never been better.<p>This sounds pretty dangerous to me. Crockford has this to say <a href=""http://bit.ly/r9EZO"" rel=""nofollow"">http://bit.ly/r9EZO</a> about it.",1254832205
863971,comment,863871,863871,0,0,DougWebb,,,"fork() is great when you're writing a service. A pattern that I've used repeatedly is:<p>- The initial process reads in configuration files, sets up an environment, and opens a listening socket for the service. It then forks several times to create service processes. From this point, the initial process' only job is start new service processes when/if they exit or when load increases, and to shutdown the whole service when told to.<p>- The service processes run in a loop waiting for requests to come in on the socket, which they all share. The service can handle as many concurrent requests as you've got service processes, and they all operate independently. Thanks to copy-on-write, they all access the same configuration information stored in the initial process' memory. When a request comes in, the service process accepts it (which creates a new socket) and does some initial sanity checking to make sure it's a valid request, and then forks to create a handler process to actually process the request. It then goes back to listening for requests.<p>- The handler process is the workhorse. It gets the connection socket from its parent, and it's still got access to all of the config info. It's an independent process, so it's free to do whatever it needs to, without risk of impacting the continued operation of the service. Once it's done handling the request it can simply exit, freeing up whatever resources it consumed while handling the request.<p>In this pattern, the initial process and service processes have very simple jobs and very little code, which makes them easier to make bug-free and robust. Having lots of independent processes instead of threads adds robustness, because a crashing process can't take down the other processes in the service (unless it takes the whole machine down, of course.) This is rarely a problem in the initial or service processes, but the handler processes are exposed to the world and are much more likely to encounter unanticipated input, so they're the hardest to make robust. With the pattern, they don't need to be as robust, because they're allowed to exit unexpectedly without harming the service.",1254832187
863970,comment,863739,863900,0,0,berntb,,,"You talk about life? Evolution can be mapped onto a search strategy -- hardly equivalent with ""accident"", as used in the GP.<p>(Also, flight evolved multiple times. Just consider birds, insects and bats.)",1254832164
863969,comment,860286,860794,0,0,davemc500hats,,,"actually, the latter 1/3 of my post was about exactly that point. sorry if you missed it.<p>and while likely more than half of all acquisitions don't actually ""work"", enough do to make it worth doing.",1254832159
863968,comment,863810,863810,0,0,tumult,,,"Who's voting this up? Did you actually read this drivel?<p><i>The second solution is dealing with the creation of a singleton, which means creating an object and assigning values (e.g. functions) to its properties.</i><p>???<p><i>JavaScript is object-based rather than object-oriented. In JavaScript, you just need to call the constructor function of your (custom) object with respective parameters to create an object.</i><p>You just have objects with properties and methods that you create by calling functions with parameters. This is not object-oriented due to some crazy reason I'm going to make up right now so that JavaScript seems edgy and cool. It's not a stupid language, man, you just don't get it!<p><i>As stated above, this pattern is not that handy here, but consider a situation when there is some heavy and complex computing involved. You certainly do not want to do that each time the function gets called. Peter calls this kind of function definition a “promise”</i><p>Yeah that's not a thunk, it's a Design Pattern. Also that's a really stupid way to execute it, bro.<p>I like how this basically works its way through ever more obfuscated ""patterns"" and arrives at ""Revealing Module Pattern"" with an incomprehensible tangle of object properties and initialization methods. The first, straightforward way – which he wrote to try to parody as ""oldschool"" bad style – is the best way to do this here, though he assigns properties on objects needlessly and uses 'this' without a good reason. The rest of the examples are like a joke.<p>Actually, reading this again now, it's pretty hilarious. Maybe I'll vote it up, too.",1254832148
863967,comment,863810,863955,0,0,haydenchambers,,,"nice... except for the semicolons... i guess you're not minifying your code afterwards?",1254832090
863966,comment,863871,863898,0,0,billpg,,,"You make it sound so smooth and slick, and yes, having the child have all its state all ready and set up sounds like a good thing.<p>I suspect you are talking of using concurrency within the same program. The competing technology would be shared memory threads, of which I am more familiar. The only downside of this approach compared to fork seems (to me) to be the requirement to lock and signal when accessing shared resources.<p>Is there a downside to using fork within a process? Shirley if you've got a copy of memory (even if the actual copy is defferred) don't you also inherit the baggage of managing those resources too?<p>Lotsa questions there. Thanks for your original candid answer.",1254832081
863965,comment,863853,863884,0,0,davidw,,,"No idea - I'm not officially an author (I'm a contributor, I suppose; I don't recall the publishing term), not in contact with the publisher directly, but more than anything, the book just came out in September!  So it's early in any case.  My guess is that it won't sell that much as Tcl and Tk are, sadly, not so popular these days.",1254832051
863964,comment,863871,863944,0,0,jacquesm,,,"Why is fork by itself inelegant ?<p>Text editor, hit 'save', editor forks, saves in the background and quietly exits, no matter how long the save will take. Meanwhile the user continues to type in more text in the foreground.<p>Just one example.",1254832043
863963,comment,863908,863924,0,0,ScottWhigham,,,"Well, decision making doesn't appear to be too strong. After all, they did just post this to HN",1254832040
863962,comment,863871,863871,0,0,paulmcl,,,"Don't forget that fork predates not just threads but virtual memory so cloning all of the volatile memory of a process was really cheap (because there was only a few K of it). Look at the source code for fork in Lyons book on the version 6 kernel and you'll see how simple it used to be.",1254832033
863961,story,,,39,15,edw519,"The Nobel Prize in Physics 2009",http://nobelprize.org/cgi-bin/print?from=%2Fnobel_prizes%2Fphysics%2Flaureates%2F2009%2Fpress.html,,1254831974
863960,comment,863871,863939,0,0,jacquesm,,,"Plan 9 still is in many ways the most interesting thing to happen to the world of systems design after unix.<p>It deserves more attention.",1254831928
863958,story,,,8,0,coffeemug,"Rethinking B-tree block sizes on SSDs",http://www.rethinkdb.com/blog/2009/10/rethinking-b-tree-block-sizes-on-ssds/,,1254831887
863956,comment,863871,863926,0,0,dhoe,,,"If you reimplement Windows in Unix, it's unlikely to be more elegant. The question is if that would be a good idea.",1254831767
863955,comment,863810,863810,0,0,thegrossman,,,"I used to live by the ""revealing module pattern"", although I didn't know that's what it was actually called. Currently, I do something along these lines:<p>var MyObject = function() {<p><pre><code>   var _obj = {}
  
   var privateVariable = 'foo'
   var privateMethod = function(){}
   
   _obj.publicVariable = 'bar'
   _obj.publicMethod = function(){}
  
   return _obj
 }()
</code></pre>
To me, it makes the separation of public and private methods and variables easier to observe.<p>Also, an unrelated note: I've stopped using semicolons round about 6 months ago and have never looked back. It makes my life simpler, I'm happier, and my sex life has never been better.<p>EDIT: Removed syntax error (the ""var"" in front of ""_obj.whatever"")",1254831681
863954,story,,,20,11,tmountain,"Liby: A Lisp interpreter in Ruby",http://github.com/tmountain/Liby,,1254831671
863953,comment,861310,863682,0,0,cojadate,,,"In the end we come down to an unfruitful debate on the distinction between 'idea' and 'execution'. If you've got every last detail for a website planned out in your head but nothing implemented, that's still an idea, not execution.<p>In my opinion it goes like this:<p>* A bad idea is less than worthless<p>* Unoriginal good ideas are worthless<p>* Original but vague good ideas are worth very little<p>* Original and detailed good ideas are worth a lot, but still useless without fantastic excecution too",1254831669
863952,story,,,7,0,dan_sim,"Retrieve and aggregate profiles from across the web with javascript",http://identengine.com/,,1254831641
863951,comment,863840,863891,0,0,barrkel,,,"And his ""Tips for web designers and developers"" seems to have copied from here: <a href=""http://blarnee.blogspot.com/2009/09/10-professional-tips-for-web-designers.html"" rel=""nofollow"">http://blarnee.blogspot.com/2009/09/10-professional-tips-for...</a>",1254831595
863950,comment,863018,863591,0,0,khafra,,,"I tried Vibrams on a day hike up a small mountain with my brother.  We walked quickly the whole way, breaking into a jog a few times.  The mountain was rockier than I'd expected--about 80% of the trail was midsize to gigantic rocks.  I didn't break any toes, but I did have very sore feet for about a week after that.",1254831593
863949,comment,863219,863940,0,0,plinkplonk,,,""" that automated tests are a useful tool. ""<p>""useful"" is different from ""essential"". Conflating the two words hardly makes for a coherent argument.<p>"" Two of the others seemed so enthusiastic about unit-testing that TDD didn't seem like a big leap to me.""<p>The problem is in this ""leaping"" and essentially putting words in their mouths to  conclude what they didn't.<p>When you quote others in support of your conclusions we have to look at what they <i>actually</i> said, not where you landed up after ""leaping"" from what they said. So you have two of six tdd-ing/ testing/whatever it is you are claiming now.<p>Unit testing existed  <i>long</i> before TDD was put forward as a named practice.<p>unit testing AFTER writing the code is NOT tdd as its proponents take great pains to make clear. You can't ""leap"" to conclusions directly opposite to the meaning of terms.<p>If you read the actual quotes only <i>one</i> saying they do  <i>TDD</i> (not automated tests <i>after writing the code</i>) in the <i>accepted meaning of the word ""TDD""</i> (TDD == write test code BEFORE you write app code then refactor to get the ""design"" correct , aka ""red green refactor"")  regularly.<p>And the one person who writes tests first, Joe Armstrong, does significant ""design up front"".<p>This hardly supports your <i>original</i> claims.<p>""One designs APIs by considering calling code first, which as I said above, reminds me of some elements of TDD. ""<p>By this logic if I think about how a user will use my web app I am doing ""TDD"". You can't write <i>any</i> code, API or non API  without thinking of how it is used. It is just that in API design the ""user"" is code. <i>Every</i> API designer in the <i>world</i> does this thinking.<p>Doing this thinking is hardly ""TDD"". Every programmer in the world is  (in your words) ""in the ballpark"" of TDD practice then. Again ,hardly a strong argument.<p>""The last one was talking about writing code in pencil.""<p>This must be Knuth. So now you are down to 1.<p>""I didn't say they did TDD, by the book, 100% of the time, or that they thought it was suitable for every task.""<p>No. But you said there was some sort of consensus among programming legends that ""TDD is good in theory but too alien for most folk"". (I am quoting you exactly). No one said <i>anything</i> like this or anything that implied this.<p>All the <i>actual</i> interviews(vs <i>your</i> ""leaps"") show  is that (a) these developers are <i>aware</i> of TDD. (b) Some of them  use it <i>occasionally</i> (c) The  <i>one</i> person who uses it regularly (Joe Armstrong) does many things different from the theory of ""TDD"" as propounded by its more mainstream practitioners.<p>At <i>best</i> you have 1 person of 6 who ""tdd""s regularly. This is ""consensus"" that ""TDD is good in theory but alien to most folks""?<p>Also in your initial post you explicitly juxtaposed these programming legends's ""consensus"" with a claim that here on HN there was an emerging counter consensus that ""anyone who advocates tests is a bad programmer""? I asked for links to anyone saying that. You didn't provide any.<p>let me ask again. How do you support that?<p>Peter Seibel has pulled together a  blog post on what his interviewers said about TDD and testing. <i>You</i> interpreted fragments of the interview to lead to unsupported conclusions opposite from Seibel's (which are very balanced btw). Then you said the ""egenral consensus"" on HN is that ""anyone who advocates testing is a bad programmer"".<p>When challenged you edit your posts and play with words.<p>Ahh forget it. This thread is too deep now. And since you edit your posts continuously so my responses don't make sense anymore (apologies to other readers) it is  not worth my time trying to keep up.<p>If you always intended to say ""developer testing (including writing unit tests, drivers whatever)  is a good thing"" in general,then I agree.<p>Your original post made very strong claims (since edited, very frustrating to responders).That was what I reacted to. and you still haven't supported your claims about the ""HN consensus"". ;-)<p>But yeah whatever! Have a nice day.",1254831387
863948,story,,,5,1,johnrobertreed,"New York City Wants You to Create an App For That",http://bits.blogs.nytimes.com/2009/10/06/new-york-city-wants-you-to-create-an-app-for-that/,,1254831264
863947,comment,852405,852405,0,0,jacquesm,,,"Hey fogus, reading 'Coders at work too ?' :)",1254831250
863946,comment,863344,863807,0,0,barrkel,,,"I don't follow how you leap from non-absolute morality to dictatorship and otherwise capricious application of the law. I see the application of the law, its mechanics, as completely independent of morality. The actual content of the laws, yes, they are subject to conceptions of morality, but not their application - in so far as we aren't arguing the meta point of laws that govern application of laws.<p>Rule of law vs rule of [a] man, I see as an obsolete dichotomy in modern democracies. I think it's clear to everyone that capricious rule on whim by a single or handful of people is tyranny. I don't think you get there from moral relativism though.<p>As to judges interpreting law differently, well, that's unavoidable and in many ways a desirable feature of the common law system. As society changes, and views certain acts more or less harshly than others, the interpretation of various laws can change, setting precedents that become new laws indirectly. It's messy, especially when it's political, but I don't think there's an alternative. Lawyerly language as it is tries fairly hard to be unambiguous, but it's not machine code, and the law isn't as precise or as formally defined as a machine - and nor would we want it to be, since we aren't perfect enough to program it, and the world has too much ambiguity, too many unknowns - and unknowables - to produce certainty in judgements at all times.",1254831105
863945,story,,,1,0,vladocar,"Designing typographical wallpapers for iPhone",http://www.vcarrer.com/2009/10/designing-typographical-wallpapers-for.html,,1254831041
863944,comment,863871,863871,0,0,bediger,,,"fork() by itself - inelegant.  fork() - do ARBITRARY stuff in child process - exec(), now that does all kinds of things that a spawn()-type process creation cannot do.<p>fork() allows the ability to do anything before exec(), setting up lighter-weight process creation, and whatever flexibility the programmer desires.<p>I'd turn it around: why do the designer's of spawn() or CreateProcess() think they've got the foresight to cover all of the bases for programmers?  Why don't those systems do fork()/stuff/exec() to simplify?",1254830972
863943,comment,843543,843543,0,0,cojadate,,,"""There is almost no mention of inflation in The General Theory""<p>Combined with the apparent lack of explanation for bubbles, doesn't that meant there is a gigantic gaping hole in the entire theory?<p>I don't quite see why The General Theory was enough to convert Posner to Keynesianism.",1254830913
863942,story,,,4,0,muriithi,"Nobel recognises communications ",http://news.bbc.co.uk/2/hi/science/nature/8292372.stm,,1254830893
863941,story,,,1,0,platshaw,"Passion projects",http://www.petelatshaw.com/post/205821252/passion-projects,"Teach your kids to follow their passions (inspired by PG)",1254830834
863940,comment,863219,863890,0,0,ZeroGravitas,,,"I think this is going nowhere but, some points:<p>I assume that anyone who does TDD thinks unit tests are a useful tool, and that anyone who uses unit tests thinks that automated tests are a useful tool. That seems logical.<p>Regarding thinking about the API, that's not ""thinking about the code"", it's thinking about the code that's going to call the code. Unit tests are also code that calls the code. Orthodox TDD theory claims that by writing code that calls the code first you are in fact designing good APIs. Seems related to me.<p>JWZ's comments on speed are all over the map, probably because he's not talking about sustained speed of development, but a very short shipping deadline based on market forces. A sprint versus a marathon. I think his comments strongly support unit testing in the marathon case (which surprised me based on other things I'd read).<p>If you have to do something because nothing else works, I'd call that ""essential"".<p>Regarding TDD, which seems like the real sticking point, as opposed to unit-testing or automated tests. Two of the six actually claimed to do it personally and like it. Two of the others seemed so enthusiastic about unit-testing that TDD didn't seem like a big leap to me. One designs APIs by considering calling code first, which as I said above, reminds me of some elements of TDD. The last one was talking about writing code in pencil. It didn't seem relevant, though the blog poster thought it was.<p>I didn't say they did TDD, by the book, 100% of the time, or that they thought it was suitable for every task. But if someone actually says they do TDD then who am I to argue?<p>I intially commented mostly because of the dissonance caused by the article quotes being very pro-testing, and even had two people flat out claiming to do TDD and yet the overall tone of the original post commentary was anti-TDD, and many comments here (and in previous related posts) were anti-testing in general (not specifically TDD, which I believe the true faithful don't even like referring to as ""testing"" since it's actually about ""design""). That anti-testing feeling seemed to be drawing inspiration from these same heroes, who when I read their own words, struck me as very upbeat about testing.",1254830789
863939,comment,863871,863871,0,0,vinutheraj,,,"On a related note, the Plan 9 system call rfork() gives a system call by which you can create new processes or lightweight processes(threads) with a single system call, deciding on what resources are to be shared between the new processes. There are no 2 discrete entities called processes and threads, just processes !<p><i>""In Plan 9, fork is not a system call, but a special version of the
true system call, rfork (resource fork) which has an argument
consisting of a bit vector that defines how the various resources
belonging to the parent will be transferred to the child.  Rather
than having processes and threads as two distinct things in the
system, then, Plan 9 provides a general process-creation primitive
that permits the creation of processes of all weights.""</i> - Rob Pike.<p>You can read more about it here - <a href=""http://groups.google.com/group/comp.os.research/browse_thread/thread/a7f0d27ad2af5a26/c9d4071bf0e2ae4c?lnk=gst&q=Rob+Pike&rnum=10"" rel=""nofollow"">http://groups.google.com/group/comp.os.research/browse_threa...</a>",1254830763
863938,story,,,83,0,coffeemug,"RethinkDB (YC S09) looking for a technical cofounder",,"We're RethinkDB (YC S09). We're building a database optimized for solid-state drives and are looking for a technical cofounder to join our team.<p>What you get:<p><pre><code>  - A significant equity stake.
  - Very interesting and challenging work on disruptive technology.
  - The opportunity to define a product and lead a team of people to execute your
    vision.
  - Introductions to great people: a part of our job is getting advice from extremely
    smart and successful entrepreneurs.
  - Free housing and food in sunny California, with the possibility of moving to NYC.
  - Some compensation (with room to grow).
</code></pre>
What you have (you don't need to have all of these qualifications, but the more, the better):<p><pre><code>  - The determination to move heaven and earth to make things happen.
  - You know C like the back of your hand.
  - An understanding of the complexities of systems software, and what it takes to
    make these systems very fast.
  - Introduction to Algorithms by Cormen and Leiserson is your trusty friend.
  - You have good mathematical intuition.
  - You're not afraid of modifying Linux kernel source code.
  - You're not afraid of modifying MySQL source code.
  - You know a functional language (like Haskell or Lisp) and understand some purely
    functional data structures.
  - Implementing software transactional memory (STM) doesn't scare you.
  - You have experience scaling a large website.
  - You understand database internals (no SQL, we promise).
  - For that matter, you think SQL is a terribly designed language.
</code></pre>
Here is an example of the kind of work we do: <a href=""http://www.rethinkdb.com/blog/2009/10/rethinking-b-tree-block-sizes-on-ssds/"" rel=""nofollow"">http://www.rethinkdb.com/blog/2009/10/rethinking-b-tree-bloc...</a>.<p>This blog post has an open problem - given the numbers in the blog post, what is the optimal page size if we can cache 8GB of the B-tree in memory? Assume the cost of memory lookup is negligible, and the queries are uniformly distributed.<p>If you're interested, please send the solution, your resume, a list of impressive projects you've started (and completed), and a quick blurb about yourself to founders@rethinkdb.com.",1254830748
863937,comment,863641,863819,0,0,copper,,,"Absolutely - I think the original article implicitly assumes that it's a successful product that is being acquired. After all, why would anyone buy a company with an unsuccessful product? (but then, there are a lot of good reasons to do so.)",1254830735
863936,comment,863468,863468,0,0,mdasen,,,"This is the first time I've really thought that the form classes were a benefit in Django.  Usually it's just annoying that Django doesn't have model validation working yet.<p>Really, I was surprised (and grateful) that the article went so far beyond the trivial surface issues that people usually bring up - like the automatic admin interface or Python vs. Ruby arguments.  I was expecting a flame piece and got a well thought out piece exploring what is good about both frameworks.  Well done!",1254830662
863935,story,,,1,0,ankeshk,"In New Orleans, Home Floats To Withstand Floods",http://www.npr.org/templates/story/story.php?storyId=113513752,,1254830563
863934,comment,863219,863882,0,0,gaius,,,"The thing with unit testing is, a lot of the time it's used to try and make a weakly-typed language with uncontrollable side-effects behave like a strongly typed language in which pure functions can be written.<p>A team lead who doesn't understand the above sentiment is at best only going through the motions with unit testing.",1254830520
863933,comment,863284,863905,0,0,axod,,,"I've been using Java for backend/net crawl tasks since about 2001. It definitely improved drastically with the addition of nio, and there were some irritating segfault issues a few years ago, but nothing a rollback to earlier JVM didn't fix (Until sun fixed it).<p>You can certainly run for months without issue (memory/crash/speed) as long as you don't have any leaks in your own code.<p>I'm pretty sure Java is still widely used at Google.<p>If I was writing the google crawler from scratch today, I'd certainly start with Java, then probably use perl/python for less critical scripting glue, and maybe rewrite any CPU intensive stuff in C/asm.",1254830510
863932,comment,863859,863859,0,0,DanielStraight,,,"Here's the problem. The author says:<p>""But unless someone actually forces Apple to play by the rules, why should they?""<p>What rules? It's their damn phone. They can do whatever they please with it... and it really is true, if you don't like it, you don't have to use it. When you're selling a product, you get to make the rules (to the extent that they aren't illegal or dangerous). What are these ""rules"" that he says Apple is not following? Whose rules are they? His?",1254830479
863931,story,,,2,4,appl3star,"Coders heaven?",,"How many of you (and I am talking to senior coders) would take this opportunity:<p>You<p>...are a senior coder that is working in a company setting right now but who has a good idea about a new product and is willing and able to develop it.<p>...would be free to develop any product you like - as long as it is related to your coding and will create first revenues in the first 18 months<p>... would be paid 80k for all your expenses. You could work from home or anywhere you like. But you will have to quit your current job. No safety net.<p>... would give up about 10-20% of your project/product to the investor.<p>... would be an active part of a community, being able to share and discuss your projects with other coders and with experts in marketing, product design etc.<p>I am evaluating this scenario for a VC. Some of the ideas sound similar to YC. But we are geographically independent and do not focus on the SF area at all.",1254830464
863930,comment,863277,863837,0,0,ahpeeyem,,,"I wish even agile had a different name, one that isn't so tempting for people to use incorrectly, with no clue that it means something other than ""able to change direction quickly"". I've heard (very non-technical) people cheerfully volunteer to clients and developers that the project they're involved with is ""agile"", but they just mean ""we have no real plan, anything can change at any time"" - they have no concept that there's an actual methodology being implied by what they're saying.<p>I think using a term like ""fluid"" would have similar results - ""we're using a fluid methodology so our project will be able to flow around any obstacle/mould itself to any scenario"".<p>On the other hand these ideas spread so well because it seems like they're easy to understand...the first thing you think of when you hear something like Rational Unified Process is men in white coats with pocket protectors.",1254830429
