ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
1020253,comment,1019624,1020164,0,0,dmnd,,,"What version of Chrome are you using? I don't have this option in 3.0.195.38, which I assumed was the latest.",1262077157
1020252,comment,1019360,1020060,0,0,kk3,,,"Unless you're less than three years old you should know that google hasn't always owned youtube. Before the google acquisition youtube was breaking all kinds of copyright laws. And they grew in popularity because of it.",1262077134
1020251,comment,1019361,1019762,0,0,omouse,,,"I'm fairly certain they aren't. Do you mind if I ask if you've worked for Google?",1262077134
1020250,comment,1019059,1019059,0,0,Dmatig,,,"I'm not sure of the specific relevence to this article, since it was a good while ago i listened the details mostly escape my memory, but you can grab a good background on why GSM is insecure listening here: <a href=""http://twit.tv/sn213"" rel=""nofollow"">http://twit.tv/sn213</a>",1262077134
1020249,story,,,8,0,access_denied,"Leave before it's too late",http://sethgodin.typepad.com/seths_blog/2009/12/its-not-the-rats-you-need-to-worry-about.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+typepad%2Fsethsmainblog+%28Seth%27s+Blog%29,,1262077113
1020248,comment,1020137,1020199,0,0,rms,,,"Are you going by percentage of companies to exit? What data are you using?",1262076923
1020247,comment,1020130,1020130,0,0,alrex021,,,"This is really a misleading title.<p>Should have been something more like:<p><pre><code>  ""Purely Functional Programming doen't always work""</code></pre>",1262076917
1020245,comment,1019682,1019682,0,0,illumen,,,"LÃ–VE it!<p>Much respect for the love2d.org crew.<p>From a personal(selfish) perspective, mainly I love that they will be contributing to the SDL eco-system, and showing us some cool ways forward.<p>I think pygame, and the rest of the SDL libraries can share code and ideas with them with Love(2d).  Even though both use different languages on top, they both share similar languages below.  There already has been sharing, and I hope it continues more in the future.<p>Also, I hope python developers will take note.  Lua is a really fast language (especially with luajit 2.0).  With love2d, and lua being included with apache those are two nice options for people to switch from python.<p>Especially with SDL 1.3 (forever) maturing and its TODO list reducing, it is a great time for simple RAD game libraries :)",1262076770
1020244,comment,1020130,1020130,0,0,coffeemug,,,"Err, his example is misleading - that's the problem with generalizing and ignoring nuances. The problem here is purely syntactic. Any functional language worth its salt supports lexical scoping, which means symbols in different scopes can shadow each other. So, I can easily say something like this:<p><pre><code>  if a > 0
  then let a = a + 1
       in # do smtg with a
  else # do smtg with a
</code></pre>
Of course the inner <i>a</i> within the <i>let</i> clause is a ""different"" <i>a</i>, because outside of the <i>let</i> clause the old <i>a</i> remains. This doesn't have to be slow either, because if the compiler detects that the outside <i>a</i> isn't used anymore, it can simply increment a memory location or a register.<p>With a little bit of syntactic support from the language, you could easily write this in a natural, comfortable form, which will then automatically get compiled to the code above. In Haskell, it's pretty easy to do that with monads:<p><pre><code>  do $ when (a > 0)
       a <- a + 1
</code></pre>
(I haven't touched Haskell in a while so there might be some minor syntactic issue here, but the overall point still stands). The point here is that the number of potential branches can be determined at compile time, which makes the problem syntactic.<p>A bigger problem is when you're dealing with iteration, and you can't know at compile time how long the loop is. Then you can't unroll it, which means the compiler implementors can't use the technique above. But they can use a different technique - recursion, which can later be compiled back to iteration via tail calls optimization, removing any awkwardness. Again, with the <i>do</i> monad, it's trivial in Haskell.<p>Of course the question is, if you go through all the trouble to build up the beautiful, elegant mechanics that make it possible to write imperative code that gets compiled to purely functional code, that gets compiled back into imperative machine code for efficiency - what's the point? IMO the point is mathematical beauty - something you can't easily put a price tag on. There are some empirical benefits as well, but I'm not sure if they outweigh the troubles. Anyway, there <i>is</i> a great argument here, but the author only scratches the surface of the problem and doesn't dig nearly deep enough to get to the meat of the problem.",1262076737
1020243,comment,1020146,1020146,0,0,oomkiller,,,"My Das Keyboard (Mechanical), has no trouble with this",1262076603
1020241,comment,1018901,1018906,0,0,vimalg2,,,"me too @vimalg2 (updated my profile too)",1262076157
1020240,story,,,1,0,e27sg,"Smartloans Profitable, Closed $30 million in Loans till Date",http://www.e27.sg/2009/12/29/smartloans-profitable-closed-30-million-in-loans-till-date/,,1262076150
1020239,story,,,2,0,__,"Happy 99th Birthday, Ronald Coase",http://www.thebigquestions.com/2009/12/29/happy-99th-birthday-ronald-coase/,,1262076148
1020238,comment,1020130,1020229,0,0,omouse,,,"Yeah, it was a weird thing for him to mention.",1262076146
1020237,comment,1019252,1019890,0,0,djcapelis,,,"Do you find it interesting that many many well respected tech CEOs and project leaders could be characterized the same way?<p>One might go so far to assume that a forceful personality is somewhat necessary to successful project leadership.  I think random people celebrating his birthday is a bit overboard, but arguably the projects he's worked on have benefited from his sometimes abrasive personality.<p>I don't think it's unreasonable to admire that contribution.",1262076113
1020236,comment,1018451,1018552,0,0,rms,,,"Sure, I agree. Beyond that, the GPL isn't even enforceable in China, the CCP could care less about enforcing the freedoms that the GPL restricts, like the requirement to distribute source code.",1262076037
1020235,comment,1020230,1020230,0,0,omouse,,,"Backus's paper covered functional programming. I'll dig it up if anyone's interested (should be on ACM).<p><i>The first impression that his functional programming style invites implementations with a lot of concurrency should be complemented by the remark that it invites a lot of traffic that the von Neumann machine doesn't need.</i><p><i>He presents the proving of the correctness of programs as an activity reserved for geniuses: ""The complexity of this axiomatic game of proving facts about von Neumann programs makes the successes of its practitioners all the more admirable. Their success rests on two factors in addition to their ingenuity"".</i><p><i>And then comes his fundamental complaint ""In any case, proofs about programs use the language of logic, not the language of programs. Proofs talk about programs but cannot involve them directly [? EWD] since the axioms of von Neumann languages are so unusable."" and he presents as an advantage --without questioning-- that in his system ""Algebraic transformations and proofs use the language of the programs themselves, rather than the language of logic, which talks about programs."" I am not quite sure what is meant by talking proofs and talking logic. But whereas machines must be able to execute programs (without understanding them), people must be able to understand them (without executing them). These two activities are so utterly disconnected --the one can take place without the other-- that I fail to see the claimed advantage of being so ""monolingual"".</i>",1262075997
1020234,comment,1019252,1019516,0,0,djcapelis,,,"I think the relevant point is you shouldn't malign a project without justification.  I'm really interested to know why the person thinks the kernel is technically deficient and since they didn't include that information, the comment itself is a big letdown.  Not including any information on why the kernel is bad is about as informative as a comment simply saying ""linux is teh rad.""  (I think it's troubling so many of <i>those</i> types of comments get upvoted.)<p>I agree with you on at least one point though, whether or not the project is large or popular shouldn't be relevant to the voting.",1262075934
1020233,comment,1019396,1020221,0,0,CamperBob,,,"I have that issue (March 1964).  Authors and essayists/interviewees included Rand, Shel Silverstein, P. G. Wodehouse, J. Paul Getty, Arthur C. Clarke, Lenny Bruce, and the Greek humorist Apuleius.  It's just plain jaw-dropping to see how much cultural deterioration we've undergone since then, going by a then-and-now comparison of the magazine's table of contents.<p>Back in the day, when someone claimed they only read Playboy ""for the articles,"" there was a good chance they weren't lying.  It was well worth the 75-cent cover price.",1262075880
1020232,comment,1020130,1020193,0,0,linhir,,,"You make a key point that is often forgotten when people are arguing about programming languages. As part of the process of designing a program, you should pick which language (or programming paradigm) works best to solve that problem. A lot of intellectual time is spent arguing about preferences, and using one language to program a solution that would be much easier in another.<p>I do a lot of statistical work, and sometimes I use python, sometimes I use C or Fortran, sometimes I use R or PLT Scheme if I want to have some fun. I would agree that I am not a true expert in any of those languages, whatever that may mean, but I can solve the wide range of computational problems that I need to address quickly and efficiently in one of those languages.<p>This might just come from that fact that an undergrad class drilled into me a healthy disregard for the idiosyncrasies of syntax, libraries and idioms, and instead instilled in me the idea that semantics is the only serious issue for a student of programming languages.",1262075721
1020231,comment,1020130,1020136,0,0,tel,,,"In Haskell you might do the same thing as C. By recasting the logic where A and B are called to include some read/write state you can get ""globals"" just the same and, yeah, this can be done with Monads (State or even IORef).<p>The question becomes, though, why are A and B suddenly interlinked? Why was this context not already in place? Is there not a better structure to this data that would allow a minimization of stateful computations? Does this sudden A<->B dependence actually suggest a radically different shape of the code?<p>A well-written functional program should make these refactorings ""easy"" by having many useful and well-defined interchangeable pieces, and often it turns out that complex Haskell programs must refactor until the best dataflow structure is found (Theory of Patches for Darcs or the Zipper in xmonad).",1262075621
1020230,story,,,14,4,omouse,"Dijkstra's review of Backus's FP Turing Award speech",http://www.cs.utexas.edu/users/EWD/transcriptions/EWD06xx/EWD692.html,,1262075596
1020229,comment,1020130,1020226,0,0,baguasquirrel,,,"I can say:
a' = a + 1<p>What's so confusing about that?  This is not a shortcoming of FP.",1262075582
1020228,comment,1006589,1007011,0,0,HOT_SEX,,,YES,1262075537
1020227,comment,1018763,1018983,0,0,djcapelis,,,"> Would people care if they could get real gold or fake aluminum that looks identical and is muuuuch cheaper?<p>Yes.<p>Neither diamonds or gold are really that desirable for jewelry.  Gold is a metal that doesn't hold its shape very easily and good diamonds come in one color: colorless.  The desirable part comes from the fact that they're rare.  Rare things are fashionable.<p>There's been ways to produce artificial diamonds for some time now.  Some of them actually have some really awesome properties when it comes to ultraviolet light.  They actually glow and it's downright beautiful.  A ""genuine"" diamond doesn't, since the ones actually created in the earth have to work out impurities the hard way and aren't as pure as at least one of the artificial processes.<p>Yet the popularity of natural diamonds continues.  Frankly some of the other precious gemstones look nicer for many pieces, it's the rarity and implication of wealth that causes people to care about diamonds.",1262075456
1020226,comment,1020130,1020130,0,0,omouse,,,"The second example, single assignment form, is useful for walking through the function based on time/computation-sequence. Very good for making assertions in the middle of the code somewhere.<p><i>edit: I forgot to mention that Dijkstra had some complaints when Functional Programming first reared its head, <a href=""http://www.cs.utexas.edu/users/EWD/transcriptions/EWD06xx/EWD692.html*"" rel=""nofollow"">http://www.cs.utexas.edu/users/EWD/transcriptions/EWD06xx/EW...</a>",1262075403
1020223,comment,1019396,1019396,0,0,rms,,,"Original article: <a href=""http://www.playboy.com/articles/the-man-who-conned-the-pentagon-dennis-montgomery/index.html?page=1"" rel=""nofollow"">http://www.playboy.com/articles/the-man-who-conned-the-penta...</a><p>SFW, in theory. And by that I mean there are no nipples until you click the Girls link at the top of the page.",1262075127
1020222,comment,1019360,1019680,0,0,iamelgringo,,,"<i>...creating a filtered replica of YouTube content, and delivered free of YouTube's ads is not something anyone can reasonably expect YouTube to continue to do over the long-term, regardless of what they might have said or not said at a point in time.</i><p>Google makes billions monetizing other people's content.  They scrape zillions of web pages, index them, and then monetize the whole thing by running ads next their service.  How is that different than one person developing a niche audience based off of Google's content and trying to monetize that?<p>Sure it makes sense for Google to limit access to protect their business plan.  But, it is hypocritical and kind of a dick move on their part to try to legally prevent other people from doing what they've done from the beginning.<p>I have a hunch that moves like this will lead to a lot more anti-trust law suits against Google.",1262075107
1020221,comment,1019396,1020002,0,0,dualogy,,,"Ayn Rand too, back in the 50s or 60s.",1262075103
1020220,story,,,1,0,r11t,"The 10 Coolest Open-Source Products Of 2009",http://www.crn.com/software/222002724;jsessionid=TOMXISMQ4XDJFQE1GHRSKHWATMY32JVN?pgno=1,,1262075052
1020219,comment,1020154,1020154,0,0,hudibras,,,"What, is this guy eighteen or something? I read every one of these in junior high or high school and I thought they were cool, too. He should try reading something (anything!) written in the last 30 years and get back to us.<p>Also: <a href=""http://en.wikipedia.org/wiki/Fictional_book"" rel=""nofollow"">http://en.wikipedia.org/wiki/Fictional_book</a>",1262074894
1020218,comment,1020130,1020130,0,0,baguasquirrel,,,"This guy may be smart, and he may have done a lot, but this article seriously smells like a troll.  Isn't this exactly the sort of behavior you're <i>not</i> supposed to engage in?<p>Two library calls, deep in vastly different parts of the code.  And you're going to make them mess with each other?  For christ's sake, they're used everywhere, they've been working fine for ages, and now you're going to mess with them, make them intertwined and thus complicated, for one stupid edge case.<p>You know if you really wanted to do it, you could do an unsafePerformIO, but...<p>...I'm just not buying it.  I can think of many ways that FP (not just pure FP) is deficient, but this is not one of them.  The biggest problem I see with FP is that when your data model is sparse, imperative-style state change updates are just more efficient from a programming perspective.<p>I should note that I'm not the first one to spot this.  It was talked about amongst the FPers I knew in school.  Lets just say each variable, every function input and function output is a vertex in a graph.  When I say that the data model is sparse, what I mean is that the edge count on the vertices is small.  How small?  I dunno, it's a gut feeling sort of thing, or maybe someone could correct me on it.",1262074693
1020217,comment,1020137,1020137,0,0,leelin,,,"The alum network of other founders is helpful for technical expertise, startup advice, introductions, morale boosts, and idea exchanges; so consider in your decision the number of alums and where they ultimately reside.<p>In YC's case, there are 9 sessions of alums and a big handful who stay in the Bay Area (even when the sessions were in Cambridge).<p>Maybe some of the other programs form strong alum powerhouses in Boulder, DC, Philadelphia, Boston, or Seattle.",1262074655
1020216,story,,,1,0,sushrutbidwai,"Suggestions for twitter in 2010",http://sushrutbidwai.com/?p=242,,1262074618
1020215,comment,1020146,1020146,0,0,devin,,,"It's called n-key rollover.  Yes, many companies make absolute crap for keyboards, and yet people actually make fun of me at work for buying a 250$ keyboard.  Would they ever suggest 250$ is too much to spend on, say, a bed?  I doubt it.<p>elitekeyboards.com <-- the best keyboards money can buy.  n-key rollover, topre capacitive switches, etc.<p>geekhack.org is a great reference.",1262074601
1020214,comment,1020146,1020146,0,0,fragmede,,,"Others have said - buy a more expensive keyboard. That solves the complaint in the article.<p>Except it doesn't. 'N-key rollover' doesn't exist as a market differentiator.  Unless you've gotten frustrated by this problem, decided it was actually worth your time to research it, how could you know that 'N-key rollover' is the differentiator you're looking for? The market has spoken, and 'cheap' is better than N-key rollover. Or 'good enough', anyway. It's 2009 and the writer still can't play Metroid III. I'd bet that there'll still be the same problem in 2019, even though the technical solution has existed since keyboards were invented.",1262074551
1020213,story,,,7,7,eagleal,"OpenCog - open source artificial general intelligence framework",https://launchpad.net/opencog,,1262074533
1020212,story,,,1,0,henriwijaya,"Best  CSS Frameworks,Layout and Generators And Tutorials",http://psdcollector.blogspot.com/2009/12/best-css-frameworkslayout-and.html,,1262074475
1020211,comment,1020130,1020167,0,0,omouse,,,"Your hypothesis would be correct because languages only scratch the surface of thought. The underlying computations invoked are the important thing and you must understand them before you implement them, no matter which language you're using. Obviously some languages are easier to work with and give you better abstractions to work with making it quicker to write the code but you still have to understand what the heck it is you're really trying to do.",1262074321
1020210,comment,1020135,1020135,0,0,zhyder,,,"Google (directly or through Google.org) should donate to Wikipedia:<p>- Fits with their mission to make information universally accessible and useful.<p>- Many of their top search results are Wikipedia links. Without Wikipedia, average search quality would be much worse.",1262074276
1020209,comment,1020130,1020136,0,0,omouse,,,"This criticism echoes what E. W. Dijkstra said before,<p><i>As long as programs are regarded as linear strings of basic symbols of a programming language and accordingly, program modification is treated as text manipulation on that level, then each program modification must be understood in the universe of all programs (right or wrong!) that can be written in that programming language. No wonder that program modification is then a most risky operation! The basic symbol is too small and meaningless a unit in terms of which to describe this.</i><p>Using global variables in C is still rearchitecting the data flow. It's just a really obvious way to do it.<p>You basically have 4 things here: functions A and B and variables a and b. Calling A increases a, calling B increases b. Function A depends on a, b. Function B depends on a, b.<p>In FP, you would probably pass those variables around. In C or some other language you could store them as global variables or pass them around. Global variables are a shortcut for passing them around. Just as you don't pass around all of the assembly code of the functions you want to use to the next function, you don't need to pass all variables around all the time.<p>To answer your edit: <i>these two totally independent, low-level calculations are now dependent on each other.</i><p>This is normal, just look at any example of co-routines. It's like a two-player game where one player goes first but it doesn't matter which.",1262074157
1020208,comment,1020146,1020170,0,0,djcapelis,,,"Modifier keys are usually specially dealt with on the matrix of wires in your keyboard to make that work.  The issue is how many non-modifier keys the keyboard can register at once.<p>That said, other comments note that Apple seems to lay a dense matrix that allows for high numbers of simultaneous key presses to be registered even for non-modifier keys.  Perhaps this finally explains some of why their keyboards cost $50 instead of $3.  (Definitely not all, but if this is true, it's a nice touch.)",1262073997
1020207,comment,1020130,1020166,0,0,ntoshev,,,"The links in the URL you give actually work, unlike the ones at planeterlang. Thanks!",1262073905
1020205,comment,1020137,1020181,0,0,oldgregg,,,"I disagree. In terms of exits I don't think either have a really distinct advantage-- it's just too early to tell. They are both great programs that will get you plugged in with mentors and investors and you're not going to regret it either way. If you fail it won't have anything to do with the program you chose.<p>That said, I think TS has done a better job of driving the community side of things. I can't really speak to the Boston/Seattle programs since they are so new, but you'll be hard pressed to find a better community than Boulder. Go to the valley to get rich, go to Boulder to get a life. :)",1262073830
1020204,comment,1020154,1020198,0,0,wlievens,,,"A list of awesome fictional books would fare better here. I'd pick the Cryptonomicon over the Necronomicon every time.",1262073739
1020203,comment,1020135,1020195,0,0,cookiecaper,,,"Jimbo is incredibly shady. See <a href=""http://wikitruth.info"" rel=""nofollow"">http://wikitruth.info</a> and the many other writeups about his misdeeds; no need to recount them here. I will mention that I find his insistence on the omission of Larry Sanger's historical role in Wikipedia is a detestable revisionist glory/money grab.<p>My better idea is, first, to be much scarcer with granting adminship. Most users who've been active on WP for a while without causing much trouble are eventually awarded it. It makes appeal to an admin to resolve a dispute essentially useless since you'll get peons and shills for all sides there, too, constantly reverting each other, just like we see normal editors doing.<p>Second, there needs to be a special ""expert certification"" or class so that experts in a field can receive extra respect and can provide ""seals of approval"" on revisions of articles within their purvue. These users would use their real names and be independently verifiable.<p>Thirdly, rules need stronger and clearer wording and enforcement. There are far too many people who stretch the current rules beyond any logical limit, but get away with it because there's nobody to stop them, basically. That needs to stop, and clear standards should be set.<p>That's a part of my better idea. Wikipedia is far too messy and disorderly now, and while I agree that it has become very good, it'd be even better if normal people could contribute.<p>In my experience, people will revert even minor, clear changes because they don't like someone reworking their wording. In a lot of cases, despite WP's blaring disclaimers to the contrary, it's about keeping the individual's own edits predominant, and innocent, good changes are reverted on weak grounds, and the normal people who contributed them don't care enough to delve into WP's deep hierarchy of rules, policies, guidelines, admins, and other bureaucratic constructs to make sure that their improvements stick.",1262073725
