ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
186299,comment,185808,185808,0,0,bigtoga,,,"The first demo completely crashed Firefox on Windows 2008 for me.",1210424085
186298,story,,,3,13,babul,"Is experience or skill more important when creating a web startup?",,"Hi,<p>I am interested to know what the people here think about this topic. I have added some context below to frame the discussion around something. It is a long. Apologies if you fall asleep before getting to the end ;)<p>I have been having a debate with some grad-students/MBAs at Oxford regarding a web startup they want to do and about the need for experience vs skill in the developer(s).<p>About them:
""We are a group of postgrad students (Oxford) and we're currently loking into setting up a web 2.0 startup. It will be a social networking portal, focusing on a user base of about 20million in the EU plus about 20million in the USA, which has not been covered yet. The portal will also include a number of novel features and will be unique in its composition. We are about to finish the business plan and already acquired high-profile consultants for the board and established first VC/BA contacts.<p>Due to the central importance of the role (CTO) we require something along the lines of 3-5 years of experience in PHP/MySQL and scalable architectures.""<p>I can't talk about what it is they will do or the novel features etc. so please don't ask :)<p>I thought I would play a counter argument just to see thier stand on this position with the experience!=skill approach stating for my $0.02 I'd go with someone who is passionate and interested in what they do and is able to learn fast and deliver rather than the fact they have a few years experience. Although experience is important in many respects (essentially because you know people will have ""practised"" what they preach and learnt from past mistakes and teachings), in the startup tech world it does not matter as much. Making things people want and having rapid develop cycles where you can prototype, learn, test, and implement features on a fast (day-build) basis and based on an easy to use architecture are more important. The top tech companies in the world have been started by people how had little experience (and were actually working with the latest tech at the time with which no-one had much experience over) and in many cases still are.<p>They replied:
""
I agree on your point w.r.t. experiencs!=skill, but I have to add that in an time-critical development process experience just adds thats extra advantage that might lead to your product reaching the market just before the competitors' does. Experience in a relevant field just means you can actually employ the knowledge gained from previous mistakes - particularily in the fast growing web 2.0 environment no project is like the other so there are many mistakes to be made.<p>Also, especially the understading (and subsequent realisation) of scalability is key in our project - we just can allow for our service to break down because of an inflexible and limited initial architecture...when it grows, it will grow exponentially! In the beginning you might be fine to run an immature architecture till, say 100k users, but as soon as the viral growth aspect of SNS kicks in you will have garanteed downtime and most likely you'll have to redesign your system and shut down your service for a limited time - giving your competitors a lead... 
""<p>I agreed with this as time-critcaly kinda changed things and replied:<p>""
Experience is advantageous but not a neccessity.
---
Absolutely. If you do not learn from history you will repeat its mistakes. But... thankfully we are in 2nd/3rd cycle of internet app development and hence have many a case study, best-practice guide, design pattern, tried and tested toolkits and more to help us. We can now stand on the shoulders of giants.<p>But, just a thought, interestingly enough many a leading tech company still do not weigh experience too heavily when hiring/building. This seems especially true in recent high profile tech startups that are doing very well. The simplest solution (in those cases) seems to be to blend experience with inexperience to bring fresh thinking to problems and challenge assumptions. This seems to be a pattern to making disruptive technology?<p>Scalable Architecture = it goes without saying.
---
Everyone has faced the same problem at one point or another, and whether you go with a .NET or J2EE or LAMP stack (or other) , there are common patterns that resolve many of these issues and are tried and tested by many a startup/company that went from 0-millions and beyond very fast. Only when you are doing something truly new, will you not find a comparable. 
""<p>Although I was being devils advocate to an extent I have been thinking about this more deeply this morning and thought I would post here (albeit in a long-winnded way but-accurate-to-the-conversation way) to see what others in the same boat have to say.<p>Thanks,<p>Babul.",1210423903
186297,comment,185771,185771,0,0,ros_white,,,"We didn't win too. We submitted port of <a href=""http://www.bloove.com"" rel=""nofollow"">http://www.bloove.com</a> for Android.  In allows you to manage your mobile phone via web. If you have Nokia or Sony Ericsson phone you can try it without Android :)",1210423461
186296,story,,,7,0,prakash,"Mapping the Human Diseasome With a Network Graph",http://www.nytimes.com/interactive/2008/05/05/science/20080506_DISEASE.html,,1210423219
186295,story,,,1,0,edw519,"Inside Microsoft's war against Google ",http://www.msnbc.msn.com/id/24543408/,,1210423097
186294,comment,185830,185830,0,0,xirium,,,"> none of the online poker sites have really stepped up to the plate and either a) made bots legal (similar to the way that they're legal on Internet Chess Club) or b) put effective prevention measures in place.<p>That's a tough choice for a casino. Allow automation and you create a ghetto which discourages casual users. Disallow automation and you encourage an escalating ""arms race"".<p>Regardless, the techniques discussed could be detected using anti-virus techniques. I'm surprised that native clients don't perform integrity checks or is this the state of play in the ""arms race""?<p>It would be fairly simple to disable integrity checks using methods to circumvent software DRM. Then it would be a matter of implementing distributed state to determine and ignore circumvented clients.",1210423090
186293,comment,185348,185348,0,0,dzorz,,,"Mac users who actually want to be able to read the text: press ctrl+alt+command+8.",1210422908
186292,story,,,1,1,edw519,"Why do Macs need so much fixing?",http://blogs.zdnet.com/Bott/?p=446,,1210422883
186291,story,,,1,0,edw519,"Embracing Chaos Could Bring Order to Your Memory",http://www.wired.com/medtech/health/magazine/16-05/gs_09embracechaos,,1210422798
186290,story,,,26,25,edw519,"Why Python is a great language for teaching introductory programming classes",http://www.stanford.edu/~pgbovine/python-teaching.htm,,1210422527
186289,comment,185288,185393,0,0,dhs,,,"""Why should there be a general solution?""<p>Why indeed. However, finding one was very much on the agenda for GOFAI, and remains on the agenda for various AGI efforts, e.g. by people like Pei Wang, Ben Goertzel, and Eliezer Yudkowsky (who comments here, as I've observed).",1210422504
186288,story,,,27,2,edw519,"Emacs as a powerful Python IDE",http://www.enigmacurry.com/2008/05/09/emacs-as-a-powerful-python-ide/,,1210422485
186287,comment,186121,186121,0,0,JeffJenkins,,,"I've thought about using the index like that before, but the problem you run into is if you decide you need to go back to, or even just look at, some change several adds ago the data is gone.  The index feels like I've just copied some text in an editor: the more time that passes before I use it the more likely I am to either have to check what is there or accidentally overwrite it by copying something else.<p>My general philosophy right now is that I should only push one commit for each complete feature or bug fix, which wasn't really reasonable in old VCS systems.  That lends itself to making micro-commits for almost anything and then using rebase -i to clean up the mess into a single commit.  I've recently been experimenting with tagging the pre-rebase commit so that if I want to look at the development history I still can.  I use git-stash if I'm in the middle of something and need to change branches for a few minutes, but aside from speed there's no reason it couldn't be a commit as well.",1210422462
186286,comment,185721,185721,0,0,petercooper,,,"<p><pre><code>  If you're using Windows, go fuck yourself. 
</code></pre>
This is what happens when someone who knows what they're doing, rather than a journalist, writes an article ;-)",1210421890
186285,story,,,12,8,someperson,"The Woman Who Can Remember Everything",http://www.telegraph.co.uk/news/1940420/The-woman-who-can-remember-everything.html,,1210421042
