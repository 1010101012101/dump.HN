ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
832013,story,,,61,14,mindaugas,"Erlang, Yaws, and the deadly Tornado",http://lionet.livejournal.com/42016.html,,1253372331
832012,story,,,3,1,csbartus,"The Future of Journalism - Twitter Times",http://twittertim.es/,,1253372216
832011,story,,,3,1,th0ma5,"Google is not the Library of Alexandria",http://feedproxy.google.com/~r/DataMining/~3/QYMXVUL11uY/calling-all-librarians.html,,1253372138
832010,comment,831998,831998,0,0,davidu,,,"They are not in danger of extinction; there is almost assuredly someone willing to pay the 500 EUR price.<p>That person just isn't you.<p>Is it lame that nic.nu is doing this?  Absolutely.  Just pointing out they won't be extinct.",1253371972
832009,comment,831104,831729,0,0,theBobMcCormick,,,"That might work if their concern is deployment of his code.  But if their concern is actually maintenance (you know, patches, updates, bug fixes), than I don't see how Clojure, Scala, JPython, etc. would be any more acceptable.  The concern is probably having legacy code in a language that nobody else on staff knows how to program in.",1253371763
832008,comment,831849,831991,0,0,paraschopra,,,"Lack of funding? They write in their document that total investment into the company was $45 Million",1253371615
832007,comment,831817,831936,0,0,shabda,,,"> If you think Python and Ruby have extremely good libraries your standards are pretty low.<p>.Net, JVM, Perl. Apart from these, which lanngauge has better Library than Python? Python is available on two of them. Ruby one one of them at least. (I dunno if ruby is avaialble on .Net)<p>>  CPython itself is stable and well documented, but it's frequently breaking backwards compatibility across versions.<p>No. Afaik, Python has never broken backward compatibility in a majot way on point releases, and even minor details are dicussed ad infintum on the mailing list. Py3K was discussed for <i>8</i> years, before being released.<p>> Python 2.6 libraries almost never work in 2.4<p>Neither do Java's library which use generics or Autoboxing work in Java 1.4. However libaries comaptible with Java 1.4 work in 1.5(or 5.0 if you will), and so do libraries which were written for Python 2.4, do in 2.5 and 2.6. Languages can only guarantee backward compatibility. I am not sure which language you work in that guarantees forward compatibility.<p>> and Django is unlikely to patch security issues for Python 2.4 by then. In other words, I either have to spend a week upgrading stuff that already works<p>Django has a stated security policy. All security bugs must be fixed for 2 point releases prior to latest release. 0.96 got official security upgrades till recently. People have backported it to 0.95 and released.<p>> How can we write solid and stable software if we don't have a stable foundation to build on?<p>Sorry, but what you are asking here is again forward compatibilty. What will you have, Django never move to 3.0?<p>> Python exists 20 years now and the spec is still not stable.<p>Define stable. Python has 1. A reference implemntation. 2. Mutiple VM implemntations, targetting the popular ones. 3. Others, (Stackless, Pypy etc). Unless you use platform specific functions, your code will run on any of these. Fyi, the reference is, <a href=""http://docs.python.org/reference/introduction.html"" rel=""nofollow"">http://docs.python.org/reference/introduction.html</a> .<p>Probabaly you hold a problem with this philosophy, from the reference (While I am trying to be as precise as possible, I chose to use English rather than formal specifications for everything except syntax and lexical analysis. This should make the document more understandable to the average reader, but will leave room for ambiguities.) But this is a debated, and concious decision.",1253371547
832006,comment,831185,831979,0,0,rbanffy,,,"You know, sometimes a jet engine is just a jet engine",1253371474
832005,comment,831817,831852,0,0,steamboiler,,,"Cache is not working for me :(",1253371443
832004,comment,831643,831782,0,0,tetha,,,"In case someone gets into such a situation:<p>I've seen that many handcuffs can be opened with a strong, thin wire by pushing the hook, which keeps the ratchets from going back, back and pulling the ratchet out. Source was some documentation about a certain military operation where someone explained how he got out of a police station.",1253371363
832003,comment,831656,831719,0,0,mr_luc,,,"Does the FF nightly work for you? It doesn't for me at the moment, at least not with those samples (link to my post below, in case this discussion gets big: <a href=""http://news.ycombinator.com/item?id=831988"" rel=""nofollow"">http://news.ycombinator.com/item?id=831988</a>).<p>Any tips appreciated. I'll have a few hours free this afternoon, so I may muck around with this!",1253371231
832002,comment,831817,831817,0,0,boskone,,,"Scala is _not_ some esoteric MIT, CMU language to make a point exercise. Its a pragmatic and practical attempt to ""fix"" Java so it has all the capabilities of Java with the proper foundational coherence which allows for additional, some yet to be defined or added, capabilities. Java has long ago painted itself into a corner.  It has reached its evolutionary dead end.<p>As someone who lead a team which wrote one of the largest retail websites in the earlier days of Java, and as someone who has spent the last year rewriting legacy business logic in Scala, there is no comparison.<p>Scala wins not because its the new hipster language, it's distinctly superior across the board.  You can write better, clearer, far more robust, far more scalable and far more easier to maintain and modify business logic at higher levels of productivity.  That and its ability to work with legacy Java code makes it ideal.  This is from direct and in-depth experience.<p>My concern with gizmo's post is its complete lack of claimed experience.  No context of based on my experience where ... so we ... and then did a POC comparison with ... and found .... and concluded ...<p>In fact it appears very much to be a direct quote of from the preamble from the ""Enterprise IT Managers Survival Handbook For Those Without Experience Or Knowledge Of Software Development Fundamentals""<p>Privately I've played with all of them.  I love the shear outrageous power and beauty of Scheme (PLTs impl) and Haskell, the base competency of SML, and I've even used them in the enterprise in isolated in very few situations where the situation demanded it.<p>However, never once did it cross my mind to even ""think""  to introduce any of them into the enterprise (well a brief fling with Python for our operations group, it was found to be too hard).<p>Scala deserves to win.  It is decidedly superior, however, lots of deservedly good things, in fact most, never see the light of day in IT.",1253371208
832001,comment,831817,831992,0,0,plinkplonk,,,"@jimbokun
""I've been using Clojure to ""sketch"" solutions for a Java project,""  and  ""When I switch back to Java, on the other hand, I feel like I'm chiseling my code in granite."" remind me of this bit from SICP<p>""Pascal is for building pyramids -- imposing, breathtaking, static structures built by armies pushing heavy blocks into place. Lisp is for building organisms -- imposing, breathtaking, dynamic structures built by squads fitting fluctuating myriads of simpler organisms into place.""<p>It seems that some things never change!",1253371099
832000,comment,831817,831975,0,0,jimbokun,,,"Which shows a potential danger of using more ""stable"" languages.  Maybe the biggest flaw of Common Lisp is that the standard lacks many features necessary for modern development, like networking, threads, and Unicode.  I think that the C++ standard lacks a String class (please correct me if I'm wrong).<p>So sometimes ""stable"" can degenerate into ""frozen solid.""  Not having new libraries is arguably as bad as not being stable.",1253370898
831999,comment,830734,830927,0,0,JeffJenkins,,,"That's really, really cool, although from the domain name I thought it was going to be some sort of online potluck organizer (which would have also been cool)",1253370864
831997,comment,829268,831791,0,0,swannodette,,,"I think his slides accomplish exactly what you are saying he isn't accomplishing, but ""perception"" truly varies now doesn't it? ;)",1253370800
831996,comment,831817,831974,0,0,masklinn,,,"No. Esoteric languages are a fairly clear category of languages created to test the boundaries of language design.<p>Esoteric languages are not created for real-world usage (or even for usage at all), examples of such languages are INTERCAL, Thue, Unlambda, Moo, Befunge or Java2K. They can be turing tarpits (languages with extremely low number of commands), funges (multi-dimensional programs), nondeterministic (from a given global state A and a current instruction f, the next state `f A` of the system can't be predicted)â€¦<p>There's nothing esoteric about a language such as Erlang created very specifically to solve industrial problems, or even about languages originally created for research (ML or Haskell), especially when they've now leaked into practical, real-world programming outside of academia.",1253370717
831995,comment,831817,831892,0,0,gaius,,,"The initial hump in hiring is always the shortlist - you might get a hundred (or a thousand!) CVs and you can maybe first-interview 10 and second-interview 2-3. So the priority is always to get down to a manageable list by rejecting candidates who are obviously unsuitable.<p>So you are correct, but you could probably even trust your HR department armed with a suitable list of esoteric languages keywords (instead of their usual ""Java"" etc) to build you a pretty good first-interview shortlist, even if you were after Java developers.",1253370716
831993,comment,829268,831788,0,0,swannodette,,,"I stand corrected! Thanks for the follow up. Apologies, in the past I have noted that people do in fact delete their comments do avoid downmodding. It would be nice of course after a comment if parent became frozen.",1253370608
831992,comment,831817,831883,0,0,jimbokun,,,"I've been using Clojure to ""sketch"" solutions for a Java project, then translating the results back into Java when I'm happy with it.<p>This gives me a REPL I can use to type in expressions referencing my existing code base and immediately see the result.  Clojure has macros that make typing in many Java expressions require even fewer parens than Java itself!  PG came up with the sketching analogy to describe what its like trying things in an interactive environment, immediately seeing the results, then modifying little by little to eventually get the result you want.<p>When I switch back to Java, on the other hand, I feel like I'm chiseling my code in granite.  I need to have all of the boiler plate just so before I can see any results at all, followed by a compile and run or debug cycle.  Test driven development makes this a little better, but just a little.",1253370587
831991,comment,831849,831849,0,0,pclark,,,"SearchMe saddens me because the tech was really great. They messed up with a terrible UI (= trying to be so ""different"" from Google) and then (I believe) a lack of funds for marketing.<p>In their most recent online site, I always felt it was great tech terrible product. Sucks.",1253370572
831990,comment,831447,831447,0,0,Luc,,,"I would have appreciated a more descriptive title instead of the tabloid style one. Apologies if that seems fussy.",1253370232
831989,comment,831656,831847,0,0,mcav,,,"It's frustrating that this is the state we're in.<p>We've got just about everyone EXCEPT the major browser vendor working on cool, useful, forward-thinking innovations, and standardizing on them with relative ease. Yet all of this innovation is so sorely limited without Microsoft's contribution (to IE).<p>Normally I just nod my head and move on, but the future doesn't look any brighter for IE. Hopefully Microsoft's halfhearted interest in HTML5 will improve.<p>But then again, MS could drop WebKit into IE9, and we'd <i>still</i> be stuck, unless Microsoft shoves IE9 down the Automatic Update pipeline as a required update. Which they should, IMHO. Progress is worth some pain.",1253370222
831988,comment,831656,831656,0,0,mr_luc,,,"I just downloaded and installed the latest Minefield nightly. I enabled the single webgl option in about:config.<p>Not a single one of the examples from <a href=""http://trac.webkit.org/changeset/48330"" rel=""nofollow"">http://trac.webkit.org/changeset/48330</a> are loading for me.<p>They all error with:<p>Error: uncaught exception: [Exception... ""Component returned failure code: 0x80070057 (NS_ERROR_ILLEGAL_VALUE) [nsIDOMHTMLCanvasElement.getContext]""  nsresult: ""0x80070057 (NS_ERROR_ILLEGAL_VALUE)""  location: ""JS frame :: <a href=""http://trac.webkit.org/export/48330/trunk/WebCore/manual-tests/webgl/resources/utils3d.js"" rel=""nofollow"">http://trac.webkit.org/export/48330/trunk/WebCore/manual-tes...</a> :: initWebGL :: line 19""  data: no]<p>etc.<p>Anyone on here get it working?",1253370170
831987,comment,831817,831956,0,0,mbrubeck,,,"""PG built Viaweb in Lisp because there was no Ruby, Python or Perl back then.""<p>Then why did he build Hacker News in Lisp?",1253370155
831986,comment,831817,831959,0,0,gaius,,,"Why not? It's shipping with VS 2010.",1253370131
831985,comment,831906,831906,0,0,chaosmachine,,,"Reminds me of this: <a href=""http://sethgodin.typepad.com/seths_blog/2005/11/understanding_l.html"" rel=""nofollow"">http://sethgodin.typepad.com/seths_blog/2005/11/understandin...</a>",1253370078
831984,comment,831447,831496,0,0,GHFigs,,,"What lawsuit?",1253369976
831983,comment,831817,831956,0,0,plinkplonk,,,"""PG built Viaweb in Lisp because there was no Ruby, Python or Perl back then.""<p>First, <i>you</i> were the one suggesting we don't use Ruby or Python, in <i>2009</i> in the name of ""stability"". and now you are saying PG would have used these ""unstable"" languages in 1995 ""if they existed"" which brings me to<p>""because there was no Ruby, Python or Perl back then.""<p>You are wrong.<p>ViaWeb was started in 1995<p>Perl was available (and being used to build websites) in 1995. Python was available too. Do your research before making ridiculous claims!<p>As PG says in one of his essays (link below)<p>""During the years we worked on Viaweb I read a lot of job descriptions. A new competitor seemed to emerge out of the woodwork every month or so. The first thing I would do, after checking to see if they had a live online demo, was look at their job listings. After a couple years of this I could tell which companies to worry about and which not to. The more of an IT flavor the job descriptions had, the less dangerous the company was. The safest kind were the ones that wanted Oracle experience. You never had to worry about those. You were also safe if they said they wanted C++ or Java developers. If they wanted Perl or Python programmers, that would be a bit frightening-- that's starting to sound like a company where the technical side, at least, is run by real hackers.""<p>;-)<p>You  go on to say,<p>""If there is excellent rationale for picking an esoteric language, I'd love to hear it.""<p>Start with the PG essay I quoted above, <a href=""http://www.paulgraham.com/icad.html"" rel=""nofollow"">http://www.paulgraham.com/icad.html</a><p>many nice points there, for e.g:<p>""In fact, choosing a more powerful language probably decreases the size of the team you need, because (a) if you use a more powerful language you probably won't need as many hackers, and (b) hackers who work in more advanced languages are likely to be smarter.""<p>He (and others) have written a lot about this. Again, do your research. You may or may not agree with the rationale he puts forward, but you undermine your own argument when you make up things to strengthen it (like perl not existing in 1995).",1253369864
831982,comment,831447,831506,0,0,GHFigs,,,"The documents released yesterday indicate that Google was informed of the rejection of the current Google Voice application during a phone call with Phil Schiller on July 7th. Plenty of room for ambiguity in that.",1253369856
831981,comment,798196,798844,0,0,amrith,,,"Not really. When I wrote this post, 3.5 was not an available UPGRADE for 3.0. You end up with both 3.0 and 3.5 on your system, and still do.<p>I have no issue with the name.<p>The issue with many Linux bigots is that they think the rest of the world is somehow stupid and not as smart as they are, as evidenced by some of the other comments on this trail. They seem to believe that the things that the rest of the world wants (which they see as unimportant) are in fact worthless (like the comment about docking stations).",1253369712
831980,comment,830162,831747,0,0,mbrubeck,,,"And yet if I go to <a href=""http://dev.perl.org/perl6/"" rel=""nofollow"">http://dev.perl.org/perl6/</a> I read that ""Perl 6 is the next version of the Perl programming language.""<p>Read the FAQ on that page and follow the links, and try to see them from an outsider's point of view.  You and I know about the relation between Perl 5 and Perl 6 and the rough status of projects like Rakudo.  But for someone who hasn't been following the development, it's <i>extremely confusing</i> and its not their fault, its the Perl 6 community's fault.",1253369697
831979,comment,831185,831880,0,0,onreact-com,,,"So you agree that it's a penis? ;-)",1253369655
831978,comment,831104,831568,0,0,drobilla,,,"Maybe 'better' in some academic sense, but C is what all machines have.  If you want to write a good native compiler userful to people without massive dependencies, you write it in C/C++.<p>Writing it in ML may be nice, but nobody wants to install ML just to get at another language.  The kind of person that would do this is probably aspiring to a good language implementation of their own that could be considered a /peer/ of ML (or Perl, or Python, or Scheme, or Java, or....).  High level languages written in yet another high level language are more of an academic curiosity than a tool  anyone's likely to use.<p>While, yes, you're talking about prototyping, that assumes doing so in ML is much simpler.  Maybe for you, but not for a C/C++ coder who doesn't know ML.  There are a very, very large number of such coders.<p>Why write a prototype then have to rewrite the whole thing in C to have a ""serious"" language implementation?  For small languages, the effort spent in prototyping then rewriting is going to be more effort than just writing a good stand-alone implementation from the outset.   My hobby ""prototype"" compilers are small, portable, fast, depend on almost nothing, and integrate with the system and command line nicely.  If the language was to become useful embedded in some program, say, I could do so immediately because I wrote the implementations to be good from the start.  As a user, I'd take that over something I have to run in ML or some other massive high level language any day...<p>Would it be nice if the system's language was something better (somewhat) like ML?  Sure.  Is it?  No.<p>Anyway, from the implementation point of view, when it comes time to write your GC, or any other low level details (parallelism?) writing in something like ML is a severe handicap.  As far as performance goes, LLVM makes /fast/ code, and a lot of work is constantly being poured into it by a lot of people to make it even faster.  This is a HUGE amount of work (i.e. far beyond what one person writing a language, or the people involved in the projects you have mentioned, can or will do), and it's already been done for you if you use LLVM (of course LLVM does have ML bindings).<p>Anyway, the point is, if you're trying to ""prototype"" or do PLT research, and you know ML well, and all you care about is the language itself you're implementing (and not the qualities/bloat/dependencies/performance of the implementation); sure, using ML probably makes sense.  However these things are certainly not true of everyone writing a compiler.",1253369625
831977,comment,831827,831964,0,0,onreact-com,,,"Justice is not revenge.",1253369605
831976,comment,831820,831925,0,0,stingraycharles,,,"Link explaining the Zimmerman case, for people who are curious too:<p><a href=""http://www.gimonca.com/personal/archive/philzima.html"" rel=""nofollow"">http://www.gimonca.com/personal/archive/philzima.html</a>",1253369586
831975,comment,831817,831883,0,0,anonanon,,,"What library is it that you're missing in Haskell but have in Java? What libraries do you feel are unstable? Have you actually programmed anything in Haskell?<p>The Java language in its current form is from 2004. The Haskell language in its current form is from 1998. Both originally appeared in 1990. Lisp is much older.",1253369512
831974,comment,831817,831967,0,0,jimbokun,,,"I think you have a fairly high bar for esoteric :).",1253369465
831973,story,,,71,13,yters,"Google-styleguide ",http://code.google.com/p/google-styleguide/,,1253369302
831972,comment,831447,831951,0,0,GHFigs,,,"Except they ""didn't"". They've already listed their reasons (<a href=""http://www.apple.com/hotnews/apple-answers-fcc-questions/"" rel=""nofollow"">http://www.apple.com/hotnews/apple-answers-fcc-questions/</a>) and to my knowledge have never used the interpreter rule in anything remotely resembling the way you describe.",1253369204
831971,comment,830872,831780,0,0,n8agrin,,,"I'm more frustrated that the transcriber apparently didn't want to take the time to proof their copy. That interview is hard to read. Many typos, missing words etc.",1253369148
831970,comment,831447,831960,0,0,vermontdevil,,,"Mike Arrington said so.",1253368961
831969,story,,,2,0,j_baker,"DOJ asks court to reject Google Book Search settlement",http://www.eweek.com/c/a/Search-Engines/DOJ-Asks-Court-to-Reject-Google-Book-Search-Pending-Changes-344535/,,1253368933
831967,comment,831817,831898,0,0,masklinn,,,"> some esoteric languages, like Haskell, the ML family, Erlang and so on have deep roots<p>None of Haskell, ML or Erlang is an esoteric language.",1253368870
831966,comment,831817,831930,0,0,masklinn,,,"> Arguing with people by intentionally misinterpreting their statements just makes you look stupid and it lowers the tone of the whole discussion.<p>Yes, because purposefully using terms which don't apply to the subject just to insult other people or degrade languages you don't like clearly doesn't.",1253368842
