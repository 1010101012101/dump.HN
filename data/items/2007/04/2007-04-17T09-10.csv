ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
13595,comment,13239,13277,0,0,ralph,,,"You wrote: The titles are ""user"", ""# of posts"", ""karma"" & ""karma/# of posts"" ?<p>Yes, that's right.  It's clear that ""# of posts"" is never over 50.<p>I suppose some readers here know Ruby, Perl, or Python, but haven't come through _The Unix Programming Environment_ route or done shell programming like we had to do before those languages existed, so I thought there may be some interest in an explanation of the pipeline.  Bear in mind that the script interspersed here will have characters missing due to the site's software.  The hex-encoded version in this thread can be run to get the verbatim script.<p>wget -qO - <a href=""http://news.ycombinator.com/leaders"">http://news.ycombinator.com/leaders</a> |<p>First, we get the source of the leaders web page with wget.<p>tr '""' '\n\n' |<p>Because that has very long lines, and it's easier to pluck at most one user id per line, transliterate double-quote and greater-than sign characters into newlines.<p>sed -n 's/^user?id=//p' |<p>This then allows sed to only print lines that begin with /user?id=/ after deleting that same text, resulting in a list of user ids, one per line.<p>xargs -ri wget -qO - '<a href=""http://news.ycombinator.com/submitted?id={}'"">http://news.ycombinator.com/submitted?id={}'</a> |<p>xargs takes each of these user ids in turn and runs a wget to fetch the ""submitted"" web page for that user id.  All the web pages' HTML goes down the same pipe, concatenated together.<p>tr '' '\n' |<p>Again, we transliterate greater-than signs to split long lines at a convenient place.<p>sed -n 's/^\([0-9][0-9]<i>\) points</i> by .<i>=\(.</i>\).$/\2 \1/p' |<p>And sed gets used to filter out lines detailing the points scored by a user for a post, re-formating the information on the way, e.g. ""42 points by ...id=ralph"" becomes ""ralph 42"".  There's one line containing user id and score for each of the scores listed on the one web page.<p>awk '{c[$1]++; s[$1] += $2}
    END {for (n in c) printf ""%-20s %5d %5d %7.2f\n"", n, c[n], s[n], s[n] / c[n]}' |<p>All these (user id, score) tuples get fed to awk.  It uses two associative arrays, AKA dicts or hashes, to build up information for each line it reads.  Both arrays are indexed by user id;  ""$1"" in awk refers to the first word of the input line.  Array ""c"" maintains a count of the number of times a user id is seen.  Array ""s"" accumulates the scores for each user id.  Then at the end of all the input we loop through each index of ""c"", i.e. the user ids that have been seen, printing the user id, the frequency of that id, the sum of its scores, and the mean.<p>sort +3nr<p>These columns are given to sort which is told to sort on the fourth column, i.e. mean, numerically, in reverse.  My sort(1) doesn't give the warning yours does, but you're right;  I'm using old-school syntax that is deprecated but my fingers know how to type it.  :-)<p>Cheers, Ralph.",1176802454
13594,comment,13592,13592,0,0,ido,,,"I mean like the way reddit does it, it is much nicer then being sent to another web page.",1176802214
13593,comment,13239,13269,0,0,ralph,,,"I've added a post in the ""improvements"" thread.  Please vote up if you think it's useful.<p><a href=""http://news.ycombinator.com/comments?id=13271"">http://news.ycombinator.com/comments?id=13271</a><p>Cheers, Ralph.",1176802186
13592,story,,,3,7,ido,"Can we have a JavaScript login to Y Combinator news?",,,1176802179
13591,comment,13465,13541,0,0,danw,,,"This page has been up since the application form for the first wfp was announced if my memory is correct. Very little progress has been done in mobile user experience in 5-7 years so a few more months wont harm anyone.",1176800547
13590,comment,13384,13496,0,0,JMiao,,,"Great to point out, but isn't that irrelevant?",1176800465
13589,comment,13547,13568,0,0,JMiao,,,"Interesting you mention performance, because I would imagine that most power buyers (target users for this app) use ""Buy It Now"" as opposed to traditional live auctions.",1176800431
