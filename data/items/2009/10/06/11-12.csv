ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
863929,comment,862587,862587,0,0,jlees,,,"When listening to this talk I did have a moment of 'wtf' on the ""Start a podcast"" part. It's clearly a big part of Kevin's success - the whole rockstar celebrity diggnation thing.<p>But how good are podcasts <i>now</i>? Any startups finding them effective? Or am I just biased because I have no attention span to listen to them, so automatically discount them?<p>How about online video? Back when digg was young, podcasts were the thing; is video today's equivalent, or is it just 'being interesting on Twitter'?",1254830383
863928,comment,863871,863871,0,0,yan,,,"> So the OS goes to all that trouble setting up a duplicate process only for all that hard work to be eliminated by running exec.<p>That's just it, creating a process that's an exact copy is the path of least resistance. Due to the way the VM system works in most modern hardware, it's much cheaper to create an exact copy of a virtual address space (you're just copying TLB entries) than it is to create a brand new one.",1254830345
863927,comment,863899,863899,0,0,jacquesm,,,"<a href=""http://news.ycombinator.com/item?id=775507"" rel=""nofollow"">http://news.ycombinator.com/item?id=775507</a><p><a href=""http://news.ycombinator.com/item?id=862458"" rel=""nofollow"">http://news.ycombinator.com/item?id=862458</a>",1254830340
863926,comment,863871,863913,0,0,cousin_it,,,"Except fork() doesn't do what CreateProcess() does. I'd actually be pretty interested to see a fair comparison: a list of Unix system calls, with arguments, that covers all the functionality of CreateProcess(). Are you completely sure that it'll be smaller and more elegant?",1254830333
863925,story,,,1,0,fogus,"Why Metalinguistic Programming?",http://github.com/raganwald/homoiconic/blob/master/dumping_ground/why_metalinguistic.md#readme,,1254830265
863924,comment,863908,863908,0,0,DanielStraight,,,"Why spend all the money on a nice website if you're just going to throw a pain-in-the-ass pop-up over it all? I left immediately when it came up and I have no intention of ever going back.",1254830258
863922,story,,,1,0,yan,"The ugly side of blocks: explicit declarations and casting",http://cocoawithlove.com/2009/10/ugly-side-of-blocks-explicit.html,,1254830159
863920,comment,863871,863871,0,0,rtm,,,"fork() and exec() work well as separate system calls\nfor the common situation where the child (but not the\nparent) needs to adjust something before executing\nthe new program. Changing file descriptors to implement\n> and < in the shell, for example. It's common to see\nsequences like<p><pre><code>  pid = fork();\n  if(pid == 0){\n    close(1);\n    dup(pipefds[1]);\n    exec(...);\n  }</code></pre>",1254830034
863919,comment,863871,863907,0,0,jacquesm,,,"That's because you <i>want</i> to do an exec, which essentially transforms a running process into another process. I think people generally overestimate the complexity of fork on the part of the kernel, it's not all that bad. Create a new process slot, copy the VM configuration, set the 'copy-on-write' bit and the 'write-protect' bit on the pages in the memory image of the parent and return (twice!).<p>If all you want is a subprocess to do something interesting to the data you already have then fork is ideal. This is - or maybe was - a very common use case.<p>If you also need exec then why not first abstract out the fork, you need that any way, and do the exec in the child. It's one of the most elegant solutions to the problem I've seen.<p>Otherwise you get a whole bunch of functional duplication between system calls.<p>Already the 'exec' zoo is a good example of the kind of functional duplication you'd get. Adding 'forking' and 'non-forking' versions would not seem to improve matters much.",1254829996
863918,comment,863871,863871,0,0,tybris,,,"Servers & Shells.<p>i.e. the things Unix systems are good at, but Windows systems are not.",1254829897
863917,comment,863871,863871,0,0,axod,,,"fork is a really elegant call.<p>Maybe you should be using higher level calls, but back when I was writing linux assembly programs fork was awesome.<p>There's not really that many caveats to using it at all.",1254829888
863916,comment,863871,863871,0,0,jbert,,,"Forking predates threads. It's also makes more sense as a system call, since a library writer can implement spawn() in terms of fork() and exec() but not vice versa.<p>It's also still a good model when you want to run N copies of the same code concurrently, since the processes are isolated from each other, making it easier to reason about correctness. There are some wrinkles (primarily due to inherited global state such as filehandles), but they're reasonably well understood (by Unix+C programmers).<p>If you need significant shared state between concurrent paths of execution in the same code, then threads are probably easier.",1254829885
863915,comment,863875,863875,0,0,DanielStraight,,,"Being careless is a security risk. Please place the blame in the correct place. When it is trivial to avoid the risk and not at all unobvious why you would want to, the risk does not lie with the program.",1254829767
863914,comment,863853,863860,0,0,mahmud,,,"Ouch david, quite some acts to follow, but I know you can hold your own :-)<p>P.S. I still have a Tclplugin app deployed at my brother's office. A construction company using an in-browser tcl-plugin for their office automation software. If I had the foresight to publicize this I could have gotten some exposure. And yes, the backend for that app is in Lisp, Allegro Serve running on Slackware 9 and SBCL 0.8.2 :-) That was way before github, social coding and blogging; we got no props for deploying ""fringe"" technologies haha.",1254829729
863913,comment,863871,863871,0,0,Erwin,,,"An interesting question. I don't know of the design decisions or whether the fork idea predated UNIX. But to me, it's just the sheer simplicity. Compare to the basic process creation function on Windows, taking 10 arguments: <a href=""http://msdn.microsoft.com/en-us/library/ms682425(VS.85).aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/ms682425(VS.85).aspx</a><p>Another useful application of the implicit descriptor sharing is <a href=""http://en.wikipedia.org/wiki/Privilege_separation"" rel=""nofollow"">http://en.wikipedia.org/wiki/Privilege_separation</a>",1254829708
863912,comment,862529,863642,0,0,DanielStraight,,,"For the win.",1254829666
863911,comment,863806,863806,0,0,sharpn,,,"think that's where the phrase 'a spanner in the works' comes from too.",1254829650
863910,comment,863871,863901,0,0,jacquesm,,,"Because plenty of times what a child will do is dependent on what the parent was doing just before the fork, and in fact may simply be a bit of code to run a background task related to the parents foreground task.<p>Also, and this is a very important bit I think, fork started out before 'threads' were common, so another process to run the same code was a common solution. The communication between parent and child was through a unix pipe. That way you could write one single program, with all the state shared between the two sides of the fork, so both parties have access to all the context.<p>The copy-on-write bit set on all the pages with state in them in the child guarantees that fork is very fast and pushes the copying of the state as far in to the future as it can get away with. So forking a process with 10M resident is as fast as forking a process with only 100K resident. When you modify the memory in the child you get to pay 'bit-by-bit' for the cost of the cloning of the parent, but never more than you actually need.<p>Clever programmers make sure that the state variables that are going to be modified by the child live close to each other.<p>An alternative to that is to use shared memory and mutexes, that way you can get pretty close to the 'threaded' model using only processes.",1254829627
863909,comment,863219,863829,0,0,mahmud,,,"Enterprise Patterns is a classic, that alone redeems the man's non-hackish career.<p>P.S. I also enjoyed Enterprise <i>Integration</i> Patterns by Hohpe and Woolf.",1254829614
863907,comment,863871,863898,0,0,cousin_it,,,"Needing an exact copy of the current process is an atypical use case in my experience. And the typical use case of running another binary isn't made any more elegant by fork(), it just shuffles the complexity into exec().",1254829583
863906,comment,863875,863875,0,0,Gmo,,,"Just like some people point in the comments, why is he saving his passwords anyway ?",1254829547
863905,comment,863284,863888,0,0,borism,,,"Perhaps you're talking about Java SE 6, not Java runtime of 10 years ago?<p>> <i>Extremely well suited to backend tasks running on servers for months on end without crashing.</i><p>Running for months without crashing - maybe. But by the end of that month (well, week really) it will be so slow (i.e. due to memory leaks ironically) that your only option will be autorestarting it every now and then...<p>AFAIK Larry and Sergey chose Perl at the beginning. Now it should be mostly Python and C.",1254829472
863904,comment,862587,863761,0,0,axod,,,"Did Pownce do either of those things?",1254829460
863903,comment,863007,863146,0,0,dsplittgerber,,,"""given that Chicago is broadly seen as discredited by the recent crash""<p>By whom exactly? Mostly by those who tend to propagate further government influence on the markets. There are equally valid arguments which were made that government intervention in mortgage markets, fed policy etc. caused the crisis and the crisis could have been averted by having a truly free market.<p>I just want to point out that you seem to be influenced by biases as well. To point out other people's biases but not to acknowledge your own seems unfair.<p>That is why that whole 'lessons from the crash' thing is so difficult to grasp. Because everyone's analysis is ridden with pre-conceived notions and biases, it's hard to make out the actual truth.",1254829319
863902,story,,,44,16,jakestein,"Twitter Data: An Investor's Perspective",http://www.techcrunch.com/2009/10/05/twitter-data-analysis-an-investors-perspective/,,1254829318
863901,comment,863871,863889,0,0,cousin_it,,,"The OP was asking why we need to copy the state at all, not how to optimize it.",1254829260
863900,comment,863739,863794,0,0,zyb09,,,"well we know it happened at least once in this universe",1254829090
863899,story,,,1,1,pibefision,"What happened to NewMogul.com?",http://www.newmogul.com?,,1254829089
863898,comment,863871,863871,0,0,jacquesm,,,"Because a 'fork' is the most natural way for one process to transform itself into another process while continuing to run by itself.<p>I actually think it is one of the most elegant system calls in unix.<p>Think of all the alternative clunky ways that OS's before unix had to use to start a process at a given depth into the process. Lots of flags to make sure that you started off where you left in the 'parent', to recreate all or most of the state required for the child process. Fork passes all that state 'for free'. And copy-on-write makes it fast.<p>It's a bit like biology. Split the cell, then let them both specialize a bit towards what they have to become. The moment of splitting is almost 100% symmetrical, the only difference being who is the 'parent' and who is the 'child' process.<p>Other ways of starting new processes feel clunky in comparision, you have to specify a binary to run, you have to know all kinds of details about parameters to pass and so on.<p>Fork essentially abstracts the creation of a sub-process to the absolute minimum.<p>Fork is atomic, it's got 0 parameters and it returns only one integer (or it fails for a simple reason, no more process slots).",1254829075
863897,story,,,1,0,suejee,"ActionScript 3.0 for Adobe Flash CS4 (book review)",http://www.i-programmer.info/bookreviews/46-flash-flex-air-a-actionscript/266-actionscript-30-for-adobe-flash-cs4.html,,1254829018
863896,comment,863871,863871,0,0,vii,,,"fork is really handy when you actually want multiple copies of your program (sharing only initial state) -- it can be used like creating a working thread, but you don't have to worry about sharing (subsequent) state. This means you can exploit multiple cores without the complexity (and bugs) of shared memory threads.<p>Actually, fork(2) has now evolved into clone(2) on Linux, so you can choose in quite a fine grained way what the threads/processes will share.<p>The separation of the functionality of spawn between fork and exec is surprisingly handy (even though people occasionally still come up with vfork(2)).",1254828866
863895,comment,852327,852633,0,0,d3vvnull,,,"Yes. I saw that.",1254828808
863894,comment,863228,863228,0,0,tocomment,,,"I always figured SETI should be listening for neutrinos.  Perhaps that's how aliens communicate?<p>What would it take to make this a practical method of communication e.g., have a reciever and transmitter in your phone?  Would a super dense material work to capture them?",1254828783
863893,story,,,1,0,jacquesm,"Coordination languages: Back to the future with Linda",http://wcat05.unex.es/Documents/Wells.pdf,,1254828779
863892,story,,,1,0,suejee,"Using Shell Icons ",http://www.i-programmer.info/projects/38-windows/388-shell-icons.html,,1254828744
863891,comment,863840,863840,0,0,AndrewHampton,,,"Looks like this was plagiarized from here: <a href=""http://www.turnleafdesign.com/?p=114"" rel=""nofollow"">http://www.turnleafdesign.com/?p=114</a><p>The code-purity post was from 10/6 and the turnleafdesign article was posed on 9/27.  Also links in the code-purity article are referenced but don't exist, such as ""For those who use Eclipse I would recommend these video casts.""",1254828733
863890,comment,863219,863867,0,0,plinkplonk,,,"51/2 for 6?<p>(EDIT: you first claimed that of the  6 developers from CaW   5-1/2 of 6  supported  your claims.  Knuth being the ""1/2"" You've since edited your post)<p>51/2 for 6?<p>You must be kidding. You are cherry picking statements that support your viewpoint and ignoring those that go in an opposite direction.<p>these were what you said ""programming legends"" had a consensus on<p>""• (semi-)automated testing for any complex code: essential\n• unit tests for any long lived code: great\n• TDD (writing the tests before the code): good in theory but alien to most folks""<p>Let's see now.<p>""after the fact torture tests"" (Knuth) is hardly support for ""TDD' or ""semi automated testing is essential"". SO that's one down (or 1/2 down :-P) So that yo are down to  5 of 6 right there.<p>BTW Knuth also said (<a href=""http://www.informit.com/articles/article.aspx?p=1193856"" rel=""nofollow"">http://www.informit.com/articles/article.aspx?p=1193856</a>)<p>""As to your real question, the idea of immediate compilation and ""unit tests"" appeals to me only rarely, when I’m feeling my way in a totally unknown environment and need feedback about what works and what doesn’t. Otherwise, lots of time is wasted on activities that I simply never need to perform or even think about. Nothing needs to be ""mocked up.""<p>Zawinski, Knuth, Norvig etc don't say anything like ""semi automated testing is essential"" (one of your conclusions) or ""TDD is good in theory"".<p>It is one  technique among many they sometimes use,certainly.<p>Norvig (for example)  specifically says<p>""Seibel: What about the idea of using tests to drive design?<p>Norvig: I see tests more as a way of correcting errors rather than as a way of design. This extreme approach of saying, “Well, the first thing you do is write a test that says I get the right answer at the end,” and then you run it and see that it fails, and then you say, “What do I need next?”—that doesn’t seem like the right way to design something to me""<p>So that is 4 of 6.<p>Zawinski says<p>""Seibel: In retrospect, do you think you suffered at all because of that? Would development have been easier or faster if you guys had been more disciplined about testing?<p>Zawinski: I don’t think so. I think it would have just slowed us down. There’s a lot to be said for just getting it right the first time. In the early days we were so focused on speed. We had to ship the thing even if it wasn’t perfect. We can ship it later and it would be higher\n quality but someone else might have eaten our lunch by then.""<p>In other words in <i>retrospect</i>,  If speed is a concern, ""being disciplined about testing"" is NOT important which is hardly ""consensus"" about the centrality of testing.<p>So that is 3 of 6.<p>About Bloch,  you say ""Argues that writing an API before the code, which he does, isn't technically TDD "" and you concluded ""it is in the same ballpark"" ?! You conclude something 180 degrees opposite to what the interviewer understood?<p>Josh said<p>""\nI do disagree with Martin (Fowler) on one point: I don’t think tests are even remotely an acceptable substitute for documentation. Once you’re trying to write something that other people can code to, you need precise specs, and the\ntests should test that the code conforms to those specs.\n""<p>So write <i>precise</i> specs, write code and then add tests that the code confirms to written specs is ""in the same ballpark"" as TDD? This is how sw is being developed for <i>ages</i>.<p>By this logic, any thinking about code before coding is ""in the same ballpark"" as TDD. A strange argument.<p>Besides Josh Bloch wrote a test when everything else failed. And when specifically asked if an automated test would have been useful, he says<p>""I think a good automated unit test of the mutex facility could have saved me from this particular agony, but keep in mind that this was in the early ‘90s. It never even occurred to me to blame the engineer involved for\nnot writing good enough unit tests. Even today, writing unit tests for concurrency utilities is an art form.""<p>More nuanced than your claim that Josh was all for automated testing don't you think?<p>So 2 of 6.<p>So  how did you come to your conclusions ""TDD is great in theory but too strange for most folks"" as something <i>they</i> concluded?<p>You are concluding a few things  and cherry picking statements to support this.<p>Every developer in the <i>world</i> would love an extensive (semi) automated test suite  <i>if</i> they didn't have a cost to write and maintain.<p>You can't take a statement from someone that ""tests are great"" and ignore ""tests are for correcting errors"" or ""when speed is critical, tests are not important"".<p>My point was that <i>you say</i> ""programming legends"" conclude various things. As I see it they don't conclude anything beyond ""tests are good in certain  circumstances for specific purposes"". They make some generic statements in support of ""testing"" but are very cautious of ""test driven development"" or ""you must test every bit of code"" por even ""you must have an automated test suite"".<p>There is no consensus for the stronger statements <i>you</i> put forward. Nobody says ""TDD is good in theory but most people don't get it"". Almost everyone says it is a <i>bad</i>  idea.<p>The second part of your original post , that the consensus evolving here on HN is ""anyone who advocates testing is abda programmer"" is still unsupported. Please, show me links.<p>EDIT: I see you've edited your post and  are now proposing a weaker claim ""testing"" vs ""tdd"". Sure if you are saying ""programs that test other programs"" are a useful technique to have in your arsenal, sure thing.<p>Programmers have written tests drivers (in other words programs that tests programs) from the beginning of programming.  This is hardly an argument for ""there is a consensus among programming legends different from teh consensus here on HN"" .",1254828658
863889,comment,863871,863871,0,0,DarkShikari,,,"<i>Nearly all the uses of fork I've seen are usually followed by an exec call. So the OS goes to all that trouble setting up a duplicate process only for all that hard work to be eliminated by running exec.</i><p><a href=""http://en.wikipedia.org/wiki/Copy-on-write"" rel=""nofollow"">http://en.wikipedia.org/wiki/Copy-on-write</a>",1254828577
863888,comment,863284,863823,0,0,axod,,,"Why? Java is extremely well suited to crawling and parsing. Extremely well suited to backend tasks running on servers for months on end without crashing.<p>It's blisteringly fast, low CPU usage, and would suit the core task of crawling websites extremely well. The async NIO libs are fantastic for network io.<p>What would you use and why? (And why would you not use java)",1254828553
863887,story,,,1,0,joubee,"Microsoft Debuts Mobile Backup Service ‘My Phone’, Adds Premium Features",http://www.techcrunch.com/2009/10/06/microsoft-debuts-mobile-backup-service-my-phone-adds-premium-features/,,1254828539
863884,comment,863853,863860,0,0,jacquesm,,,"That's an interesting story there.<p>Especially how hard it is for 'digital' people to adapt to the speeds of things like publishing houses.<p>If you don't mind my asking, how many copies were sold ?",1254828432
863883,story,,,1,0,joubee,"Agile vs Prince2 (Pic)",http://www.flickr.com/photos/hiddenloop/429289122/,,1254828314
863882,comment,863219,863219,0,0,ErrantX,,,"I agree with Spolsky on this one; and I cant help feeling TDD is like agile. One of those things cool companies and corporates use to sound ""cutting edge"".<p>We used TDD for a few projects (and agile too) and found it does slow you down no end.<p>And it also ultimately doesn't catch many useful bugs and problems. We still had to go through the usual end-point testing cycles.<p>We write unit tests for any of our API's and also for some of our core code; but only after original versions are in place. They are supposed to catch any mistakes or errors in futures we enhance and evolve the programming so we don't break backwards compatibility.<p>I think it really does come down to what works best for your teams though. Im sure plenty of people find TDD a great addition to their arsenal.<p>But at the end of the day it's just a buzz word like everything else - and we've found that by avoiding those kinds of things we produce good, solid, working code at a fast (not necessarily faster pace) - but with less headaches :)",1254828276
863881,comment,863018,863838,0,0,nunb,,,"I would normally be suspicious of something that keeps cropping up like this (ref. PG's ""The Submarine""). However, sometimes something comes up because the truth will out.<p>I think the ""discovery"" of these shoes being American is not an accident. Other markets are too small, and the USA probably has the biggest contingent of foot-damaged runners in the world. Although I live in Italy, Vibram keeps its Five Fingers shoes out of the market (they are available in Germany, even though Vibram is an Italian company). Part of the reason is, people <i>already</i> prefer flat-soled shoes here. Nike style sneakers are almost non-existent.<p>Some alternatives to VFF: Closer to home for you, perhaps, is the Feelmax Planka, and the UK has Vivo Barefoots which may be a bit overpriced. I don't suppose thin soles will perform well in a cold environment though!<p>As for me, all through summer I wore what in a different age would be called ""canvas plimsolls"", and I am now dreading  having to wear winter boots. If someone could make a waterproof canvas hi-top, I'd rest easy. So yes, I do think these articles are coming out because people experience the sheer joy of wearing minimalist shoes (perhaps explainable by the sensory organ density of the foot?).<p>These are almost identical to the shoes I wore. <a href=""http://www.seejackshop.com/images/uploads/ASOS-plimsolls.jpg"" rel=""nofollow"">http://www.seejackshop.com/images/uploads/ASOS-plimsolls.jpg</a>",1254828274
863880,comment,862018,862018,0,0,akirk,,,"The pgrep command mentioned in the article was new to me and does the job with a single program. Had it on my debian preinstalled.<p><a href=""http://en.wikipedia.org/wiki/Pgrep"" rel=""nofollow"">http://en.wikipedia.org/wiki/Pgrep</a>",1254828267
863879,comment,863822,863822,0,0,swombat,,,"<i>To learn how to improve your luck, join me, via web conference, on Thursday, October 8th at 10 am PDT / 1 pm EDT as I review the key success factors in successful private equity investing.</i><p>Spam. Flagged.",1254828216
863878,comment,863853,863853,0,0,jacquesm,,,"Interesting how being on the cover of a book about a language gets you to be co-author of that language in the eyes of lots of people.<p>I certainly fell for it, until this interview I had no idea!<p>By the way, the <a href=""http://en.wikipedia.org/wiki/C"" rel=""nofollow"">http://en.wikipedia.org/wiki/C</a> entry in wikipedia now only has a link to the C# language, not to C!",1254828186
863877,comment,863219,863813,0,0,eru,,,"You should have a look at QuickCheck.  It's a Haskell library where you (more or less) specify laws that your program should satisfy, and it generates test cases on its own.  I found it very useful.",1254828165
863876,comment,863871,863871,0,0,jgrahamc,,,"fork() is commonly used where you want to communicate to the sub-process using a pipe.  Given how common piping from one process to another is in Unix it's not surprising that fork() was implemented (nor that fork then exec was common).<p>It's true that Windows tends not to use this paradigm, but it is common in the Unix world specifically because of the simple ability to share file handles between a parent and child process.  And also the parent and child processes share most everything else (for example, they have the same environment settings).",1254828116
863875,story,,,2,2,baha_man,"Why Google Chrome and FireFox are a big security risk for anyone using them",http://weblogs.asp.net/rosherove/archive/2009/10/05/why-google-chrome-and-firefox-are-a-big-security-risk-for-anyone-using-them.aspx,,1254828111
863874,story,,,1,0,dreemteem,"Next world war could start online",http://www.computerworlduk.com/technology/internet/applications/news/index.cfm?newsid=16938,,1254828066
863873,comment,861464,861664,0,0,numair,,,"From the P-P-P-Powerbook prank website:<p><i>3) Finally, and most disturbingly, Jeff was not heard from again. I personally e-mailed him for permission to run his story on ZUG, but after an initial response, I never heard from him again. All of his Web sites have come down, and he is nowhere to be found.</i><p>...",1254827983
863872,comment,862529,862529,0,0,zandorg,,,"I'm a UK citizen and I apparently have none, because I requested for me and Don Simpson (the deceased film producer), and they only said 'No file on Don Simpson' - didn't even say 'No file on [Zandorg]'.",1254827968
863871,story,,,35,58,billpg,"Ask HN - Why was there ever, fork() ?",,"Hi everyone. I'd like to please figure out something that I don't quite understand. Why did we ever have the fork function call?<p>Back in my youth when I was first taught the fork call, I got how how it worked, two copies of the process return from the function call and they both continue in parallel. The only thing that was bothering me was the long list of caveats my text book discussed.<p>It told me that a copy of the process was made, except for file handles, and that the memory wasn't really copied until one of the two processes tried to modify something. It seemed all terribly complicated but I figured there was a good reason for it that I didn't yet understand, grasshopper.<p>Time passed and I started working in embedded systems and later coding for Windows. I never used fork beyond those juvenilia programs I made. These OSs started new processes by passing an executable filename to the OS and telling it to start a new program. That new process started with a clean slate, no memory, empty stack, no open file handles except stdin/out/err. Simple.<p>Now, I've just been reminded of the fork call in Unix, and I'm prompted to ask; Why was it ever there? Who <i>wants</i> the ability to do a fork when simpler ways of starting a new process exist.<p>Nearly all the uses of fork I've seen are usually followed by an exec call. So the OS goes to all that trouble setting up a duplicate process only for all that hard work to be eliminated by running exec.<p>Even when concurrency within a program is needed, the thread model seems far more useful with a lot less complications.<p>So please, I need to know, why fork?",1254827941
863870,story,,,1,0,joubee,"Diagnostic Styling",http://meyerweb.com/eric/thoughts/2007/09/07/diagnostic-styling/,,1254827911
863869,comment,863219,863714,0,0,eru,,,"It's not too bad.  At least you avoid recessing bugs.",1254827896
863868,comment,843543,863689,0,0,roundsquare,,,"I haven't read the original book, but from what I can tell from this article, at least <i>part</i> of the general theory is about <i>explaining</i> why there is less than full employment and income inequality.  As far as I can tell, you are calling the entire theory crap based the author's desire to create full employment and income equality.  I'm not sure Keynes wanted governments to try for this or not, but at there seems to be at least two separate parts of the theory to evaluate.",1254827882
863867,comment,863219,863842,0,0,ZeroGravitas,,,"I got all this directly from the linked article:<p>Zawkinski: created automated tests for a complicated corpus of quasi-standard email headers that he triggered manually. When he rewrote the mailer in Java he unit-tested because it was easier in a Java OO environment. He says there's specific areas where unit-testing would have sped them up, but that they were under so much time-pressure, with short-term ROI horizons that they didn't bother, they just went with the gamble of ""getting it right first time"". If they had more time then unit-testing was ""certainly the way to go"". He specifically states that they traded quality for a ship date.<p>Fitzpatrick: Does ""a lot of testing"". Tests anything half-way ""clever"" because others will break it. Forces people who work for him to write tests. <i>""At a certain point, people realize, “Holy crap, it does pay off,” especially maintenance costs later.""</i><p>Joshua Bloch: automated testing of transactional shared-memory with a ""basher"". When it failed at high concurrency he had to use unit tests to locate the bug, which wasn't in his code but the underlying Solaris assembly code. This was early 90s and he <i>implies</i> that finding a bug in such code today would probably result in the engineer being shouted at for inadequate testing, though perhaps not in concurrency areas as testing those is still an ""art"". Argues that writing an API before the code, which he does, isn't technically TDD though I'd say it's in the same ballpark.<p>Knuth: is ""a fan of after-the-fact torture tests"".<p>The blog author interprets the other comments as anti-TDD, though they seem unrelated to me.<p>Joe Armstrong: Actually does TDD.<p>Norvig: <i>""I think test-driven design is great. I do that a lot more than I used to do.""</i><p>I don't understand how you could have come up with a different reading. The originally post seems to be half-heartedly questioning TDD (without much support from the quoted sections), but that is on the far end of a continuum that has automated tests, then unit tests, on the way towards it. Which I thought I made clear with my list where the near end of that spectrum (automating tests for complicated areas) is better supported than the far end (TDD according to the book). Many responses I see here seem to reject testing entirely.<p>(edit: just to be clear when I say ""automated"" I mean they wrote a program to test their program. It doesn't necessarily mean that they run it on every change, or check-in or whatever. I just mean it runs and says: pass or fail without a human being having to examine the output, though that output may be helpful when it does fail.)",1254827878
863866,comment,863865,863865,0,0,dugmartin,,,"In this episode we talk about distributing software via social media and methods of gathering feedback from users.  Paul Hake talks about his experience distributing games via Facebook while Chas Emerick talks about forums versus ""old school"" phone support for his customers.<p>Let me know what you think.",1254827816
863865,story,,,4,1,dugmartin,"FounderCast Episode 2",http://foundercast.com/2009/10/episode-2/,,1254827740
863864,story,,,1,0,bastian,"Why the real power of Twitter is in search",http://www.techradar.com/news/internet/why-the-real-power-of-twitter-is-in-search-640972,,1254827716
863863,comment,862998,863474,0,0,bbuffone,,,"Laptops are perfect for the couch.  Watching TV is easy; your laptop screen and TV are on the same plane so it is easy to go back and forth between the two.  Laptops sit nicely on your lap (Think that is how they got there name), unless you have a thinkpad like mike that operates at 200 degrees.<p>Chasing another input device like a point would be a pane; Sticking your hands between the seat cushions for the remoe is bad enough.  Now I would be chasing a tiny plastic pencil everywhere.",1254827578
863862,comment,863822,863822,0,0,ricree,,,"This just got killed.  Why resubmit it?",1254827336
863861,story,,,1,0,messel,"You may be a Markov chain",http://www.victusspiritus.com/2009/10/06/damn-super-productive-days/,,1254827206
863860,comment,863853,863853,0,0,davidw,,,"I found this in the preface to ""my"" [1] book:<p>> In addition to my coauthors, many other people have contributed to the success of this second edition.  Clif Flynt, Jeff Hobbs, <i>Brian Kernighan</i>, Steve Landers and Mark Roseman all spent significant time and effort on critiquing and improving the technical content.<p><i>gulp</i>.  I hope I didn't come across too badly.  My portion of the book was about Tcl's C API.<p>1) <a href=""http://journal.dedasys.com/2009/09/15/tcl-and-the-tk-toolkit-2nd-edition"" rel=""nofollow"">http://journal.dedasys.com/2009/09/15/tcl-and-the-tk-toolkit...</a>",1254826830
