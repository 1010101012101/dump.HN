ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
28520,comment,28410,28425,0,0,mxh,,,"""Google runs entirely on OO languages (C++, Java, Python)""<p>There're some interesting questions about what makes a language an 'OO' language.  For one, does a language need only to provide facilities for OO, or must it enforce OO approaches?  For another, what flavor of OO must it support or enforce?<p>Most 'modern' languages will provide facilities that can be seen as supporting some form of OO; data structures are mandatory, and methods are an easy extension of them.  However, most of these languages don't mandate an OO approach to coding; for instance, C++ (aka C/C++) doesn't and Python doesn't, although Java may be more dogmatic on the question.  (A language that mandates OO approaches wouldn't be to my taste, because I don't believe those approaches to be appropriate for all problems.)<p>So, it's a bit of a non-sequitur to proclaim that the virtues of OO are demonstrated by the use of 'OO languages'; unless those languages mandate OO approaches you'd need to look at how those languages are being used in practice.",1181982572
28519,comment,28429,28483,0,0,keiretsu,,,"so i would assume that you do not hold hastily put together teams with less regards as long as the thing they're building is not lame?",1181982571
28518,comment,28499,28499,0,0,weel,,,"Computer Science is an unusually accessible field of engineering for self-learners. Purveyors of fine computer systems and programming languages market them by writing oodles of documentation, often free. There is an amazing amount to be learned just from reading the GNU manuals. All the machinery you need in order to play around with most of the latest new technology is available at Fry's.<p>But I should probably warn you against the idea that you can become a good programmer simply by learning to use some of the tools. That's like becoming a chess player by studying the rules of the game, and the mechanics of chess clocks. If you just want to make sure you can understand your more technical business partner when s/he talks shop, or even do some simple programming, surely, you can get a long way simply by knowing the syntax of a programming language or two and some basic UNIX. I've seen some self-taught programmers do amazing things. But for most jobs that are actually technically innovative, you're going to have to sit down and learn some stuff about algorithms, data structures, concurrency, and so on. (This is what I shall snobistically call ""real CS"".)<p>Fortunately, even ""real CS"" can, with lots of motivation, be learned outside of formal academia. I would recommend you start with Structure and Interpretation of Computer Programs (the book and three different series of free video lectures are on the net for free). In fact, even if your goal is just to understand the techies, SICP is probably still about as good as it gets, and the old Abelson and Sussman video lectures are quite amusing. Other great resources are ArsDigita University and OpenCourseWare.",1181981792
28517,comment,28429,28430,0,0,davidw,,,"Co-founders in the night exchanging glances<p>Wondring in the night<p>What were the chances wed be sharing a C-corporation<p>Before the night was through.<p>With apologies to Frank Sinatra...",1181980905
