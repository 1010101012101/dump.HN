ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
807619,comment,807473,807493,0,0,onreact-com,,,"wordpress.com blogs get hacked as well, just check:<p><a href=""http://www.google.com/search?q=wordpres.com+hcked&pws=0&hl=all&num=10"" rel=""nofollow"">http://www.google.com/search?q=wordpres.com+hcked&pws=0&...</a><p>You'll find threads like these:<p><a href=""http://en.forums.wordpress.com/topic/my-site-got-hacked"" rel=""nofollow"">http://en.forums.wordpress.com/topic/my-site-got-hacked</a><p><a href=""http://en.forums.wordpress.com/topic/my-friends-site-was-hacked"" rel=""nofollow"">http://en.forums.wordpress.com/topic/my-friends-site-was-hac...</a><p><a href=""http://en.forums.wordpress.com/topic/i-got-hacked-1"" rel=""nofollow"">http://en.forums.wordpress.com/topic/i-got-hacked-1</a><p>where wordpress.com users seek help after they got hacked.",1252227342
807616,comment,806995,806995,0,0,epkann,,,"It's interesting that Paul believes willfulness is primarily inborn, especially since he now has a child. How would he react if his child were to exhibit lack of willfulness (a trait he clearly admires)?<p>I agree that among siblings in the same family, one often observes a wide range of willfulness. However, the same family may not be as homogeneous an environment as Paul assumes. It's been shown that elite universities disproportionately admit eldest children and only children. It would seem that the differential upbringing that only and eldest children receive (in undivided parental time and attention, etc.) does result in increased willfulness, discipline, and/or intelligence.<p>Ambitious people often hope that their children will exceed their own levels of achievement. Empirically, it seems that there is a strong regression-toward-the-mean effect among the children of parents who have done great things. I wonder how much of this is nature versus nurture - could there be a negative effect of growing up in too rich of an environment that diminishes one's chances of becoming a Steve Jobs or Paul Graham? How do you train willfulness and ambition in a child?",1252227227
807615,comment,806995,806995,0,0,david927,,,"Determination is great for investors because it increases the chance that they'll get a return.  But the number of great ideas is x, and having a bunch of companies bound and determined to do something with x * 100 is relegating them to living under a horrible opportunity cost -- eating ramen for a subsistence profitability level when they could be doing something more interesting and profitable.<p>A company needs to eventually have an idea that's both unique and compelling.  It should optimize on having a sustainable competitive advantage.  Determination is incredibly important because few companies start out with the right mix and usually have to experiment to get it right, but let's not over-idealize it.  All the determination in the world won't let you make a cake with sand and olive oil.  A founder has to know ""when to hold 'em and when to fold 'em.""",1252227170
807613,comment,807238,807537,0,0,tlrobinson,,,"+1 for the git branch.<p>Here's my bash prompt script. It shows the command number from this session (PS_NUM), the exit code of the last command (highlighted red if != 0), the pwd (in cyan), and the git branch (in magenta)<p><pre><code>    OFF=""\[\033[0m\]""
    RED=""\[\033[0;31m\]""
    MAGENTA=""\[\033[0;35m\]""
    CYAN=""\[\033[0;36m\]""

    function promptcommand {
        STATUS=$?
    
        PS_NUM=""[\#]""
        PS_STATUS=""[$STATUS]""
        PS_PWD=""${CYAN}\w${OFF}""
        PS_GITBRANCH=""${MAGENTA}\$(__git_ps1)${OFF}""
        PS_PROMPT=""\$""
    
        if [ $STATUS -ne ""0"" ]; then
            PS_PROMPT=""${RED}${PS_PROMPT}${OFF}""
        fi
    
        PS1=""${PS_NUM}${PS_STATUS} ${PS_PWD}${PS_GITBRANCH} ${PS_PROMPT} ""
    }
    PROMPT_COMMAND=promptcommand
</code></pre>
I probably could have eliminated the PROMPT_COMMAND thing like in the first example.",1252227140
807612,comment,807473,807493,0,0,onreact-com,,,"This is the way they advertise for their wordpress.com version obviously. Stick with us or you get compromised. Bad style. They rather should fix their buggy software.<p>They prefer new features over security. Have you noticed how with each major upgrade there are new holes in it?<p>WordPress is like Swiss cheese, full of holes. I'd prefer Swiss banks or watches instead.",1252227006
807610,comment,806683,806902,0,0,jstevens85,,,"Because people are watching videos using the CPU-intensive Flash YouTube player rather than their desktop media player...",1252226682
807609,comment,807473,807487,0,0,axod,,,"One aspect of VPS's and (eugh) cloud computing, is the additional security. I don't think this aspect gets trumpeted enough.<p>Instead of having a single big kick ass dedicated server running <i>everything</i>, you can have maybe 10 VPS's each doing a different thing. You can group things together in terms of risk - put wordpress on its own vps, put your customer db on another, etc etc.
At least then, if someone hacks into wordpress, it doesn't really matter that much - they <i>only</i> get wordpress, nothing else, and you just clean off that machine from backups.<p>(Obviously have completely different login credentials for each VPS, and only grant access from one VPS to another when really necessary, and restrict it).",1252226570
807608,comment,807192,807271,0,0,mixmax,,,"Excellent point - I stand corrected...",1252226225
807607,comment,807494,807569,0,0,halo,,,"All of those languages became popular before the web when widespread free implementations of languages became available and the norm.",1252225873
807606,comment,807584,807584,0,0,TomOfTTB,,,"The problem with this article is his list of ""Wordpress Problems"" could just as easily be named ""The Problems Every Web Application Has"".  Web Apps, by definition, always present a battle between extensibility and security.  Wordpress is no different and this author's suggestion (to truncate the extensibility) is an over reaction at this point.<p>Keep in mind, Wordpress caught the bug before it was exploited.  The problem Wordpress has is their users hold off on upgrading because the upgrades often break plug-in functionality. What they need to do is further abstract their plug-in framework so that security updates can be applied without breaking plug-in functionality.<p>After doing that Wordpress may still need to make the software less extensible but they should at least try every possible way to keep their current functionality before cutting features for security sake.",1252225596
807605,comment,807494,807597,0,0,plinkplonk,,,"""And it's up to the rest of the world to bet money on one guy's whims and desires eh? ""<p>This is an old debate. No one is asking anyone to ""bet money"" on anything.<p>I am just saying the languages rising to dominance <i>these days</i> (vs in the eighties) seem to be driven by ""benevolent dictator"" types (Ruby, Python, even Clojure]. [here is a counterpoint for you. Haskell is an exception] and, yes,  a single canonical implementation with a download page.<p>A lot of very competent people seem to be fine ""betting on"" these languages. Or are you saying anyone who uses Python or Ruby is stupid because they don't have committees or standards?<p>Clojure is very much ""the whim of Rich Hickey"" and is doing just fine.<p>Now perhaps you have some special caution  that leads you to avoid these languages. That's fine.<p>""what happens when your benevolent dictator has holes in his understanding of programming languages? ""<p>Oh you mean like the lisp folks didn't understand static scope in the beginning? ;-).<p>From Richard Gabriel's (one of the people on the  Common Lisp Committee) paper ""A critique of Common Lisp""<p>""     Every decision of the committee can be locally rationalized as the right thing. We
believe that the sum of these decisions, however, has produced something greater than
its parts; an unwieldy, overweight beast, with significant costs (especially on other than
micro-codable personal Lisp engines) in compiler size and speed, in runtime performance,
in programmer overhead needed to produce efficient programs, and in intellectual overload
for a programmer wishing to be a proficient COMMON LISP programmer.""<p>That doesn't sound very much like they had ""hole less"" knowledge of language design does it?<p><i>Every</i> language in existence has ""holes"", depending on your view point. So what?<p>Look plenty of languages have been successful without deep programming language (semantics) understanding ""embedded"" in them.  The languages with committees  ( COBOL. Common Lisp) are hardly cutting edge research languages now are they?Success has little to do with programming language ""understanding"".<p>So the answer to ""what happens when your benevolent dictator has holes in his understanding of programming languages?"" is ""any resulting problems get fixed"" (e.g: ruby block scoping between 1.8 and 1.9).<p>""Your pet language grows up the moment industry and governments want to use it""<p>so by this metric Common Lisp never really ""grew up"" and  is a massive failure? Why do you still use it then? Ruby seems to be a ""grown up"" language by your own idea of ""grown up"" (a lot of government and industry usage)  and still doesn't have a committee and is very much a ""benevolent dictator"" language.<p>My idea of a successful language, fwiw is what applications were written it and how successful <i>they</i> were.<p>By this standard, CL is successful . Emacs Lisp is successful. Arc and PLT Scheme are successful.  Of course Ruby, Python, etc are massively successful. Success doesn't really need a committee or a formal standard.<p>""not until the next big epiphany or mood swing of THE language architect""<p>you prefer the frozen-language-spec-by-committee leaving the language mired in the past? (Common Lisp).<p>I still prefer the (benevolent dictator + knowledgable community to debate design options) to industry committees.<p>The creators of the non committee languages (Guido, Matz, PG etc) are without exception bright, articulate people with a strong design sense and an ear to the users' opinion. Those languages have friendly knowledgeable communities. I'd rather trust them than some random business/government committee.<p>If that means my language isn't ""grown up"" then so be it :-)",1252225272
807604,comment,807554,807554,0,0,alanthonyc,,,"Arrington is way too distracting.",1252225161
807603,comment,805645,806360,0,0,nostrademons,,,"The problem with TCO is that it makes it impossible to get accurate stack traces for a function.  If you optimize away the stack frame, there's no way to tell the user ""this is what was running when the error occurred.""  You get odd behavior where a function may appear to call another function which never appears in its program text, because the intervening stack frame has been optimized away.<p>Stack traces are part of the Python language (besides looking pretty, the traceback module lets you inspect them), so it'd be really hard for a conforming implementation to include TCO - at least the type that actually has tail recursion run in constant space.<p>Java faces a similar problem with HotSpot's inlining, which is why you occasionally get <compiled code> in a Java stack trace instead a line and file number.  They seem to have some hack in to avoid eliding the stack frame entirely though.  This is probably what I'd do if I were designing language: push a bare-bones stack frame with just the debug info, but pop all the unused temporary working storage.  Or punt on general TCO and just optimize tail-<i>recursion</i> - isn't that what Python was proposing to do with the @tailcall decorator anyway?<p>The languages I know of with TCO - gcc and Scheme - have really terrible debugging support.  IMNSHO, I think that giving up debugging info for TCO is a poor tradeoff.",1252224941
807602,comment,807494,807595,0,0,mahmud,,,"Python is an excellent language in the hands of a competent pythonista: your programming career will thank you if you stuck with one language and learned its ins and outs over 3-4 years.<p>Libraries are add-ons and most can be ported and rewritten in your favorite language with more natural idioms. SWIG is nowadays the equalizer; it makes the entire C world callable from your favorite pet language. Stuff like LLVM will take you even further, once you know what you're really doing. In the mean time, use foreign functions and web service to bridge the gap where it exists.<p>My advice to Clojure programmers is to learn Lisp and mine its rich heritage for beautiful designs. A few months spent on a full CMUCL installation will make you a much better programmer for the rest of your lives: I was a Win32/COM guy writing GUIs for a living. When I discovered CMUCL I saw stuff I couldn't imagine. I was able to put buttons in the Unix shell and attach callbacks to all underlined text in an editor buffer. Stuff like that prepared me for DOM scripting with jquery. Look at Smalltalk and SML too.<p>A personal note to Clojure web framework guys, specially people using Compojure: take a look at Hunchentoot and copy all its good parts. I develop on Hunchentoot and everyday I discover an engineering decision made by its author that just humbles me. Good code makes you respect its author.",1252224910
807601,comment,807473,807473,0,0,idlewords,,,"An approach I really like is to run your blog software of choice locally, then rsync the generated flat files to a server.  If you want comments, you'll need to maintain some dynamic component on the server, but it still massively reduces your exposure.",1252224877
807600,comment,807105,807426,0,0,lsc,,,"edit:  my point is that as I age, I become more focused on improving the things that I want to (and that I think I can) improve.  I'm no longer spending time learning what others think i should learn.   I don't know how many hours I wasted on handwriting, or learning how to play the piano, or other things that parents or others wanted for me as a child.<p>I'm a rather different person than I was at 25. I'm starting to get the hang of bending my environment to suit my needs rather than bending myself to the environment.  My crazy ideas are 'ramen profitable' now.  That's a big step up from just talking about and occasionally implementing crazy ideas, then getting bored and doing something else.   My income between 25 and 29 went up almost 30% a year.  
Now, part of that was that my income barely changed at all from 21-25, see, I was born in '80. Few people in our industry did well those years.<p>I mean, right now I'm starting to learn some of the social skills and ""responsibility"" I skipped when I blew off school to play in the .com boom.  Massive productivity increases there (maybe not in terms of coding, but in terms of getting things done, it's definitely worth something.)<p>I still feel unfinished, like I'm still a child.  There is a lot left to learn.   My body has begun to go downhill, I mean, I can't stay up all night drinking mtn dew like I used to, but that presents it's own, possibly productivity enhancing challenges.  Apparently the retna in one eye is detaching.  I mean, the doctor did something with a laser, and it's under control, but from what I understand, if you've got one eye with a detaching retna, it's much more likely that your other eye is going to fail same way.  So one of my next projects is to learn how to use audio output from a computer as a blind person does.  I figure if my eyes don't fail it, well, I've got another output device, and possibly the beginnings of a discrete wearable computer.  And if they do, if I can still use a computer, I'll get a driver and carry on as usual.<p>(ugh, I actually spent a bunch of time over the last two days going over my backups trying to find one of those abandoned projects from when I was 25.  I've got some email from the era, but I don't seem to have the code.)",1252224840
807599,comment,803136,803378,0,0,ZachPruckowski,,,"OK, so it's less rackspace per TB.  But it's still more power, and more cooling.  And in terms of filling a rack, power and/or cooling become limiting factors long before volume does.",1252224758
807598,comment,807238,807238,0,0,raintrees,,,"Reminds me of colorful prompts I used to show off in DOS by device=ansi.sys, (I think - It has been, what, more than 20 years?).  Save the current cursor location, go to the top of the screen, show the date, time, working directory (in different colors of course, left, middle and right positions) and then restore the cursor location and show a prompt.  In yet more ansi colors.",1252224420
807597,comment,807494,807590,0,0,mahmud,,,"<i>I think this (benevolent dictator/single creator vs committee/standards driven design) might be a more meaningful distinction.</i><p>And it's up to the rest of the world to bet money on one guy's whims and desires eh? what happens when your benevolent dictator has holes in his understanding of programming languages? Not even Wirth could get away with dictatorship, and Wirth <i>knew</i> what he was doing. Your pet language grows up the moment industry and governments want to use it, and they expect their code bases to work for the next few decades, not until the next big epiphany or mood swing of THE language architect.",1252224115
807596,comment,807192,807192,0,0,joshu,,,"I propose we call these ""ghouls""",1252224051
