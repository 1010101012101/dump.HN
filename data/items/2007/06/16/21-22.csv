ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
28598,story,,,8,0,gibsonf1,"Some Buyers Grow Web-Weary, and Online Sales Lag - ""Has online retailing entered the Dot Calm era?""",http://www.nytimes.com/2007/06/17/technology/17ecom.html?ei=5090&en=1fa221b3ec3bb4d9&ex=1339732800&partner=rssuserland&emc=rss&pagewanted=print,,1182030903
28596,comment,28583,28583,0,0,davidw,,,"I really hope that as a community we can keep things a bit more positive than that.  Is that something you would say to this person face to face?<p>I didn't find the application particularly compelling, and wouldn't hesitate to say that, but it's possible to be direct without being mean.",1182030188
28595,comment,28567,28588,0,0,keiretsu,,,"The issue with Rails for me wasn't the database bottleneck. It was the ActiveRecord. It was using far too much memory and was taking up the bulk of the page loading time. After i migrated the app to my php framework, I downgraded to from a 2GBz 1GB RAM server to a 2GHz 512MB RAM server and i still get a performance boost. Running the rails app on the 512MB server was painfully slow.<p>Writing your own framework is a good compromise if it can give you that performance boost that the other frameworks can't give you. I've tried the other PHP frameworks and the best page loading time i got was 0.9s.",1182030173
28594,comment,28410,28542,0,0,pg,,,"OO programming may be older than you think.  I was in my early twenties when I first encountered it.  At first (for about a year) I even believed in it.  So whether I'm right or wrong to dislike it, it's not simply because I'm old.",1182030155
28593,story,,,4,0,pg,"YouTube launches web-based video editor (written by Adobe)",http://www.techcrunch.com/2007/06/16/youtube-remixer-edit-videos-online-at-youtube/,,1182029761
28592,comment,27785,27881,0,0,Bogtha,,,"> inklesspen's objections to GETs changing server state seem to be based on web-accelerators following links. If web accelerators do not parse js, then inklesspen's objections are not relevant. Am I correct?<p>No.  GETs are defined to be safe by the HTTP specification.  Web accelerators are only talked about so much because the problems GWA caused were so widely talked about.  In reality, anything that see the URI can conceivably cause problems.<p>By abusing GETs in the way that you are, you're essentially gambling that no software is going to see and follow your links automatically.  Right now, software like that might not exist.  But you never know what fancy Firefox extension, UserJS script or proxy magic somebody could release tomorrow.<p>When it's so easy to use HTTP properly, is it really worth taking that kind of risk?\n",1182029615
28591,comment,27535,27535,0,0,mark-t,,,"Joel doesn't really examine any of the down sides to sticking with the MS font renderer. It might cause problems with Safari internals, since various DOM components and style attributes will depend on font sizes and spacing. It might add to the annoyance of web development, since Safari on Windows wouldn't do the same thing as Safari on Mac. However, I suspect they had to work around tons of similar issues, anyway.",1182029216
28590,comment,28410,28435,0,0,asb,,,"I disagree. A language without OO can allow code to be organised in an intelligent way by providing a module system. See Standard ML as (what I consider to be) a good example of this.",1182028308
28589,comment,28579,28579,0,0,pg,,,"It's hard to say exactly why, but the picture in this article looks like one from The Onion.",1182028094
28588,comment,28567,28585,0,0,willarson,,,"I explicitly stated in my post that I was unsure if he was using a php framework. I try to avoid unfounded assumptions, although I certainly make them.<p>Scaling can be overemphasized: it doesn't matter if it scales well if it doesn't work. Beyond that, Rails and Django both have sites getting hit with huge quantities of requests. Beyond that, many of the issues with scaling are database issues, not framework issues. As such you will have those same database issues regardless of the framework you chose.<p>I see scaling well on a Django site as being simpler than scaling well on php. Django has a potent caching system that is easy to activate (the creators of Django also created memcached, so the integration is exceptionally well done, but you can also cache to files, a database, etc), and it can be configured to cache at the level of granularity required (specific db queries, entire pages, components of pages, only for users who are not logged it, etc).<p>I have no doubt there are reasons to be using php over rails or django, but I don't think that scaling is one of them.<p>Finally, writing your own framework is the antithesis of doing something that scales well: your company and your programmers also have to scale along with your software.",1182028014
