ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
108136,comment,107771,107819,0,0,papersmith,,,"I think it's more like dreadnoughts vs. a F-16.",1201913976
108135,story,,,9,2,theanarcrist,"Qi: An interesting Lisp with pattern matching ",http://www.lambdassociates.org/qilisp.htm,,1201913869
108134,comment,108115,108131,0,0,robmnl,,,"Oh it's all good. :)<p>It is exciting. We're pretty committed. We're good with a low key response first, while we're a semi public beta phase.<p>Appreciate the comments, for sure you'll hear back from me. :)",1201913810
108133,comment,108094,108094,0,0,nickb,,,"BTW, three different 'accidents' with cables being cut? Right.<p>I smell war coming...",1201913733
108132,comment,107683,108119,0,0,randallsquared,,,"Curi, I'm not saying it's a <i>good</i> reason to dislike lisp.  If I thought it was a good reason, <i>I</i> wouldn't like lisp, and yet lispy languages are my favorites (most of my lisp code has been CL, but Arc is interesting at 0.0).<p>There are a number of possible solutions to your question about infix functions.  In J, insofar as I understand it, all functions take either one or two arguments, but the arguments can be arrays, so you often get the effect of more than two arguments.<p>For example (it's been a while) the form * / 2 3 4 would have the function *, the function /, and an array or list of three integers.  J is parsed right to left, so the array is collected first, and then there's a modifier function '/' which takes two arguments: a function on the left, and an array on the right, and applies the function to each of the elements of the array (like map in lisps), outputing the new array.  I don't know the details anymore of which symbols are what primitives, but J is interesting, in my opinion.<p>Alternatively, for your example, you might do<p><pre><code>    (a b) foo (x y z) ; or
    (a b, foo, x y z) ; or
    a b Foo x y z     ; if functions have their own naming rules like in Erlang, or
    a b foo! x y z;   # where the bang means call, or
</code></pre>
something else.  Surely you can come up with 10 or 12 yourself.  Some of these scale in some ways, and not in others; you could have a rule that you can only have one call per line, to remove ambiguity.  That sounds rather restrictive, but so do Python's indentation rules when you first hear of them, and that works out okay, in my experience.  I don't think any of them lend themselves to nice general-purpose macros, but I might be wrong.",1201913452
108131,comment,108115,108124,0,0,eusman,,,"i already upmodded the thread before making the comment, so it wasnt meant to be hostile, if it felt like that.<p>pre-launch phase for a startup its very exciting time. Hopefully you will keep up your work with the same mood right after launching, and won't get dissapointed by the attack of anyone or non-immediate massive response of your application.<p>for everyone else, i think its interesting to pariticipate in commenting other startups as it helps them kept focused also in their starup efforts, so i suppose we wil hear from you again here.",1201913263
108130,comment,108115,108115,0,0,motoko,,,"Threw out something as fast possible to credibly sell our product, we've made some sales, and now we're going back and fixing everything / adding infrastructure & features.<p>We also secured a small seed round of funding ---enough to last us a few months.",1201913099
108129,comment,107683,107746,0,0,greendestiny,,,"State in procedural languages has more to do with side effects than nice syntax for it. This article has a nice description of how why explicit state is good in procedural languages sometimes: <a href=""http://prog21.dadgum.com/3.html"" rel=""nofollow"">http://prog21.dadgum.com/3.html</a>",1201913059
108128,comment,107683,108084,0,0,greendestiny,,,"I agree completely. However, the idea that only lisp describes trees, or that the describing is where lisp is powerful is wrong. All languages describe trees and the process is not that obscure. Like I said elsewhere I could write a lisp like language with no lists, no lamdas and no macros and it would very clearly describe a tree. It wouldnt be a powerful language.",1201912691
108127,comment,108115,108125,0,0,robmnl,,,"What are you guys doing? Even just roughly.",1201912287
108126,comment,108115,108123,0,0,robmnl,,,"The redesign is really a user interface design, not looks. We'll confuse users too much if we completely change the whole thing on them. But we're close to launching anyway.",1201912259
108125,comment,108115,108115,0,0,stillmotion,,,"Built the system, but then we realized we were hitting a common demographic. Went back to the drawing board and begun to rewrite it. We're close to private beta.",1201912207
108124,comment,108115,108122,0,0,robmnl,,,"We're really excited to launch. We kept pushing dates back, as there is just more work than expected. We're working on a complete ondemand solution. So instead of signing up for project management, crm, invoicing separately, we'll provide an all in one solution. Plus it's a platform, so it's extensible. We're working to go into private beta this month.",1201912196
108123,comment,108115,108115,0,0,kogir,,,"you should release the beta. Then you'll at least have user feedback for the redesign.",1201912068
108122,comment,108115,108115,0,0,eusman,,,"how about answering your own questions first!",1201911957
108121,comment,107991,108035,0,0,inklesspen,,,"""Buying some networking""? I admit I wasn't exactly clear with what the app does, but in the iPhone section I did say the app has to be used in places where there's no cell phone service, let alone wifi.<p>It's an app used by public health agencies, who _have_ to be able to visit clients in their homes and chart their progress. And plenty of homes in the rural US have no dial-up internet, no broadband, no wi-fi, and no cell-phone coverage, and no sign of that changing soon.<p>That said, I agree with you. The decision-maker at this company doesn't, and as I mentioned below, I've got little leverage to change things.",1201911746
108120,comment,107683,107965,0,0,brent,,,"I'd say that the conclusion (I came to) wasn't just that googlers were more efficient with other languages, but that after that many years of lisp he's already more efficient with python.",1201911667
108119,comment,107683,108116,0,0,curi,,,"but how can it be a reason people dislike lisp when C and Java programmers put their function calls in prefix order, too? the vast majority of programmers do function calls that way, and prefer it.<p>and infix function calls in general is obviously a bit ridiculous because it doesn't scale. why would you want all functions to take 2 arguments? or were you going to<p>(a b foo x y z)<p>for a function of 5 arguments? and memorize which side to put the extra one on, and what order they go in, etc?",1201911636
108118,comment,107683,108079,0,0,curi,,,"cool. which of the basic arithmetic operators have difference precedence in which languages?<p>what i am used to is * and / first, then + and -.",1201911462
108117,comment,107771,107771,0,0,doubleplus,,,"Grr.  I just interviewed for a position at Yahoo on Wednesday.",1201911450
108116,comment,107683,108114,0,0,randallsquared,,,"""so you really advocate tokens in the order:""<p>No.  Nowhere am I <i>advocating</i> that.  Rather, I'm pointing out that it's not an obviously ridiculous idea -- people have implemented it, and some people like it.<p>""i think not using infix function calls has nothing to do with why people are put off by s-expressions.""<p>I disagree; I think it <i>is</i> one reason.",1201911388
108115,story,,,48,91,robmnl,"Ask YC: Status of your startup",,"Hi!  Want to get some conversations going here.  How's your startup doing right now?<p>Any planned launch dates?<p>What's your startup anyway?<p>We're quite busy with ours, we were ready to release a beta, but choose to redesign and refactor things again. What about yours?",1201911245
108114,comment,107683,108081,0,0,curi,,,"so you really advocate tokens in the order:<p>x foo y<p>over<p>foo x y<p>? well, right or wrong, you are definitely deviating from the mainstream. that is, C and java coders will agree with me that prefix, and unlimited arguments, is better. the only difference they'll do in the general case of function calls is to add commas in the argument lists, and move the open-paren to the right one token.<p>i think not using infix function calls has nothing to do with why people are put off by s-expressions.",1201911108
108113,comment,107683,108097,0,0,brlewis,,,"<a href=""http://people.csail.mit.edu/gregs/ll1-discuss-archive-html/msg00110.html"" rel=""nofollow"">http://people.csail.mit.edu/gregs/ll1-discuss-archive-html/m...</a>",1201911055
108112,comment,108085,108111,0,0,pius,,,"That's why I knew I could say it without reservation.  :)",1201910562
