ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
157366,comment,157269,157269,0,0,tptacek,,,"From an ex-Pythonista a year in to Ruby, point-by-point:<p>* Ruby's Unicode support is indeed inferior to Python's; unlike Python, you need to explicitly use library calls to work with UTF-16 strings. Python does indeed bake this in to the language.<p>* I don't use multiline regexps. On the other hand, I do use normal regexps, all the time, and the fact that I don't have to call out to a library to use them, or deal with special ""match"" objects with their own API, is a plus. Ruby has more natural support for regular expressions than Python, where regular expressions are an afterthought.<p>* Ruby's documentation sucks. Full stop.<p>* I have no idea why I'm meant to care about what this guy thinks of Ruby 1.9 or Ruby 2.0. There's a Ruby 2.0?<p>* Python is way faster than Ruby. Not by a little bit.<p>* Ruby's scoping rules are a dream compared to Python's; it support real closures, instance variables and methods with encapsulation, and coroutines that were designed for more than just iteration.<p>* Ruby and Python are equivalent when it comes to internal consistency. Python delegates virtually everything to a sprawling standard library for which there is, most certainly, ""more than one way to do it"". Calling out the difference between ""print"" and ""puts"" is particularly amusing if you know how Python handles the same distinction.<p>* Ruby has a cleaner object model than Python, where virtually every feature of the language appears to have been built by exposing the raw symbol table to the language. The simplest way to observe the difference is by taking an existing class and wrapping it with an object that catches all method invocations, a la ""method_missing"".<p>* Both Ruby and Python support keyword arguments by giving functions a dictionary type of keyword/value pairs; Ruby has the added benefit of a Symbol type, like Lisp and Smalltalk. No Ruby program fails to use them.<p>* I'm guessing about, oh, zero people on Hacker News give a shit about SAP support.<p>* I never noticed that Ruby didn't print the actual line of code that threw an exception. It's true! Python does! I never noticed that, either! That's pretty neat.<p>* Apparently, despite having been largely ported from Rails, Pylons is more mature than Rails. Awesome.",1207616274
157365,comment,156180,156780,0,0,aswanson,,,"What if you are not interested in math?",1207616216
157364,comment,157101,157101,0,0,PStamatiou,,,"College isn't just about making more money afterwards. It's about meeting people you'll keep in touch with for the rest of your life, learning from interesting people that excel in their field and networking with people that you might be able to help in the future and/or might be able to help you. It's priceless IMO.<p>Not to mention being able to avoid the ""so you don't go to college?"" conversation with dates..",1207616205
157363,story,,,3,0,iamelgringo," Google faces loss of talent",http://www.ft.com/cms/s/0/bafbd8ec-042d-11dd-b28b-000077b07658.html?nclick_check=1,,1207616113
157362,comment,157357,157357,0,0,edgeztv,,,"Cutting these exams certainly won't get more minority students involved in these subjects.  Seems like a crude hack to improve the College Board's diversity ratings.  One is led to believe that they do not care about the students at all from this statement.",1207616047
157361,comment,157269,157269,0,0,russ,,,"Ruby pwns Python. word.",1207615895
157360,comment,157266,157266,0,0,bootload,,,"Here is another ~ <a href=""http://www.mazeworks.com/mazegen/maze_faq"" rel=""nofollow"">http://www.mazeworks.com/mazegen/maze_faq</a> Has some obfusticated C examples.",1207615705
157359,comment,157269,157269,0,0,justindz,,,"Imagine how much good code in either language is currently <i>not</i> getting written ;-)",1207615697
157358,story,,,3,0,nickb,"Three useful genetic algorithms",http://williamtozier.com/slurry/2008/04/02/search-algorithms,,1207615427
157357,story,,,25,76,Alex3917,"College Board drops AP comp sci & latin for racial diversity reasons",http://www.edweek.org/ew/articles/2008/04/09/32ap.h27.html,,1207615418
157356,comment,157269,157327,0,0,nickb,,,"If you're working professionally with RoR buy few commercial books on Ruby and Rails. The cost is negligible when you consider the savings in time that you will get when learn from a good Rails/Ruby book. Sure, Django has a free book on the basics of it and there is Dive into Python series but the number of books on Rails is much greater and they are professionally edited and are of better quality.<p>The lack of free books is an issue but you get what you pay for.",1207615322
157355,story,,,1,0,bootload,"The Social Web Browser",http://browsing.justdiscourse.com/2008/03/30/the-social-web-browser/,,1207615068
157354,comment,157269,157269,0,0,nickb,,,"I couldn't disagree more. Having tried both platforms, I felt like I was coding with one hand tied behind my back when I was learning Python, Pylons and Django. Web tools and the stack is a lot less mature than RoR stack and the amount of various plugins/gems available for both platforms was not even close. RoR plugins were so much more mature and multitudinous that after we started planning our app, we realized that we'd have to spend about 6 months(!!!) just writing the functionality in Django/Pylons that we were getting for free with Rails. Now this was about one year ago so things might have changed.<p>Since I don't have the time to go over each point that the author makes, I'll concentrate on a couple.<p>Lack of Unicode in Ruby 1.8.x. OK, so this might have been an issue before RoR 1.2 came out but since 1.2, RoR has introduced Multibyte and has been a lifesaver. Now, I don't have a clue how many Rails Unicode apps the author has written in his career but I can tell you for a fact that Unicode is not an issue in Rails anymore. We have an app in beta that uses Unicode for every string that we handle and we handle so many strings for so many languages that your head will spin. We haven't had any huge issues with RoR's Unicode support at all. So that argument is really a moot point.<p>As for language performance, who really cares?! Programmer's time is so much more expensive than servers so the last thing I  worry these days is how fast some specialized benchmark runs. As long as the latency is acceptable and you can solve the problem by parallelizing it, the performance of an interpreter is completely irrelevant.",1207615043
157352,comment,157269,157269,0,0,tptacek,,,"Well, this was interesting. My team just finished a Rails project that used Racc extensively (with multiple different grammars), made extensive use of cryptography, and spent several weeks up on blocks being tuned with ruby-prof.<p>Obviously, it also used ranges, keyword arguments (like <i>every other Ruby program ever written</i>), strings and string conversions, blocks, private methods, and yes, even Unicode.<p>I did notice that the documentation for these features was lacking. What I didn't realize was how much Ruby sucked, compared to Python.<p>I am now steeling myself to begin typing ""self"" in front of every instance variable, write ten lines of code every time I need a ""method_missing"", fish the gettimeofday equivalent out of 19 different libraries that return and manage time, re-learn whether I want to call popen, popen2, popenN, or create a Popen class, wrap my data types up in a list when I need code to close over them, condense all my anonymous functions to single expressions to work around Python's accidental support for lambdas (which, according to GvR, are evil), write my oh-so-thread-safe-code for an interpreter that serializes around a global interpreter lock, pretend that my classes have private methods by naming them differently, just like I do in my object-oriented C code, marvel over the amazing things I can accomplish with ""generators"", continue to format strings using ""printf"" semantics the way Kernighan and Richie want me to, and track down bugs that are literally invisible due to semantic whitespace.<p>Can't. Wait. You know what I miss most? Twisted.",1207614979
157351,story,,,2,0,jefs,"Ideas are worthless: Here's mine",http://www.startupeyeddeer.com/user?uoid=4,,1207614967
157348,comment,157114,157114,0,0,FleursDuMal,,,"I would sell carbon-neutral, zero-environmental-footprint water. A portion of the price of every bottle offsets the manufacturing/transport costs to the environment, so people are free to enjoy the water totally-guilt free.",1207614720
157347,comment,156825,156825,0,0,bootload,,,"<i>""... When Auctomatic began negotiating, it put its efforts for a second funding round on holdâ€”and just about ran out of money.  ...""</i><p>Why did this happen?<p>As for the sale, well I think the decision not to hold out showed good judgement, an appreciation of the current credit squeeze. Is it always worth to hold out for <i>""double""</i> or nothing?  Only time will tell if eBay market will be hit by the downturn.  Is there any reason another startup in this area could not try a similiar tack?",1207614653
157346,comment,157294,157294,0,0,Alex3917,,,"The connectU guys really illustrate the true character of Harvard rowers.<p>/Last famous Harvard oarsman was Ted Kaczynski.",1207614502
157345,comment,157269,157269,0,0,SwellJoe,,,"I haven't found the argument about backwards compatibility to be true of Python, but it has been true of Perl.  Code that I wrote 5-6 years ago in Python has needed at least three updates to run in newer versions of Python (1.5->2.0 and 2.0->2.2 and 2.2->2.4--I no longer work in Python, so I don't know if they'd need an update to run on newer versions).  On the other hand, code that I wrote ten years ago in Perl still runs unmodified on Perl 5.10.  The only major upgrade problem I've seen has been the introduction of native Unicode in Perl, which caused anything that assumed scalars to be made up of 8-bit bytes to break, but that's a pretty broken assumption, anyway.<p>So, in short, I don't think Python is exactly a paragon of backward compatibility.  It may be better than Ruby, but it isn't a solved problem.<p>I also disagree with the assessment that TIMTOWTDI is a bug.  But, me being a Perl coder may have warped my judgment.  I find Ruby very intuitive--moreso than Python, even though I've written more Python code than Ruby.<p>That said, there are some serious deal-breakers in Ruby.  Lack of Unicode is one of them.  I wasn't among the folks criticizing Arc when it didn't have Unicode at first release...but if it had gone more than a year without Unicode, I would have joined the bandwagon of critics.  And, once again, I think Perl has solved Unicode better than Python.",1207614465
157344,comment,157314,157314,0,0,noodle,,,"hm.  restful is a way of doing things, not really something that you can read a tutorial on how to do step-by-step.<p>rails tutorials are tutorial form because you're implementing rest through a predefined framework.<p>the wikipedia article on it has good info:\n<a href=""http://en.wikipedia.org/wiki/Restful"" rel=""nofollow"">http://en.wikipedia.org/wiki/Restful</a>",1207614448
157343,comment,157272,157272,0,0,earle,,,"I highly recommend Perkins Coie (www.perkinscoie.com)",1207614341
157342,comment,157269,157269,0,0,sc,,,"Everything appears to be a matter of taste:<p>Ruby has two range operators, .. and .... Why? The only difference is that the shorter one, with two periods, returns a longer range, and the longer one returns a shorter range, not including the endpoint. Can this possibly get any more confusing? 2 The language should have one, not two. It is not hard to add or subtract one when you want a range with, or without, its endpoints.<p>I like the shortcut. Then again, I like the English language. I like the fact that you can express things in a myriad of (yes, you can say ""myriad of"") different ways depending on how you want to express them.<p>A Pythonista friend of mine once complained over the simple fact that Ruby had so many ways to express a conditional but none as elegant as what was used in Python.<p>Python:<p>- if foo: bar()<p>Ruby:<p>- if foo then bar end<p>- if foo; bar end<p>- if foo: bar end # deprecated<p>- foo if bar<p>- foo && bar<p>- foo unless !bar<p>I love the diversity, however. Really, the first thing that sticks out to me with Python are those superfluous parentheses. Taste, taste, taste.",1207614323
157341,comment,157269,157329,0,0,tptacek,,,"Won't somebody <i>please</i> think of the parsers?!",1207614133
157340,story,,,3,0,rms,"Fixing the Reddit Frontpage",http://wcuk.wordpress.com/2008/04/07/fixing-the-reddit-frontpage/,,1207614089
157339,comment,157269,157318,0,0,glyphobet,,,"Ah... You're right.  I thought value in xrange(10000) just checked the endpoints, but it appears to iterate. Someone should write a PEP. :)",1207614084
157338,comment,157242,157242,0,0,dejb,,,"I think the test is a good idea but the 'relevance raters' are only looking at the listing results - not the actual page. The relevance of the actual page is far more important to the user experience than the listing text. A clever 'made for adsense' site could scam the listing but obviously not the actual content.",1207614073
157337,comment,157269,157336,0,0,chaostheory,,,"good point",1207614038
157336,comment,157269,157334,0,0,glyphobet,,,"Ok, that's fair enough. Who knows how well the conversion program will work.  Still, for Python 3, there's a clear plan... and there's no clear plan for Ruby 2 (yet).",1207613955
157335,comment,156825,156825,0,0,kul,,,"wtf at submission headline.<p>im paying no tax on this deal.<p>the stock price hasn't been finalised on the deal yet either (related to point 2 above).",1207613856
157334,comment,157269,157331,0,0,chaostheory,,,"that's assuming the conversion program works well... It may work well for snippets, but I have to see it work well with larger/mature python code bases to believe it.",1207613653
157333,comment,157198,157198,0,0,Xichekolas,,,"I got the same feeling reading that just now as I did reading PG's Hiring Is Obsolete[1].<p>Really wish it made financial sense to walk in and quit my job tomorrow. Only 46 more days!<p>[1] <a href=""http://www.paulgraham.com/hiring.html"" rel=""nofollow"">http://www.paulgraham.com/hiring.html</a>",1207613552
157332,comment,157198,157198,0,0,andr,,,"This advice is working great for Microsoft ;)",1207613534
157331,comment,157269,157317,0,0,glyphobet,,,"> Won't python dev's have the same problem with Python 3000?<p>Read that section. It outlines why Python won't have the same problem.",1207613531
157330,comment,156892,156892,0,0,nreece,,,"Cool! Here's ours: <a href=""http://feedity.com"" rel=""nofollow"">http://feedity.com</a> - Create RSS feeds for any webpage. Track webpage changes in real-time. Pull data for mashups.",1207613459
157329,comment,157269,157312,0,0,tx,,,"Ruby's syntax is by far more complex than Python's. By ""complex"" I mean it from a parser's grammar point of view.",1207613339
157328,story,,,2,0,jsomers,"Overactive Structure Sets",http://jsomers.net/structures.html,,1207613306
157327,comment,157269,157269,0,0,sant0sk1,,,"He brings up a good point w/ documentation. Ruby's has left me wanting in more than a few situations.",1207613290
157326,comment,157269,157269,0,0,tx,,,"I'm going the opposite direction: after having done two non-trivial RoR apps I have a Pylons project on my hands right now. What can I say? Pylons is a baby Rails and Python is a baby Ruby. Language issues aside, Pylons' architecture seem to be a little cleaner than Rails, but even that advantage largely goes away with all these cleanups done in Rails 2.0.<p>Pylons/Python are more ugly and less complete than Rails/Ruby:<p>a) Ugliness: passing ""self"" to each method, deriving from Object all the time and having __foo__() method names is ugly, ugly, ugly.<p>b) Incompleteness: URL generation/routing and SQLAlchemy are too primitive and require more coding comparing to Rails. Stuff like form_for(Model.new) isn't possible as far as I can tell. Moreover, Pylons application requires a lot of bootstrapping to get going, setting up DB access is especially tedious comparing to ActiveRecrod's magic. Ralis' soft inforcement and helpers' assistance with RESTful controllers can't be seen anywhere in Pylons as far as I can tell. The list goes on: Pylons is more like a very very old Rails version distorted by ugly Python's object system.<p>Pylons probably looks pretty sweet to someone who's starting on it with a fresh head, but after two years on Rails I am less than thrilled to work with it. I may not be Pylons expert by now, but man... it's been two months and it still doesn't show me any love :-)<p>I love Python though. I like CPython implementation and quality of the libraries. Right now it's my language of choice for any stand-alone piece of software, but I try as hard as I can to avoid Python's object system.",1207613206
157325,comment,156848,156848,0,0,jmacd,,,"I know craig. I can promise you that SEO is no something he is going for.",1207613089
157324,story,,,1,0,bootload,"Angels the real VCs of Silicon Valley?",http://sramanamitra.com/2008/04/07/the-real-vcs-of-silicon-valley/,,1207613016
157323,comment,156928,157271,0,0,benreesman,,,"If there are libraries for doing biological computation written in Perl that do not have available bindings for other languages then that would constitute a reasonable excuse for using Perl. This would be just as true if the library was only available 1990s Visual Basic, and is just as irrelevant a factor in the assessment of a language as a whole.<p>Beyond the availability of some particular piece of code (in my case the tens or hundreds of thousands of lines of legacy systems that I lack the resources to replace) there is literally no excuse for using Perl or for inflicting its insanity on another hapless generation of web programmers.<p>All of Perl's admirable qualities (convenient object-literal notation, first-class functions, correct Scheme-style lexical scoping, powerful and seamless regular expressions, convenient string processing and Unix integration) are available in other languages. All of them, period. Many of these languages do not share Perl's unforgivable faults (sigils to dereference variable namespaces, contexts, typeglobs, references, dismal error handling facilities, confusing and nonstandard object facilities). The only way to use Perl to build a large system is to lean on Conway's methodology, which consists of a book that reads like an airtight indictment of Perl by one of its chief implementors and a collection of CPAN modules that demonstrate a brilliant mind with a perverse allegiance to a cult-like cause. Do sensible class hierarchies without Class::Std, I dare you. Do reasonable try-catch-finally exception semantics without Error.pm, I dare you.<p>try { ... } otherwise { ... } finally { ... }; # works\ntry { ... } otherwise { ... } finally { ... } # no trailing semicolon, oops I just clobbered your next statement and produced a catastrophic failure that even an experienced hacker could stare at for hours without seeing<p>It only takes about two hours reading 'Perl Best Practices' to realize that it's a brilliant book, written by a brilliant mind to attempt to make Perl a workable language for building large systems. It's a shame because he comes so close, but it turns out you can't rewire a language like Perl with libraries alone, even if only because you can't compel others to use them.<p>Perl is a language for expert hackers only, no one else should be allowed near it. And even expert hackers are working harder than they need to because there is a constant intellectual tax on the inconsistency of the language. It only offers a little bit more power than Python, and actually less than Ruby at a much higher cost.<p>There is no excuse for Perl in the 21st century, and you clearly have not spent time trying to use it to build large and complex systems or else you would feel the same outrage that I do than anyone would continue to contemplate it.",1207613005
157322,story,,,1,0,bootload,"The Complete Field Guide to Testing Firefox 3",http://lifehacker.com/376551/the-complete-field-guide-to-testing-firefox-3,,1207612990
157321,story,,,1,0,bootload,"All the news thatâ€™s fit to print on a map: The New York Times in Google Earth",http://google-latlong.blogspot.com/2008/04/all-news-thats-fit-to-print-on-map-new.html,,1207612925
157320,story,,,1,0,bootload,"Search engines warned over data",http://news.bbc.co.uk/1/hi/technology/7335359.stm,,1207612905
157319,story,,,1,0,bootload,"Facebook to Settle Thorny Lawsuit Over Its Origins",http://bits.blogs.nytimes.com/2008/04/07/facebook-to-settle-thorny-lawsuit-over-its-origins/,,1207612892
157318,comment,157269,157269,0,0,sah,,,"As someone who spends most of his time working in Python, the section called <i>One nice thing about Rubyâ€™s scoping</i> made me a little bit jealous.  I hate the way Python handles default parameters.<p>Also, I think glyphobet is a little hard on Ruby's range objects. He says:<p><i>Pythonâ€™s xrange() can also be passed around like a variable, but you test for membership with value in myrange instead of ===.</i><p>An important difference there is that ""value in xrange(10000)"" iterates to find the value, while ""(1..10000) === value"" does something O(1), like 1 <= value < 10000.  Range objects are handy, and different from list constructors like range() and generators like xrange(). But I agree that the "".."" and ""..."" syntax is weird.",1207612868
157317,comment,157269,157269,0,0,chaostheory,,,"He has some valid points, but I think a more accurate title is: ""Why I don't like Ruby""<p>""Migration to Ruby 1.9/2.0""<p>Won't python dev's have the same problem with Python 3000?<p>""Performance (or lack of)""<p>JRuby and Ruby 1.9/2.0 already address this issue<p>""Scoping""\n""Thereâ€™s more than one way to do it""<p>I don't see this as a weakness. This is more about style and preference, though I admit I like Python's philosophy better (Ruby code just looks more beautiful to me)<p>overall I still think it's well written criticism (at times I cringe looking at the horrible stuff people in the ruby community write)",1207612824
