ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
2240824,comment,2239471,2240345,0,0,moe,,,"<i>I've always found that nothing ever happens unless I do it myself.</i><p>I share this experience. Over and over again.<p>I've come to call it the 9-5 attitude. As a freelancer it's always a sobering experience to churn through a time-critical project (critical for <i>them</i>) and then have the remote guy drop out of skype at 6:00pm, every day, as if it wasn't <i>their</i> servers that are going to blow up if we don't get this done before the marketing-campaign on friday...<p>Of course not all companies are like this, but I've observed it even in (funded) startups where it's especially irritating.<p>I think it has a lot of do with a perception of ownership. As a freelancer I <i>am</i> my business and do my best to deliver high quality work.<p>As Employee #17 in someone else's company it seems to be more common to gravitate towards the path of least resistance; do just enough to keep those paychecks coming.",1298170782
2240823,comment,2240461,2240638,0,0,alexeiz,,,"> Kudos to his manager for actually looking at the code and recognizing the problem.<p>In the majority of the cases however you deal with managers who lost understanding of anything but simple language constructs because all they did since becoming managers is management and no code development at all.  At some point they start rejecting everything they don't understand.  They justify their position by arguments of code clarity and maintainability.  But they are misguided.  To recognize readable and maintainable code you actually need to practice programming continually.<p>I dealt with such managers.  They would tell me that a dozen of simple code lines are unreadable because they saw a new keyword they don't understand.  But they would accept a hundred of code lines that do the same thing in which they can recognize all keywords.  They wouldn't care about what the code actually does, nor they would care about what it takes to parse a hundred lines of spaghetti code.<p>It always fascinated me that some managers think they understand developing code better than developers they manage.  I've had the best experience with managers that trust their developers to make decisions and the worst experience with managers that try to micromanage.",1298170782
2240822,comment,2240603,2240603,0,0,fungobat,,,"I have heard that these top salaries get skewed because state employees tend to get a lot of ""back end"" compensation.  So if it's your last year of employment, you collect unused vacation and sick pay.  They also put in as much overtime as possible because it forces a higher pension due to averaging of the last few years of pay to determine pension amounts.  So you will see a guy who maybe made 70k getting 100k+ during his last one or two years.",1298170780
2240821,comment,2240461,2240787,0,0,InclinedPlane,,,"I suspect they were using .NET 1.x at the time, which would explain a lot.",1298170774
2240820,comment,2240794,2240794,0,0,vandalizeit,,,"It is naive to think that suicide experts would recommend better working conditions, creating unions, or investing in machines to perform mind-numbing tasks.<p>Suicide experts have been trained to treat the problem of suicidal thinking, not the potential causes. If someone is suicidal because of depression, they tell them to talk about it and take an antidepressant. They don't advocate to their boss that they would be better off if they got paid more so they could work less and had better food in the cafeteria.<p>What do you expect?",1298170756
2240819,comment,2240570,2240570,0,0,drinian,,,"Looks like he's still reading websites via an HTML-to-email gateway; good for him!<p>Interesting that he mentions Diaspora, but not GNU Social.",1298170736
2240818,comment,2240603,2240607,0,0,rdtsc,,,"> California bankrupt ?<p>Well at least now we know why ;-)",1298170736
2240816,comment,2239149,2239149,0,0,joe_the_user,,,"Both Open Source Desktop and web startups give a lot out for free. Web startups have massively succeeded at times. It don't see why an Open Source Desktop startup couldn't succeed <i>if</i> it started out with the aim to disrupt rather than to copy.<p>What I would like to see is someone formulate a plan for a series of small and/or more modular tools that could be used instead for office purpose <i>instead of</i> a massive office suite.<p>Open source seems doom to lose in a race to create Microsoft-style monster applications. And this isn't to deny the usefulness of MS Office or Open Office.<p>But an approach that could play to the strengths of Open Source would be needed if you want to <i>win</i>.<p>Creating a good browser is possible if not easy because the browser is modestly well-defined application.<p>Inkscape is the best open source GUI app I know of. Indeed it's app that isn't <i>bad</i>. As far as I can tell, a factor that let's it be good is that it's objective and domain are really well defined.<p>It would be nice to see people focus Open Development modular tools with a standard, well-defined domain. Those are the apps that the most enjoyable to program too.",1298170711
2240815,story,,,2,0,sayemm,"Only real artists ship ",http://www.ghostinthepixel.com/?p=24,,1298170675
2240814,comment,2240461,2240461,0,0,drivingmenuts,,,"This is a case where the author put his needs over the needs of the organization.",1298170624
2240813,comment,2239171,2240353,0,0,thurston,,,"That's not in the trunk yet ... it is queued.<p>There is also C#. It's been in testing for a while and there are a few known bugs. Should get worked out in the next release.",1298170622
2240812,comment,2240603,2240789,0,0,tedunangst,,,"Winning football teams fill stadiums (selling tickets), get better ESPN coverage (more money) and keep alums happy (bigger donations).  That position probably turns a profit when it's all accounted for.",1298170545
2240811,comment,2240603,2240764,0,0,drinian,,,"While I agree that the US has a serious imprisonment problem (jailing people for the wrong reasons), I have to believe that getting doctors to work in the prison system requires some significant financial incentives -- and most of these people seem to be medical professionals.",1298170542
2240810,comment,2240603,2240789,0,0,rdouble,,,"This is the case in almost every state.",1298170508
2240809,comment,2240197,2240591,0,0,d0mine,,,"<i>> Python makes simple things hard.</i><p>Some examples might help here.<p><i>> It has no switch statements</i><p>Python uses if/else, hashtables, OO constructs instead <a href=""http://www.python.org/dev/peps/pep-3103/"" rel=""nofollow"">http://www.python.org/dev/peps/pep-3103/</a><p><i>> no lambdas.</i><p>Python has lambdas, but their usage is discouraged in preference of explicit code blocks and named functions. You can use them if you must.<p><i>>It has significant white space</i><p>The indentation level of your statements is significant, but not whitespace in general <a href=""http://www.secnetix.de/olli/Python/block_indentation.hawk"" rel=""nofollow"">http://www.secnetix.de/olli/Python/block_indentation.hawk</a><p><i>> There is no simple way to drop down to the command line which means I can't easily use it to replace the scripting I have to do on a day in and day out purpose.</i><p>Some people find Python usable for system administration. There is a book ""Python for Unix and Linux System Administration"" (2008).",1298170504
2240808,comment,2240603,2240731,0,0,burgerbrain,,,"Somehow I find it hard to get bent out of shape about ""SENIOR BRIDGE ENGINEER"" making 103,000/yr.  That's <i>hardly</i> buckets of cash, particularly in CA.  There are plenty of much more absurd salaries listed right there for you to call out...",1298170497
2240807,comment,2240595,2240595,0,0,ekidd,,,"I've used BDD in a startup, and it increased my development speed. Here's what I did:<p>- I wrote the specs before I wrote the code. Essentially, I used Cucumber to define how users interacted with the site, and I used RSpec+Shoulda to define how low-level APIs worked. This rarely took longer than testing by hand: I just wrote something like ""When I click on 'Sign in', Then I should see 'You are signed in.'"", and that was it.<p>- I kept a watchful eye on the size of the tests. If the test-to-code ratio ever drifted far from 1:1, I figured out why and fixed it. A 3:1 or 5:1 ratio is a sign that your BDD/TDD process has gone <i>way</i> off the rails, at least in my experience. Common causes are (a) not using Shoulda to test models, and (b) relying on controller specs when you should be using Cucumber (or Steak).<p>- I used Cucumber for specifying user interactions, and RSpec for testing models. I only wrote controller specs for weird edge-case behavior that was a pain to test with Cucumber. <i>Edit:</i> And I virtually never wrote view specs.<p>- Refactoring was easy, because I could tear into the code and trust the specs to report any breakage.<p>I agree, however, about the speed of Ruby test suites. I <i>hate hate hate</i> waiting for specs to run. I get some mileage out of autotest and Spork, but not enough for my tastes.",1298170468
2240806,comment,2240603,2240789,0,0,drinian,,,"The justification is generally that these football programs pay for themselves with ticket sales, merchandising, and segregated fundraising. I know that at my private alma mater (Duke), Coach K makes many times the salary of President Brodhead and it's still a net positive income for the school.<p>Whether that's a business that universities should be in is a question for another day.",1298170445
2240805,comment,2240603,2240603,0,0,polymath21,,,"The reason why coaches like Tedford and Howland get paid so much is because the amount of revenue they bring in for their schools is worth much, much more. It's the same reason Fortune 500 CEO's get paid millions because the value a good CEO can create for their company is often worth hundreds of millions if not billions of dollars. So paying their CEO just a few million is a relative bargain. Same concept with D1 football and bball coaches.",1298170408
2240804,comment,2240053,2240727,0,0,Groxx,,,"1) Namespace complaints pop up every time JSON debates pop up.  XML handles them two ways, and their equivalents, fully within what I already defined:<p><pre><code>  ns:node => {#:""ns:node""}
  xmlns=""http://www.w3.org/1999/xhtml"" =>
    {""xmlns"":""http://www.w3.org/1999/xhtml""}
</code></pre>
ie, it's already handled.  Namespaces are a parser's job for interpretation, the <i>notation</i> is simple.<p>2) The point wasn't to say JSON is better than XML - apparently you didn't read my second sentence.  I said they're <i>trivially identical</i> - they're the <i>same thing</i>, with the <i>same capabilities</i>, but with minimally different ways of representing the same data.  The point is that claiming XML can do X because it's XML and JSON can't because it's not XML is complete nonsense.  All the schema / XSLT / etc <i>tools</i> are just that - external tools, algorithms to run against data, which have nothing to do with how the data is transmitted.",1298170403
2240803,comment,2240534,2240534,0,0,yaxdotcom,,,"Think about the guys in any prison movie: Take time to plan your escape.<p>1) Instead of digging a hole with stolen spoons in the prison yard, learn to program. ""Rails for Zombies"" (the tutorial) or Michael Hartl's book can substitute for stolen spoons. Build a personal pet project or find a way to contribute to an open source project. It'll be more fun than digging a hole in the prison yard. And you'll develop a marketable skill that'll get you a job so you don't end up back in prison.<p>2) While you are developing programming skills, get yourself transferred to a different prison where you can make an easier escape. You can get into any community college in the Bay Area (Laney College in Oakland, for example). Or try SF State or CSU-Hayward. Going to college in the Bay Area will give you a base and you can make your escape to a startup from there.<p>3) Just like the guys who volunteer in the prison library to get in position for their great escape, once you're in the Bay Area and enrolled in a local college, volunteer for all the startup events and conferences (seems like you've already done that with the TechCrunch events). It'll be a lot easier to ask people about jobs or hookup with a cofounder if you can say you're already living here and have got some useful skills.<p>You're smart to recognize that you need to escape your current environment to move ahead in your life. Just make the change in a smart way. Or you'll be stuck in solitary confinement for a long time.",1298170398
2240802,comment,2240461,2240574,0,0,tzs,,,"IP in Mono falls into several categories.<p>1. There is stuff covered by the ECMA/ISO standards. This is covered by the Microsoft Community Promise, which is legally binding. This stuff is safe from Microsoft.<p>2. There is a lot of .NET stuff that Microsoft has released under the Apache 2 license, which includes a patent pledge. If any of this stuff is implemented in Mono, it is safe.<p>3. There is stuff in .NET that is not covered by the standards, and has not been released by Microsoft under a license that includes a patent pledge. Mono has independent implementations of the interfaces of some of these things. There is no Microsoft patent pledge covering these parts, and Microsoft may have patents on their own implementations. These patents would cover specific methods used in the implementation, not the interface.<p>The risk from #3 is small. Most important, it is about the same as the risk if you use that functionality in a non-Mono system. For example, I believe that there is an XML parsing library included in category #3. If Microsoft has a patent covering some particular technique of implementing an XML parser, there is no reason to believe that the people who implemented Mono's XML handling are any more likely to have infringed it than the people who implemented Java's XML handling, or Ruby's XML handling, or Python's XML handling, and so on.<p>Also, most of the things in #3 are things specifically related to Windows programming, so you'll only find them in .NET programs that were written for Windows. If you are writing for Linux, you don't need those things. Even if you want your programs to run on both Windows and Linux, you can do that without using the category #3 stuff. For instance, instead of using WinForms, use GTK#.<p>If Microsoft did decide to sue someone over their patents that cover the category #3 items that aren't Windows-specific, it is doubtful they would go after Mono. Microsoft has done enough to support and encourage the development of Mono that they would have a big estoppel problem to surmount if they wanted to sue over Mono. It would make a lot more sense to sue over Java or Python, where they would not face the estoppel issues. Remember, as I noted earlier, the category #3 patents are as likely to be infringed by those as Mono.",1298170246
2240801,comment,2240595,2240595,0,0,grandalf,,,"A few things I've noticed:<p>Developers should not be paid to write tests, only code.  If the tests are worthwhile, then they'll get written anyway.<p>I've seen some developers who write lots and lots of pointless tests... hmm does Model.find(:all) return all the items in the test db?  Ok one passing test, does :first return one?  Ok, another passing test. I'm not exaggerating.<p>If your test codebase is full of stupid tests that are actually testing your framework, and if your test suite takes 5 minutes to run, maybe that's why your team has so much time to read HN.<p>Good, useful tests will test the most critical 10% of the codebase at most.  The ""money"" paths that are critical to your core business.  Things like credit card processing, account signups, password resets.<p>Many of the critical 10% of tests may very well be integration tests, not unit tests.  There is no reason to write unit tests if the big problems would be caught by an integration test before a deploy.<p>If your testing ideology makes all this sound like hogwash, then you probably work in a cubicle where it does make sense to do test your codebase more broadly.",1298170210
2240800,comment,2240595,2240595,0,0,grumpycanuck,,,"In the presentation shown at <a href=""http://www.startuplessonslearned.com/2008/09/customer-development-engineering.html"" rel=""nofollow"">http://www.startuplessonslearned.com/2008/09/customer-develo...</a> (specifically the last slide where he talks about the Five Why's system) it seems to me that the guru of Lean Startups is a advocate of automated test suites, and therefore a believer in TDD.",1298170198
2240799,comment,2240595,2240687,0,0,petercooper,,,"<i>TDD is just not as important as getting a product out the door.</i><p>There's not always a ""do TDD, develop slowly"" vs ""do no TDD, develop quickly"" dichotomy.<p>If you're doing it right, TDD should speed you up. It adds some guaranteed extra time to your plans <i>up front</i> but significantly reduces all of the hidden costs of wasting hours debugging bugs that unit tests would have picked up.<p>So I might know developing a particular app might take 10 hours without tests, 15 hours with tests, but if I waste more than 5 hours fixing a myriad of bugs, the TDD approach still wins. (The constant reward cycle is an important psychological factor too, though, even if the times are equivalent.)",1298170161
2240798,comment,2240595,2240595,0,0,samratjp,,,"It just depends on what you want to test for. I find balance in testing for the most important security features such as authentication and stuff that'll most likely change very little.<p>You can speed up RSpec so much by offloading it to Spork, a test server of sorts that loads your environment.",1298170145
2240797,comment,2240461,2240739,0,0,mquander,,,"That's a very optimistic error message!<p><pre><code>  error: conversion from std::_Rb_tree_const_iterator<std::pair<
  const std::basic_string<char, std::char_traits<char>, std::allocator<char> >,
  std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >
  to non-scalar type std::_Rb_tree_iterator<std::pair<
  const std::basic_string<char, std::char_traits<char>, std::allocator<char> >,
  std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >
  requested</code></pre>",1298170119
2240794,story,,,1,2,gsivil,"Apple Touts Suicide Nets In Supplier Responsibility Report, But Changes Little",http://www.cultofmac.com/apple-touts-suicide-nets-in-supplier-responsibility-report-but-changes-little/81964,,1298170033
2240793,comment,2240603,2240603,0,0,abhikshah,,,"The table needs context. How much could the same person make in private industry for a similar job?",1298170001
2240792,comment,2240595,2240741,0,0,petercooper,,,"A common problem at the moment is RSpec being slow with Rails 3 and Ruby 1.9.2. If you do things the ""normal"" way, Rails ends up having to load twice and you're guaranteed to spend at least 10 minute looking at nothing.<p>The solution is to use Spork to have a Rails test environment running permanently (it also does caretaking between sessions) and then RSpec will access it over DRb. Couple this with a good .watchr file to run only the relevant specs when you update them and you get very quick RSpec tests. It's a bit of a pain to set everything up but it's worked great for me.",1298169986
2240791,comment,2240461,2240606,0,0,jimbokun,,,"You seem to have read an article about someone complaining about C#.<p>The article I read was about someone complaining about not being allowed to use all the features in the language selected for the project.",1298169949
2240790,comment,2240762,2240762,0,0,j_baker,,,"This was very obviously a rant where the author was in a bad mood.  I think some hyperbole can be forgiven.",1298169922
2240789,comment,2240603,2240603,0,0,sudonim,,,"Whoa. A college football coach is the highest paid california state employee? Seems like california is focused on the wrong things.",1298169902
2240788,comment,2240595,2240752,0,0,wccrawford,,,"@pragdave recently gave a keynote speech at the Magic Ruby conference and made a big point of saying ""Agile is not a noun.""  Agile isn't about subscribing to practices and then writing everything in stone.  It's about doing that works for you situation.<p>So don't blame 'Agile' for being inflexible, blame the people who are using it for not actually being it.",1298169862
2240787,comment,2240461,2240461,0,0,S_A_P,,,"OOOH I was so wanting to tell the OP<p>What is so hard about this???
//assume some sorta IEnumerable derivitive
IEnumerable<foo> bar = new IEnumerable<foo>() { obj1, obj2, obj3, obj4, ...};<p>var accumulator = bar.TakeWhile(x => x.property == someValue);<p>but then I saw the .NET 2.0 timeframe.<p>But even with .NET 2 you had generics which makes things pretty easy.  But then again, he/she is ranting so I should just ignore him/her.<p>It doesn't matter what language you are using, if you cant write something that is legible to solve the problem, think about it more.",1298169860
2240786,comment,2239883,2240097,0,0,mechanical_fish,,,"I picked up a couple of travel books at my local 20%-off going-out-of-business Borders today. Hefted them in my hand. Then looked them up on my iPhone and found that their Kindle/iBooks price was 50% lower than the Borders retail price.<p>So I left the store with no books, but with a pretty good idea of why Borders is bankrupt.<p>A wistful day to be sure. I remember twenty years ago, when the arrival of Borders in my midwestern city was akin to a religious experience.",1298169825
2240785,comment,2240226,2240456,0,0,ojbyrne,,,"Side rooms are a saving grace. I went to a Techcrunch hackathon (and I shall never go to another) where we were told that nobody could use the side rooms - we all had to sit in the noisy main hall area. Obviously the PR opportunity was the primary motivation behind the hackathon.",1298169791
2240784,comment,2240595,2240595,0,0,petercooper,,,"Considering how many hours I've saved not having to ""debug"" after drinking the TDD koolaid, my answer is no.<p>The problem I notice, though, is many people will either TDD the ""right/official"" way or not at all and that's a false dichotomy. If a particular type of testing is slowing you down or causing you to be less productive, don't do it! But stick with the tests and processes that <i>do</i> allow you to be quick but without abandoning testing in favor of the old ""code and pray"" approach.<p>For example, on a recent project I built it almost entirely in the models only (using TDD) before even hitting controllers or views. It only took a few days to tack those on at the end and I didn't bother doing any testing of them beyond some cursory ""make sure the site generally works"" integration tests. (I see the value in controller and view tests but.. well.. they'd have slowed me down and the models were far more important.) In a contrast to that, I have a 5+ year old project I <i>retroactively</i> added lots of integration tests to. The models are untested but at least I know if a change screws the app up in a big way because so many different use cases are tried in the integration tests.<p>TLDR: With TDD, stick with the stuff that works and tone down the stuff that doesn't. Don't feel you have to do things the official/""cool"" way - come up with your own processes.",1298169738
2240783,comment,2240081,2240366,0,0,trevelyan,,,"I'm in the program and these taxes are not an issue for anyone. Don't let it discourage you from applying. The business environment is good. And consider that:<p>* companies are taxed on profits not revenues (!!)
* legitimate expenses made to foreign companies are not subject to the fees you describe
* income earned abroad by new residents to Chile is not taxed for three years  (!!!)<p>Practically, start a foreign-incorporated business to collect payments internationally and start a Chilean company to hire local staff and cover development costs in country. If your Chilean business makes such an embarrassing amount of money that you cannot spend it, then congratulations! You can spend some of your profit to restructure.... :)",1298169723
2240782,story,,,2,1,Steven-Clarke,"Startups 1997-style, funny: ""Talented Developers Wanted""",http://groups.google.com/group/wpi.students/browse_thread/thread/d4bcb2c985b00161/8ad728774d8e8fc5?q=%22Specular+Dreams%22#8ad728774d8e8fc5,,1298169700
2240781,comment,2240595,2240595,0,0,akronim,,,"<p><pre><code>    I sometimes have a difficult time writing and passing tests...
</code></pre>
That sounds like a design issue - if you don't design the code to be testable you'll probably find it hard to test. Even programming <i>in the small</i> e.g. at the method level, you should be thinking ""how will I be able to test this""?",1298169675
2240780,story,,,133,108,gsivil,"Why Nobody Can Match the iPad’s Price",http://www.wired.com/gadgetlab/2011/02/ipad-price/,,1298169638
2240779,comment,2240461,2240704,0,0,gnosis,,,"Whether this ""Promise"" is actually worth much depends on much more than just the question of its legal legitimacy, as you'd have learned if you actually bothered to read the articles.<p>But, as far as that particular issue is concerned, as the techrights article points out,<p><i>""It may become legally binding ... if used as a challenge in court. But of course it does actually need to be tested in court /first/.""</i>",1298169624
2240778,comment,2240595,2240595,0,0,jenrawson,,,"I can't believe I came across this post. I have been fascinated by a podcast interview with Kent Beck, the creator of TDD. I've been listening to it for two days. The interviewer asks Kent Beck: Is there a time in a start up's life where TDD is inappropriate? Kent Beck responds: Yes. There is a time when you are trying to generate a lot of ideas. You need to think of a lot of ideas so that you can find a good one. In order to do that, you have to work fast- many of the things you build, just won't work out. (Or rather, you lose interest in them) During this phase of a project TDD can slow you down. Those are his words, not mine. Although… keep listening. Kent has quite a bit more to say on the topic.<p>Find it here (scroll down to the link for ""Show #74"").
<a href=""http://startuppodcast.wordpress.com/2010/07/10/show-74-kent-beck-on-lean-startups-tdd-and-startups/"" rel=""nofollow"">http://startuppodcast.wordpress.com/2010/07/10/show-74-kent-...</a><p>Or, subscribe to the show here: <a href=""http://itunes.apple.com/podcast/the-startup-success-podcast/id293268482"" rel=""nofollow"">http://itunes.apple.com/podcast/the-startup-success-podcast/...</a>
Look for episode 74.",1298169591
2240777,comment,2239836,2240261,0,0,T_S_,,,"The carrots assume the government knows which activities to undertake. A tax allows individuals to figure out what's best.",1298169586
2240776,comment,2240209,2240425,0,0,angus77,,,"Wouldn't adding yourself be a conflict of interest?<p>Convince someone else to add you.",1298169552
2240775,comment,2240053,2240754,0,0,Groxx,,,"I gather you haven't done much jQuery coding.  That's equivalent to:<p><pre><code>  $(""html div.title img.icon"").attr(""src"")
</code></pre>
The last .attr(""src"") is purely because jQuery always deals with a node / a collection of nodes.<p>You can also do arbitrary attribute searches:<p><pre><code>  $(""html div[class~='title'] img[src*='google']"")
  // ""~="" == ""contains word"" - space-delimited to match html classes
  // ""*="" == ""contains substring""
</code></pre>
<a href=""http://api.jquery.com/category/selectors/"" rel=""nofollow"">http://api.jquery.com/category/selectors/</a>",1298169533
2240774,comment,2240765,2240765,0,0,brennannovak,,,"Things like this make me smile on grey days!",1298169426
2240773,comment,2239018,2239581,0,0,ars,,,"Hydrocarbons have more or less the same energy per gram, and sugar and kerosene are both hydrocarbons.",1298169361
2240772,comment,2240595,2240747,0,0,ekidd,,,"<i>However, I don't think there is much refactoring with bootstrapped, pre-revenue startups.</i><p>At our startup, we learned a lot during the pre-revenue stage, and twice realized that our basic architecture was stupid, wrong, and overly complex. (That was my fault, by the way.)<p>Both times, I took 3 or 4 days and savagely refactored our product, deleting massive amounts of code. When I was done, it was much easier to make changes.<p>Mind you, in the end, this wasn't enough to save us: We ran up against the reality of a short runway and a long enterprise buying cycle. But our product was very sweet. :-)",1298169353
2240771,comment,2240495,2240495,0,0,jreynolds,,,"So, this is like a PDF reader for a single PDF, converted into an ""app""?",1298169272
2240769,comment,2238661,2240608,0,0,rdtsc,,,"> My point is that abortion is a form of population control and our government sees it as such, but this rarely gets talked about.<p>I wonder where is the separation between those that understand the issue at hand (let's say ""population control"") but know that they will never be able to frame it as such, and those that don't know the issue and are just bouncing around between the allowed frame limits?<p>In other words this seems to imply there is a group of people in the government that meet and discuss these issues ""off-the-record"" so to speak, and they all sit around and ponder ""How would we curb population growth?"".  Presumably NSC is doing this as you pointed out.<p>However I feel there is tinge of conspiracy theory here as well. I can't imagine there be this group of very intelligent and informed governmental group that is also at the same time able to keep it secret and is able to exercise control. They would have to communicate their desires or commands to IMF, World Bank, UN, branches of the US Govt., somehow determine who gets elected and who doesn't etc. It is not impossible but somehow I don't quite believe it yet.",1298169236
2240768,comment,2240452,2240452,0,0,apsurd,,,"The lightbulbs are not readily apparent ""like"" indicators to me. I accidently clicked on one.<p>Nicely done, as I'm using the site I'm finding a lot of nice touches. I like the tagging UI. As stated the site is a bit text heavy. Overall very nice job though. Look forward to seeing how it goes. I posted a spark =)<p>Best of luck.",1298169222
2240767,comment,2240461,2240736,0,0,gnosis,,,"""Argumentum ad Hominem: the fallacy of attacking the character or circumstances of an individual who is advancing a statement or an argument instead of trying to disprove the truth of the statement or the soundness of the argument.""",1298169213
2240766,comment,2240534,2240534,0,0,moollaza,,,"cj, as a fellow 19 year old University student I kind of know how you feel, especially with respect to your friends lacking ambition. If I could graduate now and get into real work I think I would really enjoy it. Some of the classes I have to take, or the work I have to do seems really boring and irrelevant. For example we were required to take a course on Probability which was taught by a terrible prof and through the whole semester all I could think about was working on something real and exciting.<p>However, I'm studying Computer Science (my program, Business Informatics,  is actually half CS and half business) and I'm very glad I chose this program because in one of my first classes I met another student who is just as passionate and driven as I am. We've become great friends and recently started working on some software we hope to work on over the summer and launch.<p>So I was going to ask if you've considered switching from Neuroscience to CS? Or perhaps consider dropping in on some CS classes? You probably stand a better chance of finding like-minded students there. Who knows, there could be someone just like you eager to work on software and get into startups.<p>Just my two cents...",1298169190
2240764,comment,2240603,2240603,0,0,alsomike,,,"A lot of these salaries are in the Corrections department. The US didn't get to be the world's #1 jailer for free, guys!",1298169172
2240763,comment,2240053,2240482,0,0,nivertech,,,"The better schema for JS - should be staticly typed classes/objects.<p>> though note the pesky X in AJAX...
it also sometimes called AJAJ",1298169128
2240761,comment,2240595,2240752,0,0,DanielBMarkham,,,"What I find is that I teach agile as being results and value driven first, everything else doesn't matter. All the stuff like TDD and BDD are just canned versions of patterns other teams have found useful -- each team can take them or leave them (assuming that they understand them first -- many teams are all too willing to ditch things that they have no idea what they are talking about. Helping teams make these decisions is a big part of coaching)<p>The fascinating thing is that once I teach that it's all flexible, guess what? People come in and make it all rigid and orthodox anyway. It's not <i>Agile</i> that's the problem, it's the people that, over and over again, just beat the living hell out of agile trying to make it into some rigid 1-2-3 formula for success. No matter how I beg and plead with them not to do this, still they persist. Strange.<p>I'm left with the conclusion that the basic problem in software development is people's fear of having a truly unpredictable, flexible, and open way of working -- even the agile adherents (especially the agile adherents, it seems). That's simply too much for some folks. They'd rather have a fixed list of things to do each day, even if they know the list is full of crap, they are taking ten times longer than they should, and they are doing busywork things that provide no value. As an example, I've had teams be very successful keeping their list of things to do on post-its on a wall. Then I leave for a year and come back and they've got some kind of spreadsheet monstrosity that has hundreds of items nobody can remember. Nobody likes the new system (except for perhaps the person who runs it, who will also admit that they don't like it, but only in private), it doesn't fit their needs, it's a huge time sink, yet they don't know how to make it stop. They are prisoners of their own need for fixed systems and over-engineering everything. This is because somehow they feel by over-engineering things that they make them ""safer"". Even though at some level they realize that this is not the case at all. Very strange.",1298169096
2240760,comment,2239162,2239162,0,0,tychonoff,,,"Trend Micro (Titanium) says this is a dangerous site.",1298169083
2240759,comment,2240053,2240640,0,0,Groxx,,,"><i>JSON parsers don't</i><p>How could they <i>not</i>?  It's JavaScript <i>Object Notation</i>.  Objects which refer to sub-objects form a tree.<p>As to CSS selectors for JSON: the same functionality can exist, because as per above they have literally identical capabilities for representing data.  I'll readily admit though, I've not seen one (though one of my side-projects could probably be tweaked to do this; maybe I will).<p>I have nothing against XML.  It's useful, widely supported, and has quite possibly more tools than any other interchange format.  The problem isn't with XML, it's with the inconsistencies of (and between) those tools that make the whole interchange part of XML with specs (the only really useful part - it's a horribly wasteful storage format) almost a moot point.  And due to legacy systems, it's unlikely to change any time soon, or perhaps <i>ever</i>.<p>So a clean break is likely necessary to really improve things.",1298169044
2240758,story,,,1,0,boh,"Judge Rules Against China; 'Green Dam' Suit Heads to Trial","http://www.pcmag.com/article2/0,2817,2380614,00.asp",,1298169000
2240757,comment,2240595,2240730,0,0,jamesjyu,,,"A big +1 to that. Most of the successful startups I know have literally 0 tests for the first few years while they iterate.",1298168998
2240756,comment,2240053,2240569,0,0,Groxx,,,"I'd imagine it depends on your parser, and if non-browser JSON gets more prevalent it'll probably be addressed.  JSON has no format specified that I'm aware of, but some browser-like parsers will handle things like this:<p><pre><code>  {""key"":""value"" // comment
  or 
  {
    // comment
    ""key"":""value""
</code></pre>
Which I find wholly acceptable (though poorly supported).",1298168997
2240755,comment,2240595,2240730,0,0,Lewisham,,,"<i>TDD/BDD assumes you know the problem and are coding to create a solution. In startups, however, you do not know the problem.</i><p>I think this is where these posts on HN always end up talking at cross-purposes. ""Startup"" can mean many different stages. I definitely agree with this. It's one of those things where when I think ""startup"" I think ""they've got a problem, they're solving it"" whereas some people read it at that very early stage instead. TDD doesn't suit that stage, because, like you said, you don't even have an idea of what success looks like.",1298168948
2240754,comment,2240053,2240382,0,0,nivertech,,,"What in jQuery is a chain of multiple selectors and filters,  can be done using single query in XPath, i.e.<p><pre><code>  ""document()/html//div[class='title']//img[class='icon']/@src""</code></pre>",1298168891
2240752,comment,2240595,2240730,0,0,bdclimber14,,,"I've always thought it ironic how inflexible agile was, at least based on the perception from agile purists I'm exposed to.",1298168831
2240750,comment,2240595,2240595,0,0,edderly,,,"""Refactoring breaks a lot of test cases (mostly with renaming variables).""<p>this seems to be the easiest thing a refactoring tool would handle. Why wouldn't you re-factor your tests at the same time as your code?",1298168815
2240748,comment,2240595,2240709,0,0,Lewisham,,,"<i>There's also more payoff for your tests over time. The longer your project lasts, the more those tests pay dividends. Even they seem painful no, they are an investment towards maintainable code in the future.</i><p>I think this is the most important thing. Tests are an investment, but once you've done them, every time you run them from that point on is free. The amortized cost keeps getting better and better.<p>Once you pull in a Continuous Integration engine, or even turn it up to 11 and implement continuous deployment, those tests really do pay for themselves. It's just intimidating in the short-term.<p>Whenever I've gone rogue and thought ""Sod it, not today"", it's invariably bitten me on the ass twice over the pain it would have been to write them.",1298168725
2240747,comment,2240595,2240709,0,0,bdclimber14,,,"I agree with your points, and I think my skepticism is because most of my exposure to BDD is from purists.<p>I worked with a developer who was pulling his hair out because he couldn't figure out how to <i>test</i> the SMTP emailing with gmail. We all knew it worked, but he spent a few days figuring out the test cases.<p>A couple points though:<p>- Ruthlessly refactoring is huge with TDD. However, I don't think there is much refactoring with bootstrapped, pre-revenue startups. Changes are generally functionality changes.<p>- Payoff over time. With very early stage, I can imagine that shipping a day early is worth a high interest rate of payoff later.<p>- Solo hackers don't have to worry about other developers, again at the very early stage.<p>Overall, maybe TDD/BDD doesn't make sense for very early, pre-revenue startups, but instead should start after funding or product-market fit where you need all these things?",1298168715
2240746,story,,,1,0,ricardovich,"Ruby on Rails Checkboxes, an easy and transparent way",http://www.steele-agency.com/2011/02/ruby-on-rails-checkboxes-an-easy-and-transparent-way/,,1298168707
2240745,comment,2239471,2239471,0,0,palewery,,,"You don't know the value of employee X until after he has agreed to compensation and joined the company.  If he joins and never completes a single task he is assigned, then yes the founders were 1000x more valuable.   If he joints and is able to find 10x more customers than you had before than no he is not 1000x less valuable.",1298168687
2240743,comment,2240534,2240534,0,0,jp,,,"Easier to get laid in college than in SF. And if you do get a startup job, they might cut you first to pay for some new espresso machine or something like that. Employment security is probably non-existent.<p>I am from another country, so this might be wrong, but SF feels like a playgroud for middleclass valley-dad-pays-for-shit children. Plus lots of homeless people and asian girls in cowboy hats.",1298168653
2240742,comment,2239111,2239111,0,0,peteforde,,,"Have fun in California, but when you come back consider taking a hard look at what you can do to make an awesome startup scene in your own backyard, similar to the amazing tech communities in Toronto, Montreal and Vancouver.<p>The key detail is that social fabric does not weave itself. Toronto's tech scene kicks ass ONLY because of the tireless efforts of folks like David Crow, Leila Boujnane, Joey ""Accordion Guy"" de Villa and more than I can ever remember.<p>Specifically: there was no tech community beyond some lame .NET user groups in Toronto when I moved here 12 years ago. Now we're probably over-saturated with opportunities to network and talk about startups... all it takes is effort, outreach and a willingness to help people.<p>One tip: open your office to visiting hackers. It's a great way to send a clear message to the world that Winnipeg takes the community aspect of startups seriously.",1298168608
2240741,comment,2240595,2240595,0,0,gnubardt,,,"If RSpec is too slow to wait on you could use autotest, which automatically runs tests when a file is saved.  There's also a plugin for it that uses growl/libnotify to display the results.",1298168564
2240739,comment,2240461,2240615,0,0,gnosis,,,"The main thing that make programming in statically typed languages painful isn't the additional type declarations (which, as you rightly point out, need not even exist in languages that do competent type inference), but with the constant need to wrestle with the type system to get your code to compile at all.<p>This is made doubly painful by the incredibly obtuse error messages spat out by some compilers, like:<p><pre><code>  This expression has type   ((int * int) * string * string * channel) list
  but is here used with type ((int * int) * string * string * channel) list
</code></pre>
or even more baroque and confusing monstrosities.<p>Programming in OCaml made me feel like I'd need to take years of type theory classes in order to feel really comfortable in the language.<p>In comparison, programming in Lisp is a joy, and very easy.<p>But, in defense of the modern statically typed languages like OCaml and Haskell, I'll have to admit that once you've finished wrestling with the type system and actually gotten your program to compile, you've probably eliminated whole classes of bugs that might still exist in a similar dynamically typed language program.  Not to mention that it will save you the writing a ton of unit tests.",1298168545
2240738,comment,2240502,2240502,0,0,CoreDumpling,,,"<i>The interpreter we wrote in that actually wasn't written for Emacs, it was written for TECO. It was our text editor, and was an extremely ugly programming language, as ugly as could possibly be.</i><p>For proof, see the source code here: <a href=""http://pdp-10.trailing-edge.com/mit_emacs_170_teco_1220/index.html"" rel=""nofollow"">http://pdp-10.trailing-edge.com/mit_emacs_170_teco_1220/inde...</a><p>It is certainly heavily annotated for good reason.",1298168532
2240737,comment,2240603,2240603,0,0,bugsy,,,"Hm, getting down to page 2500 of results, we see that civil engineer salaries are going down each year.",1298168512
2240736,comment,2240461,2240641,0,0,tzs,,,"You lost all credibility by citing techrights (AKA boycott novell).",1298168507
2240735,comment,2240226,2240226,0,0,pamelafox,,,"I've been to many hackathons both in the SF Bay area and in the Sydney area, and I find the Sydney ones to involve much more hacking.<p>I think many people in the tech scene in the SF bay area are there because they want to get in on that scene, because it's the hot/$$ thing todo, but they don't actually have tech skills - so when they come to tech events, they either find a way to not hack, or they find someone to hold their hand through hacking.<p>We don't have that problem in Sydney. Basically everyone who is in the tech scene is in it because they truly like tech and have the skills. (Or they will try damn hard to develop the skills themself.)<p>Generally, I find we have a higher quality of developers at free tech events in Sydney than in San Francisco for that reason. I was pretty happy when I moved from SF to Sydney and realized that I no longer needed to figure out how to filter the pseudo-techs from the Google tech events that I organized.",1298168505
2240733,comment,2239288,2239608,0,0,cabalamat,,,">> And I prefer my software to remain open no matter who works on it or distributes it. So, I use GPL.<p>> BSD license accomplishes that just fine. BSD licensed code has been taken, extended, modified and used in proprietary products for decades, and yet the original contribution remains open.<p>But the modifications might not do, which is what GPL proponents care about. To me, the GPL is like saying ""I'll share with you, if you share (your changes) with me"".<p>This is not to say that GPL is better than BSD, or that either is better that a proprietory license; they're each designed to do different things. One might as well argue about whether a car a plane or a boat is the best form of transport.",1298168470
2240732,comment,2240603,2240731,0,0,amock,,,"That's because by default it only shows salaries over $100,000.",1298168437
2240731,comment,2240603,2240603,0,0,rick888,,,"The lowest salary on the last page is $103,000<p>It's no surprise that the state is bankrupt",1298168362
2240730,comment,2240595,2240595,0,0,DanielBMarkham,,,"I'm an agile coach and startup junkie.<p>TDD/BDD doesn't fit the mold of startups. Here's why:<p>TDD/BDD assumes you know the problem and are coding to create a solution. In startups, however, you do not know the problem. Sure, you can <i>imagine</i> some kind of customer that might want some kind of code to do something or another. But that's all pipe dreams. You have no idea if method X is useful or not. Sure, you might know if method X meets the requirements of your imagination, or your architecture dreamed up in your imagination to deal with your imaginary customers with their imaginary problems, but you really don't know.<p>So it's a waste of time. Startups are all about providing value -- not flexibility, not bug-free code, not code you can hang on a wall and take pictures of. Value. If you want to be the guy who can make business solutions happen, the guy that customers can come to with any problem and you can make it all happen, you need to bone up on this stuff. But in the business world, you've already got the money, your job is to make the solution happen. In the startup world, you don't have the money yet. Big difference. Big, big difference.<p>Look at it this way: 19 out of 20 startups fail. That means that odds are that you will never see this code again. You'd be a fool to spend any more time on it than absolutely necessary. But the math works out completely differently in the commercial world, where most things you write stay around forever.<p>What I found over and over again with Agile is teams and individuals buying into the marketing/herd mentality of agile and forgetting about the adaptive/iterative nature. Everybody wants to either use a recipe book or just repeat their last project that they thought was really cool. ""True"" agile means ditching whatever isn't working. Pronto. There are no sacred cows. Everything is on the table.",1298168359
2240729,comment,2240452,2240692,0,0,netmau5,,,"Good points, I need to present the value proposition more clearly.",1298168352
2240728,comment,2240534,2240669,0,0,zaidf,,,"<i>Being an HN member does not grant you magical survival abilities.</i><p>There is nothing magical about a large percentage of HN's members possessing a valuable skill(ie. programming, hustling).<p><i>Also, despite being an awesome place to be, SF is expensive to live in.</i><p>Agree. But there are enough hacks around it. Dining out too expensive? Cook at home. Apartment too expensive? Commute to SF on BART or get an apartment in the Tenderloin. etc.",1298168253
2240727,comment,2240053,2240273,0,0,fizx,,,"Two comments:<p>1. You forgot namespaces.  Gotta put SVG in your XHTML.<p>2. By the time you've done your translation, you've created json that is uglier and harder for a human to visually parse than the equivalent xml.<p>It turns out that json is useful when you don't want xml's features.  Trying to shoehorn every one of xml's features into json creates another brand of hell.",1298168246
2240726,comment,2240595,2240595,0,0,pwim,,,"It sounds like the issue is with how you are writing you tests. For instance, you state ""refactoring breaks a lot of test cases"". As the normal TDD cycle is test-code-refactor, refactoring shouldn't break your tests. Without seeing your actual code, it is hard to give you advice, but it sounds like your test cases are too coupled with the internal workings of your code, rather than testing the interface.",1298168204
2240725,comment,2238891,2239353,0,0,jonursenbach,,,"Hadn't heard about Greplin before. Interesting.",1298168155
2240724,comment,2240534,2240713,0,0,mindcrime,,,"<i>Hah! Me? Too cautious? I would never have listened to my own advice, but then I had a job in hand and money saved, which seems an entirely different scenario than the OP.</i><p>:-)<p><i>How, also are you too old? Go to your pitch meetings like I plan to: I will be surrounded by octogenarians in overalls and Victorian wimples! Social camouflage!</i><p>Oh don't get me wrong... <i>I</i> don't think (or at least acknowledge) being too old, but I am cognizant that there is a certain sort of bias towards youngsters in this field.  I'm still thrashing away like mad on my project, and I'll be pitching it as aggressively as I possibly can (or harder) when the time comes.  If anything, in my case, age is just making me hungrier exactly <i>because</i> I have that ""I haven't done anything yet"" feeling.",1298168128
2240723,comment,2239162,2240171,0,0,frou_dh,,,"I do that with the TWiT podcasts because they're twice the length they should be and tiresome love-ins half the time.",1298168124
2240722,comment,2240595,2240595,0,0,famousactress,,,"I've done TDD to a variety of degrees on different code bases, with a variety of success. I think when you achieve the right rhythm and approach for your particular code base and team, TDD can make you go faster. If it's not helping you build quality software quicker than you could without it, don't do it.<p>A number of these points aren't familiar to me (trouble finding testing for deleted code? harder to modify tests for changing requirements than start from scratch? Renaming variables is hard?). These comments make me wonder if you've been treating your tests the way you treat your code.<p>When TDD has worked best for me it's because I've spent a lot of time thoughtfully putting some organization into my tests, making sure they're ridiculously fast to write, and ridiculously fast to run. Your source code becomes slave to your tests, that's the whole point. The fact that your tests are in your way, suggests that you're doing it wrong. If you were doing it correctly, and TDD was failing you.. I think the symptom would be your operational code getting in the way instead.",1298168071
2240721,comment,2239288,2240633,0,0,SwellJoe,,,"That's ridiculous. You can't just change the meaning of words to suit your opinion!<p>From the dictionary (I would specifically point you to #3, in case you're feeling too lazy to read all of them):<p>mor·al   
[mawr-uhl, mor-]
–adjective
1.
of, pertaining to, or concerned with the principles or rules of right conduct or the distinction between right and wrong; ethical: moral attitudes.
2.
expressing or conveying truths or counsel as to right conduct, as a speaker or a literary work; moralizing: a moral novel.
3.
founded on the fundamental principles of right conduct rather than on legalities, enactment, or custom: moral obligations.
4.
capable of conforming to the rules of right conduct: a moral being.
5.
conforming to the rules of right conduct ( opposed to immoral): a moral man.
6.
virtuous in sexual matters; chaste.
7.
of, pertaining to, or acting on the mind, feelings, will, or character: moral support.
8.
resting upon convincing grounds of probability; virtual: a moral certainty.
–noun
9.
the moral teaching or practical lesson contained in a fable, tale, experience, etc.
10.
the embodiment or type of something.
11.
morals, principles or habits with respect to right or wrong conduct.<p>You've clearly got an ax to grind here, but it's not with anything I've said in this conversation. You've thunk up some people out there trying to force you to work in software slave labor camps producing free software all the live long day. I have no idea where you got these ideas from, but it's not from anything I've said, and it's not from the FSF website or the GPL license and relevant documentation.",1298168013
2240720,story,,,4,3,civilian,"Solowheel: A next-gen Segway in unicycle form",http://www.coolhunting.com/design/solowheel.php,,1298167977
2240719,comment,2240053,2240257,0,0,billsix,,,"A quote of his: ""XML is a giant step in no direction at all""",1298167974
2240718,comment,2240435,2240435,0,0,mrcharles,,,"Processing is pretty cool, I messed around with it a while back. Problem is, once you start making complex enough sketches, you hit a point where it would be really useful to have a debugger, and last I checked processing didn't provide that.<p>I expect you could probably debug it with java tools somehow, but given that I only learned java via processing on a lark, I didn't explore that path.",1298167951
2240717,comment,2240452,2240686,0,0,netmau5,,,"Definitely, adding that to the list.",1298167922
2240716,comment,2240226,2240226,0,0,MatthewHolt,,,"We've now run 5 Health 2.0 Developer Challenge Code-a-thons (we have some Federal gov cooperation and they wont let us call then hackathons!). Sure at each one there is chatting and networking but at each one somewhere north of 100 people produce anywhere between 8-12 teams each of whom show what can be built in a short day (9-5).  While they're not always fully completed apps, most are, and most have been terrific.<p>And while it's OK to bring in something that's been worked on before, most of the teams at the code-a-thons meet at the day and integrate medical professionals with coders.<p>So anyone who wants to come code at an event where what you build might really make a difference (not that we dont love Zunga & FourSquare, but....) check out www.health2challenge.org",1298167918
2240715,comment,2240400,2240400,0,0,gohat,,,"Assume you have little willpower, and set up if and then statements.<p>a) Little willpower: we react to our environment.  Think you have limited willpower then act to create an envrionment which supports your good behaviors.<p>b)  Plan using 'if then' thinking.  Studies show that this conditional approach is the key to getting things done.<p>For example, If I see the delicious unhealthy item on sale for $5 at Store X, then I do behavior Y.",1298167906
2240714,comment,2240534,2240682,0,0,palebluedot,,,"<i>But there is a counter-point... being to cautious and patient can be a risk in it's own right. In my own case, I look back and feel that I waited too long to indulge my ""wild hair"" and move to a place with more opportunity.</i><p>I would emphasis this as well - I don't think you will get to your death bed some day, and think - ""golly, I sure am glad I didn't take any risks.  I sure am glad I never did anything stupid.""<p>Sometimes, the real risk is caving to fear.<p>Another note - never underestimate the value of persistence,  and effort.  One of my favorite quotes is from Coolidge:<p>Nothing in the world can take the place of Persistence. Talent will not; nothing is more common than unsuccessful men with talent. Genius will not; unrewarded genius is almost a proverb. Education will not; the world is full of educated derelicts. Persistence and determination alone are omnipotent.",1298167889
2240713,comment,2240534,2240682,0,0,eengstrom,,,"Hah! Me? Too cautious? I would never have listened to my own advice, but then I had a job in hand and money saved, which seems an entirely different scenario than the OP.<p>How, also are you too old? Go to your pitch meetings like I plan to: I will be surrounded by octogenarians in overalls and Victorian wimples! Social camouflage!",1298167834
2240712,comment,2239856,2240038,0,0,ptn,,,"Or using those ideas for anything useful. Ideas are just a multiplier of execution.",1298167834
2240711,comment,2240461,2240641,0,0,nyellin,,,"In the professional Linux community, almost everyone views Mono-haters as nutters/trolls. If you have real concerns about Mono, I suggest that you contact Miguel de Icaza directly.<p>Email: miguel@gnome.org<p>Twitter: @migueldeicaza (<a href=""http://twitter.com/#!/migueldeicaza"" rel=""nofollow"">http://twitter.com/#!/migueldeicaza</a>)<p>Blog: <a href=""http://tirania.org/blog/index.html"" rel=""nofollow"">http://tirania.org/blog/index.html</a>",1298167781
2240710,story,,,1,0,javabuddy,"Difference between Session Level Reject and Business message Reject in FIX",http://javarevisited.blogspot.com/2011/02/fix-protocol-tutorials-difference.html,,1298167753
2240709,comment,2240595,2240595,0,0,joshcrews,,,"I'm doing BDD as the lead (of 2) Rails developers at our startup, and _its the reason_ we can go so fast.<p>Some differences we're doing from your situation:<p>We use Cucumber to cover the whole web app(but not flash or video processing), and only have some small rspec model specs on important methods involving billing.<p>Cucumber coverage is also very powerful per line of test code.  We have 1000 lines of cucumber covering 5000 lines of code.<p>We aren't covering everything by tests.  For example, I would have given up on the Facebook login test coverage, and just written some tests that mock a facebook-logged in user but not covered the actual login funtionality itself.<p>If we were not doing BDD, my time estimates for each ticket would have to double because the hair-pulling debugging time would skyrocket and kill productivity.<p>I would also hate working on a team that didn't have test-coverage because developer B might build something I don't understand or know about but I inadvertently break it and we find out 4 days later.<p>Another benefit:  we can ruthlessly refactor and tear out code because the tests immediately identify if something broke.<p>There's also more payoff for your tests over time.  The longer your project lasts, the more those tests pay dividends.  Even they seem painful now, they are an investment towards maintainable code in the future.<p>My advice:  keep going with TDD/BDD and consider Cucumber for everything but your most important business-logic methods.",1298167739
2240708,comment,2240461,2240615,0,0,ddkrone,,,"The only benefit I'm aware of is slightly faster code and even then the dynamic version is almost always more readable and easier to maintain and refactor. The ideal would be a dynamic language with optional static typing but I have yet to see a language like that.",1298167641
2240707,story,,,2,0,joshbert,"Why The Golden Idea Is A Myth",http://plan28.posterous.com/why-the-golden-ephiphany-is-a-myth,"This is the first post from my blog I'm submitting to HN. I hope you get something useful from it. I'd love to hear any thoughts you might have about it.",1298167586
2240706,comment,2240081,2240399,0,0,trevelyan,,,"I'm in the program and am happy to answer any questions. Short version is that this is very much the real thing.<p>The expenses need to be reasonable (there is a nominal review process), but I haven't run into problems. You can expense most things except alcohol and cigarettes as long as they are related to the business. This includes giving yourself and your staff salaries of up to around $3k USD per month. So a team of two can rent a nice apartment, pay for airfare and insurance, and spend the remainder on personal salaries -- effectively paying themselves to start a business.<p>Eating out costs about the same as the US and Canada, but cost-of-living is otherwise much lower. And Santiago is an amazing city. Chile has a smaller pool of technical workers than elsewhere, so you can work with people here but are probably best off being a developer. And there's no requirement to incorporate and leave your base of operations in Chile.",1298167572
2240705,comment,2240595,2240673,0,0,eengstrom,,,"Much of the same sentiment jlouis sums up above plus I always keep in mind:<p>Time, Quality, Cost, Scope<p>If what your coding will have limited impact on use or functionality, scalability or performance later down the road... Fine. However, it is my experience that standard approaches are standardized for the greater good and health of a ""more mature company"". As a manager, director and head honcho I sure don't want a developer making that kind of evaluation. It will work for you now, but for your own sake and others later down the road; artfully comment your code!",1298167561
2240704,comment,2240461,2240641,0,0,kprobst,,,"> techrights.org<p>That's where I stopped reading, but I'll say this: Nowhere in the FSF's critique of the MCP is it mentioned whether or not the promise itself is legally binding. From a bunch of people who are supposed to be legal experts. What does that tell you?",1298167541
2240703,comment,2240595,2240665,0,0,bdclimber14,,,"Nice. I'm going to throw this term out next time I'm with my agile junkies.",1298167529
2240702,comment,2240461,2240516,0,0,barrydahlberg,,,"IIRC generics came in 2.0 which narrows it a little.",1298167515
2240701,comment,2240081,2240496,0,0,DanielRibeiro,,,"Not to mention that Chile is part of Mercosul, which makes it easier for south american enterpreneurs to move to Chile.",1298167509
2240700,comment,2240053,2240653,0,0,Groxx,,,"Tons of highly popular languages don't have XML parsers built to the spec.  Very few of them can handle schemas at all, or recursive definitions in schemas, or external document types, or external entities or schemas (and the few that can are usually disabled intentionally, because they can make parsing a tiny XML file take minutes if the server of the schema doesn't serve it up fast enough).  That the XML spec defines such things is irrelevant if they're wholly unreliable because enough parsers refuse to handle them.  And there are more than enough horror stories out there to argue that a significant amount of systems don't handle to-spec XML.<p>There are plenty of RFCs out there that define things that no longer practically exist - should they be used, because the spec defines something that you need?  Especially if it's meant to be used as an interchange format?",1298167508
2240699,comment,2240197,2240644,0,0,Dobbs,,,"You are correct and I mistyped. Python has limited lambdas not a lack of lambdas.",1298167474
2240698,comment,2240461,2240638,0,0,rayiner,,,"Whether your ""simple loop"" is actually simple depends on the complexity of the underlying problem. At a certain point, it takes less time to understand the abstraction + the code using that abstraction than to understand the fully-expanded code without the abstraction.<p>If you're just adding up the elements of an array, no big deal use a simple loop. If you're iterating through three lists of potentially unequal length processing some triplets and skipping others and returning some data structure based on that iteration, a raw loop is going to be anything but simple and readable while using an abstraction like CL's LOOP is going to result in something very manageable.<p>To give an empirical example off the top of my head, look at any compiler code written in C. Iterating over flow graphs is a big PITA because they're nested heterogenous structures (a procedure has basic blocks which has instructions which has uses and defs). You iterate over them a lot and a lot of iterations end up being complex triply-nested affairs. Nearly all compilers written in C use some sort of abstraction to deal with this complexity. Eg: GCC has a bunch of macros of the form FOR_EACH_<i></i> that use the pre-processor.",1298167387
2240697,comment,2231082,2233997,0,0,easp,,,"I wouldn't take face cook's claim that they have 600M active accounts to mean that they actually have 600M active users. If you wander very far from your own ""neighborhood"" you'll reali ze that there are a lot of bogus accounts used by spammers.",1298167366
2240696,comment,2239828,2240658,0,0,Jarred,,,"Well I never said I'd drop out, even if it came off that I implied that. The idea I'm working on involves K-12 education. It's essentially a file-sharing network for academia and hobbyists. But the file-sharing part is mashed in with your courses, so when a teacher posts the homework any other teacher can use that homework as well or if a student doesn't understand how to do the night's homework they can just search for the concept (i.e Quadratic Equations) and it will come up with a list of videos made by teachers for that concept. That's a very informal and not a very elaborate description but that's essentially it.",1298167347
2240695,comment,2240534,2240534,0,0,zachanker,,,"You don't mention it in your question, but what is your experience? You say you want to work at an awesome startup, but do you have projects (such as websites) or anything you can reference to prove you know what you're doing?<p>San Francisco is a great place, but you're already going to be fighting against quite a lot of people with more experience. Unless you some impressive projects to show, finding a startup who is going to take a risk on a 19 year is not a good bet to make.",1298167347
2240694,story,,,1,1,jujumo,"Paradox inside innovation...",,"I suspect that the identification and then resolution of paradox inside a well defined situation has a causal realtionship to innovation... maybe.",1298167346
2240693,comment,2240534,2240534,0,0,mkr-hn,,,"Jumping from college dropout to one of the most expensive and competitive job markets in the country seems a little bit too much. It's a big country with hundreds of big and lively cities full of opportunity that don't cost a fortune to live in or near.<p>Even the little commuter town I live in (Winder, GA) has a couple of web-heavy businesses started in the last decade. One's a design firm, and the other makes clothes.",1298167282
2240692,comment,2240452,2240557,0,0,sheriff,,,"A lot of your copy focuses on how this is just the beginning, how important this site is to you, and how you want feedback, etc.  That's great for someone who already cares, but most visitors to any site are going to be ambivalent until they know what they're getting out of it.<p>Put yourself in the shoes of someone who doesn't care about you at all.  Explain the unique benefits that that person can access right now.  Appeal to their selfishness.  Focus specifically on things that Sparkmuse enables (right now) that cannot also be said about alternative sites, such as Hacker News.  Trim everything else away.",1298167272
2240691,comment,2239149,2239756,0,0,moondowner,,,"If the lawyers don't set the ground what will the developers work on to? The developers, all contributors, and users of LibreOffice need this.",1298167270
2240690,comment,2240534,2240534,0,0,lyime,,,"Don't drop out. College is awesome, I don't regret a single day in college. I did a ton of internships to keep myself busy, partied a ton, started a company (Mugasha) and made a ton of friends. College is not all about academics, you will meet amazing people, having a lot of fun and look at the tech/startup world from a different angle.<p>As others have mentioned, transfer to a university in the bay area. Best of both worlds, Berkeley, Stanford, SJSC, Santa Clara, SF State etc.. tons of choices.",1298167240
