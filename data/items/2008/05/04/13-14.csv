ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
180796,comment,180743,180743,0,0,greendestiny,,,"I don't regret doing a PhD, but there are so many downsides. It took me away from hacking, and I'm only just feeling like I'm getting back to loving it again. There's a sort (possibly necessary) attitude in research where you judge at everything with a pretty high level of abstraction - but so much of good in something is in the detail. It's hard to do significant implementation and detail work and write a paper on it. So your focus, and the standards by which you judge other peoples work and they judge yours, ends up being pretty artificial.<p>The other big problem in academia is working with the people you want to work with. You can't generally band together with your friends and do a PhD together. There will probably be some great people in the lab but you usually aren't working too closely.<p>It can be a good way to get paid (a pittance) for doing interesting work. I don't think it helps in the startup world - much. Certainly not when you consider that working for a pittance for 4 years could allow you to startup and fail at a number of ventures of your own.",1209909267
180795,comment,180517,180742,0,0,dmoney,,,"What do you suppose the size limit for a company is, for changes to flow from the bottom up?",1209909160
180794,story,,,1,0,nreece,"Startup Sezmi provides new way to deliver TV content",http://origin.mercurynews.com/business/ci_9116379,,1209909029
180793,comment,180677,180679,0,0,palish,,,"Heh.  Looking back on it, that thread has some pretty valuable content.<p>What I've realized since then is that the only way to truly master something is to immerse yourself in it.  Learning something from someone over a chatroom is fundamentally suboptimal.  It does have its advantages... Well, one advantage, which is that you can ask questions.  But the disadvantages of learning from a chatroom simply outweigh any benefits.  The details of a technical subject will always remain elusive, and you'll only acquire common knowledge.<p>My favorite way to become immersed in a new concept is by reading its reference manual from cover-to-cover.  I'm currently working through the OpenGL 2.1 specification: <a href=""http://www.opengl.org/registry/doc/glspec21.20061201.pdf"" rel=""nofollow"">http://www.opengl.org/registry/doc/glspec21.20061201.pdf</a><p>In the past, whenever I was reading a reference and ran into something I already knew, my eyes glazed over and I'd usually skip ahead.  But one time, pretty much on a lark, I sat down with the .NET design documentation and paid attention to every word for as long as possible.  I got pretty far, but what was surprising was how much useful knowledge I'd acquired.  It was nice to be able to apply that knowledge at work the very same day.  A lot of the internals of the framework became much less mysterious.  It's like the difference between a car owner and a car mechanic... An owner knows operation fundamentals, but a mechanic can tell you the source of that rattling noise.<p>Yesterday, a friend was having trouble with his computer engineering course.  I wanted to help, but he said ""You'd have to learn 68hc11 assembly.""  I searched for a reference, found one ( <a href=""http://www.owlnet.rice.edu/~elec201/Book/6811_asm.html"" rel=""nofollow"">http://www.owlnet.rice.edu/~elec201/Book/6811_asm.html</a> ), and carefully read through it in one hour.  It was fun to show him some abilities of the 68hc11 that he wasn't yet familiar with.  But the point is, no new concept is out of reach.  Learning it just requires effort and patience.<p>About Lisp:  I recently read the LispWorks documentation ( <a href=""http://www.lispworks.com/documentation/index.html"" rel=""nofollow"">http://www.lispworks.com/documentation/index.html</a> ).  Based on a few experiments, high-performance games can be written in Lisp.  (I'm not sure about other languages.  Scheme is still far too slow to author a game engine in, unfortunately.)  That seems to have big implications for the game industry, very similar to how Viaweb redefined the way in which websites were created.  Naughty Dog Software is the only big game studio that has written a large game in Lisp.  The other significant Lisp-based game is Abuse.  And that's it, past a smattering of text-based adventure games.  There is a lot of unexplored territory.<p>Imagine developing a persistent online game.  You'd like to implement a new gameplay ability; perhaps just a minor balance tweak.  Traditionally, doing so would require either a modification of server code (in which case the server would need to be restarted, forcing every player to reconnect) or an edit of a server-side database (to adjust ""damage tables"", etc).  But if you're developing the game in a dynamic language like Lisp, you can simply write the exact algorithm you have in mind and deploy it instantly.  No restart required.<p>That's a server-side change though.  What about the game clients?  Let's say you want to implement the logic:  ""When a vehicle's front bumper hits another player, the text 'Splatter'd!' appears on the screen.""  Again, with traditional game development you'd make the change to the game client (which is probably written in C++), test it, then ""deploy"" the new game client.  If the gameplay change is significant, every player would get booted from the server and be forced to download the new client.  If it's not significant, the player isn't booted but he doesn't see the new change until the next restart.  But if your game is built with a high-level language, you could simply modify the game client and send the modified code to the server.  The server would then transmit that modification to every player, who would then see the change instantly.<p>To an extent, that kind of dynamic development is already happening.  The studio that created Eve-Online is taking promising steps - they rely heavily on Python, for example.  My personal favorite at the moment is Lisp, because of the idea that it could be possible to write every single component of a large-scale game in a single programming language.  LispWorks and Franz Allegro CL are capable of generating very high-performance code.  Because of that, I believe game programming can attain an efficient, powerful, and flexible development cycle.<p>The only way to realize this dream is by learning every capability of both the computer and its programming tools.  Hence, I read OpenGL and LispWorks manuals in my spare time.  :)<p>Some tips to efficiently acquire knowledge:<p>* Implement what you read.  When you run across a new function, you'll read it and feel like you've learned it.  But the seductive urge to move on should be suppressed.  Write a program that actually uses the new function or capability that the manual is describing.  Doing so will solidify your knowledge of the details and give you a handy mini-reference to turn to when you need to remember how to accomplish something specific.<p>* Devote large chunks of time to reading and experimenting.  Make sure your study time is distraction-free.  Learning a big new system is just as intense as creating one.<p>* Avoid the temptation to skip around.  This one isn't an absolute, but if you do skip around then it's very important to revisit the text and carefully read what you previously skimmed.  And related to that...<p>* Don't move ahead until you have a firm understanding of every concept presented so far.  I've moved ahead prematurely a few times, and it's very easy to become lost or miss a subtlety of a more advanced concept.<p>* Don't get frustrated.  Your advancement will require a lot of patience.<p>* Don't ask for help.  Learn to rely on yourself to solve problems.<p>* Force yourself to not deviate from the task at hand until it's done.  Avoid Reddit, News.YC, etc, even if you're only checking them.  Little distractions add up and suck time, and they break your train of thought.<p>* Do get some sleep.  8 hours a day is vital.<p>* Make it fun.  Every domain has interesting problems, but they're usually hidden just out of sight.<p>* Never give up.  This one's corny but true.  It's surprising how many times you'll accomplish a task just before you were about to give up on it.<p>Good luck.  :)",1209908812
180792,comment,180773,180773,0,0,bootload,,,"Nicely done ~ <a href=""http://github.com/btbytes/teh/tree/master/webapp.py"" rel=""nofollow"">http://github.com/btbytes/teh/tree/master/webapp.py</a> and shows just how versatile the framework is by the number of different libs being used. Bret still hasn't released his sample code ~ <a href=""http://bret.appspot.com/entry/experimenting-google-app-engine#disqus_thread"" rel=""nofollow"">http://bret.appspot.com/entry/experimenting-google-app-engin...</a>  so this is good for users. The feed doesn't work. The best bit Bret showed was the decorator '@administrator'. My version uses webpy, sans disqus. Work on that some other time ~ <a href=""http://seldomlogical.com"" rel=""nofollow"">http://seldomlogical.com</a>",1209908550
180791,comment,180776,180782,0,0,ph0rque,,,"If your story happens to be more like:<p>Hack. Launch. Get turn down by angels/vc dozens of times. Slowly start bringing in revenue, eventually profit. Acquisition.<p>You can still get the next model with ~600 miles on one battery charge :~).",1209908485
180790,comment,180743,180743,0,0,bootload,,,"<i>""... However, I am not sure whether I really want to spend the next 4-6 years doing a PhD; I'd much rather like to start working, doing my own projects, etc. What's a PhD worth? ...""</i><p>Go ahead and do your PhD. You'll learn some interesting stuff. It will be narrow, deep and might have some application. You will learn intellectual rigour, how to write and think. Then when you finish you will be just the type of new-hire a startup might want.<p>I often think doing a PhD is the anti-entrepreneur approach. The sheltered workshop of academia. All analysis, no action and devoid of the real cut and thrust of commerce. Then I think of all the new ideas generated by those who spent their time thinking about stuff. But did Woz need to do a PhD to build computers and start Apple? Do you need a PhD to do a startup? No. But the skills you learn there might help. Alternatively by the time you become a newly minted 'Dr', you might have created something of value and still learnt.<p>So what is it to be? The risky path of the Startup with its uncertainty, risk and commercial experience? Or the almost certain path of a PhD, a title and specific knowledge and less potential reward?",1209907807
180789,story,,,1,0,epi0Bauqu,"America's Most Congested Cities",http://www.forbes.com/2008/04/10/congested-commute-cities-forbeslife-cx_mw_0410realestate.html?feed=rss_mostemailed,,1209907440
180788,story,,,4,0,epi0Bauqu,"Best Ways To Break Unhealthy Habits",http://www.forbes.com/2008/04/30/breaking-bad-habits-forbeslife-cx_avd_0430health.html?feed=rss_mostemailed,,1209907397
180787,comment,172345,172345,0,0,epi0Bauqu,,,"<a href=""https://friendfeed.com/yegg"" rel=""nofollow"">https://friendfeed.com/yegg</a>",1209907177
180786,comment,180589,180589,0,0,ludwikg,,,"I would start with this one: <a href=""http://www.amazon.com/Economics-One-Lesson-Shortest-Understand/dp/0517548232"" rel=""nofollow"">http://www.amazon.com/Economics-One-Lesson-Shortest-Understa...</a>, or free online at <a href=""http://jim.com/econ/contents.html"" rel=""nofollow"">http://jim.com/econ/contents.html</a>.",1209907100
180785,comment,180517,180580,0,0,JohnN,,,">""Nothing personal, but that's the kind of shareholder that ruins good businesses. The language of Ballmer's letter is clearly intended to cause precisely that kind of action from Yahoo! shareholders.""<p>Perhaps you are right. But shareholders rarely hold stock to build good businesses they are there to make money. They would happily invest in a bad company if it was about to be bought out for a huge premium. Once you go public, few things matter other than the numbers.<p>Plus 72% of Yahoo shareholders are professional money managers, arbitrageurs, and regular investors. These people are likely to want this deal to go through.",1209907001
180784,comment,180684,180777,0,0,cousin_it,,,"Awesome? It would kill my project and many others, e.g. YouTube. I hope Adobe opens everything up before any of that happens. ""In the long run, the utility of all non-free software is zero.""",1209906871
180783,story,,,1,0,pavs,"Funny Side of Linux",http://www.linuxhaxor.net/2008/05/04/funny-side-of-linux/,,1209906700
180782,comment,180776,180776,0,0,edw519,,,"18 month waiting list.<p>Let's see.  Get on waiting list.  Hack.  Angel.  Launch.  Series A.  Acquisition.<p>Perfect timing.",1209906443
180781,comment,180743,180763,0,0,jgrahamc,,,"But I think I got most of those things from the undergraduate degree.",1209906434
180780,story,,,16,27,maneesh,"Ask YC: Masters in CS? Or no?",,"Hey guys,<p>I'm currently an undergrad student at Stanford University, and I'm wondering if I should pursue a 1 years masters program to get a Masters in CS. Here's the lowdown: I've done a lot of programming before---in fact, I've written four books on programming (two were international bestsellers), sold a facebook application to Kaplan Inc, and have developed for some hot start ups in Silicon Valley. I'm studying abroad, and I was planning to stay abroad until next April, but if I want to pursue the masters program I will need to come home to start working on it.<p>My future goal is to start a freelancing company to develop enterprise software--my first project is this summer in Italy. So, my question is, based on the cost ($45,000 for a year--after TAing, it should be closer to $15,000) is it worth it to pursue a masters degree at Stanford? Will a master's open up any doors that wouldn't be open for a Stanford grad with a good resume?<p>Thanks!<p>-Maneesh Sethi",1209906414
180779,comment,180743,180762,0,0,jgrahamc,,,"I'd have to say 'no'.   I did a DPhil by pure research and had to produce a thesis of original work.  That means that I did my own learning with some guidance.   My thesis is all about provably secure computer systems (using CSP) and I developed an algebra for reasoning about secure systems.<p>I've never used any of this stuff.<p>There are plenty of things that I learnt as an undergraduate that I use, however.",1209906409
180778,story,,,1,1,edw519,"Will they be laughing at this in 42 years? - Imagining the tech world in 2050",http://www.news.com/8301-13953_3-9933345-80.html?tag=nefd.top,,1209906324
180777,comment,180684,180764,0,0,jrockway,,,"It might be bad enough to get the government involved again.  The government killing flash would be awesome.",1209906197
180776,story,,,11,15,epi0Bauqu,"Long-awaited electric sports car rolls out",http://www.cnn.com/2008/TECH/05/03/electric.car.ap/index.html?eref=rss_mostpopular,,1209906191
