ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
1567273,comment,1566975,1566975,0,0,apsurd,,,"I have a problem with the trailer video being completely void of content. Ok so this isn't a ""review my startup"" but if it was we'd all rip on the message not being digestable in 2 seconds. What do you do and why should I care?<p>Saying vague things about aesthetics and bashing the competition without citing <i>how</i> you are better does nothing for a to-be-convinced potential customer.<p>This brings up a good question. So which one is it? Do we market for clarity and conciseness, knowing that we have 2 seconds to capture a customer's interest. Or do we try to get on techcrunch by being overly dramatic, whisp our users into storyland and make a video that screams ""me, me, me!""?<p>I guess you can do both =) 
Point is, I watched the video, its 100% about the company, but uhhh I don't care about the company, I care about what the hell you product does <i>for me!</i>",1280743072
1567272,comment,1565375,1566113,0,0,shard,,,"I'm currently in Seoul.  Do you have any pointers to things happening here?",1280743061
1567271,comment,1567064,1567225,0,0,senki,,,"Yes, the PI really contains all information on the world, since it's an infinite non-periodic number. The only problem is that it also contains all noise on the world, too. It's like a block of marble, that contains all great sculptures, you just have to remove bits from here and there...",1280743040
1567270,comment,1566281,1566809,0,0,danudey,,,"Judging from how Google's been managing the Android project, they're probably working on adding tablet features to an internal port that they haven't released to the public (and won't, until the device is ready to be released by its manufacturer).",1280743028
1567268,comment,1566903,1566903,0,0,tekkub,,,"I find the ""too easy to break the repo"" argument really quite odd.  While I understand why users think this is true, it's actually very far from the case.  The git repo is very stable, has built in error checking, and is extremely stubborn about removing data.  The <i>working copy</i> on the other hand, is very easy to jack up if you're not sure what your commands are doing.<p>The best thing you can teach someone just learning git is to commit very frequently.  If your files are committed, you can undo most any error.  But if you've got a dirty working copy, you could lose it if you do something drastic.  As an added bonus, this also teaches the user to branch often, and eventually they'll find the majick of `git rebase --interactive`",1280743002
1567267,comment,1565488,1566510,0,0,arethuza,,,"Or some know perfectly well what is going on and don't care because of the potential for short term gains.",1280742980
1567266,comment,1566278,1567166,0,0,ithkuil,,,"I love haskell and understand your point. Laziness is beautiful and allows to express things in a simple way and also improve the reusability of the code etc.<p>However I think that you didn't pick the best example.<p>I tried out:<p>>head $ sort [1 .. 10000000]<p>6 secs, using ~2g of heap! (actually is should be a reverse sort)<p>and the ""hand coded loop"":<p>>let mx (x:xs) m = if x > m then mx xs x else mx xs m; mx [] m = m
>mx [1 .. 10000000] 0<p>3 secs, heap usage stays negligible low and constant.<p>Something is clearly not behaving as you depicted.<p>(of course my 'loop' code is not the exact equivalent of the last.sort composition, since it requires a 'minimum' parameter to be passed in advance, which not all types have. On the other hand it works also for the empty list)<p>I also have the feeling that, unless special compiler optimization (a very 'specific' one, I fear), the simple application of the 'head' function to a sorted list would stop when the first result element is produced, which is not after O(n). Granted, you don't have to wait for a full sort, since the sorting algorithm could guarantee that the rest of the list contain 'lesser/bigger' elements only and thus stop. But keeping track of all this should be space consuming, in respect to a simple linear scan.<p>Anyway the space problem of the ""lazy"" solution is a bigger issue than the number of comparisons.<p>I'm not a haskell master, but if I got it right, one of the mayor problems of lazy programming is that in some situations it can degenerate to a huge amounts of ""unevaluated thunks"", which are frozen computations yet to be performed, but which require some state to be held in memory (like function arguments, I guess).<p>(<a href=""http://www.haskell.org/haskellwiki/Thunk"" rel=""nofollow"">http://www.haskell.org/haskellwiki/Thunk</a>)<p>or in this case, the space usage is caused simply because the list has to be materialized in memory instead of be simply traversed and generated on the fly. (but 2g seems slightly too much).<p>Anyway, the point here is that the two methods are not equivalent.<p>I think that understanding the impact of laziness on space is an issue that certainly increases the learning curve, as it requires time to master this and other optimization techniques if you want to get predictable performances from haskell.<p>(BTW, I actually use haskell for work, perhaps in a slightly conterintuitive way. I use haskell for quick prototyping ideas and solutions. Sometimes I get inspired by the solution I end up with haskell and translate it in clojure or java (work requirement), or at other times I have to rewrite it completely, but the possibility to quickly prototype in haskell really helps me a lot. I would love a stable ghc JVM backend.... it would change my life)",1280742961
1567265,comment,1566771,1566945,0,0,c00p3r,,,"But a lot of shared-payments schemes are working well, especially in porn, SEO and web-advertising.",1280742892
1567263,comment,1565884,1567204,0,0,Chirono,,,"This is always rather ambiguous terminology. For some people, it makes no sense for thing a to be more than 100% faster than thing b. Other people see it clearly meaning that thing a take half the time of thing b.<p>What we really want to measure is time quantities rather than speed quantities. I find comparisons of time much easier to grasp than comparisons of speed.",1280742823
1567262,comment,1566722,1566722,0,0,paolomaffei,,,"4+ years experience for a startup makes me sad :(",1280742801
1567261,comment,1565375,1566459,0,0,ido,,,"<p><pre><code>    We want to live in this location for several years and 
    be able to work without the government thinking that 
    we're some sort of threat by doing so
</code></pre>
I'd like to know the answer to that too, as my search indicates that pretty much every first world country has fairly strict immigration rules.",1280742741
1567259,comment,1566317,1566351,0,0,danudey,,,"Yes. This is a massive security hole that Apple is sure to fix as soon as possible. I don't know if this jailbreak does it, but the old (iPhoneOS 1.1.1) jailbreakme.com not only exploited the TIFF vulnerability, but also patched it so it couldn't be used by anyone else. It would have been nice if they just offered an option to patch without jailbreaking though.<p>Fortunately, it's not just a copypasta Javascript exploit or anything of the sort - you have to actually know what you're doing in detail to modify this exploit to do what you want.",1280742692
1567258,comment,1566278,1567249,0,0,tkahn6,,,"I appreciate that. I am actually familiar with Haskell and the Maybe monad.<p>Are there use cases for Maybe where you're not interacting with some sort of IO?",1280742602
1567255,comment,1554171,1554171,0,0,Sathi,,,"<a href=""http://tachyon.in/jobs/"" rel=""nofollow"">http://tachyon.in/jobs/</a>",1280742494
1567254,comment,1566975,1567115,0,0,_delirium,,,"Even more problematically, it seems to run a real risk that they're going to publish hype/fluff (well, more than currently). I mean, if you look at that Michael Arrington email that was quoted, he says that he liked the style of the pitch, and liked the problem they were addressing, but <i>didn't care</i> if they solved it or not--- kind of fast-forwarded through the video and wasn't really paying attention. Makes it pretty easy to hype a non-existent solution, so long as at least your problem space and your pitch are interesting.",1280742341
1567253,comment,1565375,1566464,0,0,ido,,,"That seems to be the case pretty much everywhere you'd go where you're not already a citizen.",1280742329
1567252,comment,1566546,1566917,0,0,pornel,,,"Rewriting is always more fun than maintenance.",1280742256
1567250,comment,1567189,1567189,0,0,getonit,,,"I hate that reasoning, it's a cheap trick to use a false dichotomy to make yourself a paradox. The green apple is not in support of the first rule, it is just not invalidating it. It is neutral, rather than confirmative or invalidatory. Saying that it supports the first rule is a cheap 'there's nothing in my hand' trick, and I can see from the shape of your hand that you've palmed something.",1280742182
1567249,comment,1566278,1567202,0,0,naradaellis,,,"I don't know how familiar you are with Haskell... but anyway:<p>Say you're working with the Maybe type, which is often used to represent operations that might fail, such as a map lookup, for example.<p><pre><code>  data Maybe a = Just a | Nothing
</code></pre>
We're using two functions defined like so (feeling unimaginative at the moment, forgive me):<p><pre><code>  x :: String -> Maybe String
  y :: String -> Maybe String
</code></pre>
We want to use them together. Someone who's not familiar with monads might write something like this:<p><pre><code>  myFunction text = case x text of
                      (Just newText) -> y n
                      Nothing        -> Nothing
</code></pre>
(If x works and returns a value, put that value into the y function. If x didn't work, just return Nothing)<p>It works fine, but imagine you had 3 functions that returned Maybes, it would get tiresome and messy nesting all those case statements endlessly.<p><pre><code>  [...]
  case x text of
    Just newText -> case y newText of [...]
</code></pre>
Not being satisfied with boilerplate, lets make an operation that will simplify this a bit:<p><pre><code>  bind :: Maybe a -> (a -> Maybe b) -> Maybe b
  bind (Just x) f = f x
  bind Nothing  _ = Nothing
</code></pre>
now we can define myFunction like so:<p><pre><code>  myFunction text = (x text) `bind` y
</code></pre>
if we want to add another operation:<p><pre><code>  myFunction text = (x text) `bind` y `bind` z
</code></pre>
Congratulations you've mostly made a monad. Bind is one of the monad operators (>>=), the other operators are extremely trivial to implement for the Maybe type.<p>This is why we say a monad is just a container with some handy operators. Maybe is the container, and bind is a way to chain together operations (without explicitly taking the value out of the container) so the operators themselves don't have to know anything about the nature of what they're dealing with.<p>I won't bang on anymore, this is a longer, better written tutorial[1] in the same vein as this short summary.<p>[1]: <a href=""http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html"" rel=""nofollow"">http://blog.sigfpe.com/2006/08/you-could-have-invented-monad...</a>",1280742160
1567247,comment,1563234,1563406,0,0,c1sc0,,,"I've been out of the field for a while, but I see a similarity between the old BAC vs. shotgun and newer SNP vs. full-sequence debate. While my academic friends scoff at SNP-based products like the ones commercialized by 23andme, I believe there is value in going for reach vs. depth. You can draw a similarity here with coding: running up technical debt is fine in the short term as long as you are sure <i>someone</i> will come in later and clean up the mess.",1280742029
1567245,comment,1566422,1567077,0,0,samstokes,,,"+1 for recommendation of The Prestige.<p>Mulholland Drive is also a film worth watching if you enjoyed Inception.",1280742028
1567243,comment,1566916,1566916,0,0,wrighty,,,"I guess it's a case of waiting for the announcement before passing comment - but if this is a new OpenSolaris distribution what does it matter when Oracle/Sun still employ 99% of all active developers?",1280741986
1567242,comment,1566546,1566546,0,0,thomasfl,,,"After 3 minuts Rasmus says this:<p>""I never taken any classes in computer science. I should have taken classes in computer science"".<p>So it was never designed to be a state of the art language. Just a tool to get things done. From 1997 to 2001 I really enjoyed solving problems in PHP. But things have changed. I have learned more and now certainly prefer using Ruby.",1280741983
1567241,comment,1566422,1566645,0,0,samstokes,,,"+1 but disagree.<p>Re the rule that inception requires a vault to plant the idea inside - on the one hand, if the whole concept of inception is something dreamed up by Cobb, then that rule can be broken (dreams are rarely consistent).  On the other hand, that's why it's so significant that Ariadne's role is the creator of mazes (specifically, mazes which Cobb's conscious mind can't solve): she creates a maze he has to break into in order to confront his issues at the centre.  If he did so without first struggling to get there, he wouldn't accept it as his own victory: just like Fischer had to pull off an increasingly elaborate heist in order to believe his own inception.<p>Re accepting his dream children after rejecting his dream wife: I think the difference is that his real children are still alive and need him.  His guilt over Mal's death keeps him distant from them - literally in the film/dream, but maybe metaphorically in reality.  Maybe he's been emotionally distant from his kids since her death, and the dream is his mind's attempt to fix things.",1280741928
1567240,comment,1565375,1566630,0,0,quant18,,,"The problem in Hong Kong is that business setup is not equivalent to residency permission. The Companies Registry will let you fill out your lawyer's office or even your friend's uncle's plumber's address on your business registration certificate. The Immigration Department, on the other hand, will not just automatically give you a visa to come live here and run your business. They are not mysterious and arbitrary like in the U.S. --- but they <i>are</i> quite strict when it comes to new businesses. They want you to have a nice office, local employees, long years of work experience, brand-name degrees, and a formal business plan with revenue projections. See this link for a lot more details:<p><a href=""http://www.emigra.com.hk/hongkong/page76.php"" rel=""nofollow"">http://www.emigra.com.hk/hongkong/page76.php</a><p>On the other hand, if you can qualify for the Quality Migrant Admission Scheme, you have a year before you need to show them any of the above. But they only let in one batch a year, I think in June.<p><a href=""http://www.immd.gov.hk/ehtml/QMAS.htm"" rel=""nofollow"">http://www.immd.gov.hk/ehtml/QMAS.htm</a><p><a href=""http://en.wikipedia.org/wiki/Quality_Migrant_Admission_Scheme"" rel=""nofollow"">http://en.wikipedia.org/wiki/Quality_Migrant_Admission_Schem...</a><p>As for the business climate: if you have a physical product, HK is still the world's greatest gateway to China. If you're developing webapps, the broadband is good here and there's enough coders floating around. Once you're profitable, the immigration department suddenly becomes much nicer to you and will let you sponsor whatever staff you need. Taxes are low and simple (BUT, if you're a US citizen, they're not, because the IRS treats any American who owns a company overseas as a tax evader and demands insane documentation. You will have to understand at minimum the IRS forms 5471 and 8832, or more likely hire a lawyer to understand it for you).<p>And, a final warning: if you're trying to do anything pertaining to real estate or telecoms (AirBnB, Renthop, etc.), bring a pair of brass balls and a copy of Alice Poon's ""Land and the ruling class in Hong Kong"", because you're up against monopolists who own the government and all the infrastructure and will use them to crush you:<p><a href=""http://news.ycombinator.com/item?id=1493290"" rel=""nofollow"">http://news.ycombinator.com/item?id=1493290</a>",1280741709
1567238,comment,1566278,1566715,0,0,gaius,,,"Haskell is fiddly to use on OSX too. All the devs seem to have moved to OSX 10.6 and it isn't being fully tested on 10.5.8. Now you might say ""just upgrade"" but that's not the point.<p>I am running a Debian VM in VirtualBox for my Haskell work now... That's great when it's just me playing, but not so much for production code.",1280741660
1567237,comment,1565375,1566138,0,0,ido,,,"<p><pre><code>    If you're not Jewish and of Jewish ancestry? 
    You're screwed. There is no easy way to gain 
    a long term visa otherwise.
</code></pre>
I personally know several non-jewish ex-pats living and working in Israel (and a ton of jewish ones), so it must be at least possible (although might not be easy).",1280741615
1567236,comment,1566278,1567211,0,0,loup-vaillant,,,"The only thing I ever saw Don Stewart ""bombing"" were factual evidence.  And what he destroys by truth should be annihilated anyway (P. C. Hodgell).<p>""Don Stewart said so, it must be true"" actually isn't such a bad heuristic (as far as Haskell is concerned).  From what I've seen, Don is quite cautious.",1280741488
1567235,comment,1566278,1567169,0,0,kunley,,,"Yeah but still being hacker is to make oneself uncomfortable when not being skilled enough, then to overcome this by practicing the skill. So maybe we should say that it depends if someone is a hacker or a coding monkey. I've seen rates of about 20%-80% in the industry.",1280741453
1567234,comment,1566278,1567223,0,0,gaius,,,"After having written that, I realized it was more nuanced than that. Haskell's good for parsers, for example. I am actually working on one for a proprietary logfile format right now (it will ""convert"" said logfiles into SQLite .dbs).  But if you have preexisting libraries for system A in Java and system B is CORBA then you would be mad to put Haskell in the middle, the impedance mismatch is too great.",1280741293
1567233,story,,,1,0,jacquesm,"Job Openings/Community Department at WikiMedia",http://wikimediafoundation.org/wiki/Special:CommunityHiring,,1280741270
1567230,comment,1564391,1564965,0,0,echaozh,,,"Perhaps not the source code, but definitely the detailed design with a lot of diagrams. And a working prototype.",1280740973
1567229,comment,1565105,1565963,0,0,ErrantX,,,"Yeh; it passes various notability grounds.",1280740835
1567227,comment,1566278,1567194,0,0,loewenskind,,,"No, using head is what causes the result to be O(n) even though sorting should be more complex.  By only using the first entry, only the first entry will actually be found by the sort.<p>I assume you're pointing out that I have my sort backwards but I was being intentionally as ambiguous with this part because it's not relevant to the point I was making.",1280740688
1567226,comment,1566027,1566773,0,0,arethuza,,,"I don't think I've ever heard the term either. However, in the context I don't think it's that difficult to work out what is meant.",1280740667
1567225,comment,1567064,1567186,0,0,10ren,,,"As a high school student, I thrilled to the idea that long numbers (eg. pi digits) might contain messages. As a postgrad, I now know that the long numbers are actually a form of information (eg. a digital photograph is just a number: a sequence of bits).<p>Sadly, there's nothing exciting about it, as the interesting sequences occur very sparsely, just as the vast majority of bit sequences (out of all those possible) represent uninteresting digital photographs.",1280740632
1567224,comment,1566488,1566488,0,0,asdfguj,,,"An asshole at the helm is an advantage.<p>An excellent opportunity has arisen for two almost identical companies, A and B, but it involves ethics that would make a decent person uncomfortable. A is run by a decent person, and they skip the opportunity because it's the decent thing to do. B is run by an asshole, and they jump at the opportunity with glee, maybe even with a small chuckle at all the companies that would have passed up the opportunity on ethical grounds.<p>Company B is now better off, because of, not despite, their asshole.",1280740604
1567223,comment,1566278,1567020,0,0,jrockway,,,"Why is Haskell not a good fit for glue?  That's what I use it for, and it works great -- my programs are short, efficient, and easy to write and test.<p>My first Haskell project for work was initially a C++ project, but it was too hard to use C++ as a glue language, so I switched to Haskell.  I would have used Perl, but Haskell works better on Windows and has an easier-to-use FFI.<p>I actually ended up spending more time trying to get some old version of Visual Studio to link against my super-old-proprietary-C-library that was the core of my project than I did writing the whole Haskell FFI binding to that library and writing the first version of the Haskell-based program.<p>This turned out to be the most trouble-free program I ever wrote.  It had to operate on large datasets, and never died in the middle (like I'm used to with Perl).  The only bug that the program ever had was where one of my data validation rules was too strict, and rejected some valid date.  (The validation rule said that the dates in the time series had to be increasing.  But one series only had one point, and hence wasn't strictly increasing.  The bug resulted in ""Warning: bad data"", though, not ""Prelude.(!!): index too large"", as the implementation was with fold.)<p>Incidentally, as a result of this project, c2hs supports Windows DLL calling conventions :)",1280740574
1567222,comment,1566228,1566783,0,0,vinhboy,,,"Alright so using a pdf analysis tool, here is what it spits out:<p><a href=""http://pastebin.com/hCKtL8qC"" rel=""nofollow"">http://pastebin.com/hCKtL8qC</a><p>Some of that looks like Obj-C to me, what's the other stuff?",1280740490
1567221,comment,1566278,1567102,0,0,loup-vaillant,,,"Because two features are different doesn't mean they don't solve the same problem.  Here, most of the time, class polymorphism is used to solve problem best solved with parametric polymorphism (sometimes called genericness).<p><pre><code>    class Base
      Base(int i_init)         -- constructor
      virtual int f(int param) --  a method
    
    class Inherit1 (extends Base)
      int f(int param) -- reimplementation 1
    
    class Inherit2 (extends Base)
      int f(int param)  -- reimplementation 2
    
    class Inherit3 … (ad nauseam)
</code></pre>
We don't need class polymorphism with inheritance, here. We can do simpler:<p><pre><code>    class Base
       Base(int i_init, int f_init(int)) { f =: f_init; … }
       int f(int)
</code></pre>
Or even simpler:<p><pre><code>    int f(int i_init, int f_init(int)) // C-like syntax
    f: int -> (int -> int) -> int      -- Haskell syntax
</code></pre>
(And don't tell me that passing function as parameters is weird, or complicated.  Functions are typically way simpler than ""Objects"".)",1280740472
1567220,comment,1566027,1566406,0,0,arethuza,,,"Asking the interviewer for more information? The ability to ask questions is far important than whether anyone can remember the details of database normal forms!",1280740445
1567219,comment,1565353,1566905,0,0,burriko,,,"I only seem able to reproduce it on the latest Safari for OS X. Even Safari for Windows doesn't do it. Weird.",1280740308
1567218,comment,1567172,1567172,0,0,blots,,,"Why don't they cite the publication? Is there a publication?",1280740303
1567216,comment,1566228,1566228,0,0,bjonathan,,,"Jailbreakme.com is overloaded, you can connect to that mirror throught your iPhone:
<a href=""http://jailbreakme.modmyi.com"" rel=""nofollow"">http://jailbreakme.modmyi.com</a>",1280740212
1567214,comment,1564183,1566865,0,0,abecedarius,,,"I wrote something similar a few years ago (finding photos with the most-similar tag vectors among a set of ~500,000). The core lookup was done by a few hundred lines of C code returning answers in ~0.1s, IIRC. This used a standard info-retrieval method, not a linear-algebra library -- all vectors pre-loaded into RAM in a sparse representation, then for each query scan them all, keeping a min-heap of the best vectors so far. (This could be sped up by indexing the vectors and skipping the ones that with no tags in common with the query, but I didn't need to bother.) Email if you'd like to discuss my experience with this, though it looks like you already get decently fast answers.<p>You can do queries besides ""sites most like site X"", you know -- ""What sites are like a cross of X and Y?""",1280740149
1567213,comment,1566422,1567077,0,0,ubernostrum,,,"Except not really; the novel it's adapted from doesn't leave any opportunity for ambiguity, and even in the film, as Jackman's character dies Christian Bale walks past the rows and rows of tanks holding the dead duplicates. If there were never any real duplicates and the whole thing was faked, there's no explanation for those tanks to be there.",1280740122
1567212,comment,1565981,1566613,0,0,pizzaman,,,"late 2007 mbp?<p>If i didn't have the three year warranty i could have thrown mine away:<p>1. the NVIDIA chip died > screen goes black: known issuse: <a href=""http://support.apple.com/kb/TS2377"" rel=""nofollow"">http://support.apple.com/kb/TS2377</a><p>basically if you have one of those macbooks, it will most likely die sooner or later, if it dies within the first three years you're lucky.<p>2. the trackpad stops working > known issue: the topcase needs to be replaced.<p>3. cd drive stopped working... well.<p>bad quality basically. but i would probably buy one again, because there are no slim pc-notebooks.",1280740018
1567211,comment,1566278,1567016,0,0,codexon,,,"Dons, I know you are devoted to Haskell and will not take any criticism of it lightly. But I am not your enemy. I am willing to praise it myself when it is more suitable. Not when you try to spin it.<p>You and your supporters succeeded in bombarding every article that even mentions Haskell the wrong way with snide comments, and probably won over a few hobbyists. At the end of the day though, the managers making the decisions will not think ""Don Stewart said so, it must be true"". They will find the same conclusions that Jon Harrop, myself, and other people you have ostracized have found. And this will continue until it even if you succeed in suppressing all negative feedback on Haskell.<p>Have a nice day.",1280740008
1567210,comment,1566278,1567202,0,0,jamii,,,"PFP uses monads to represent probability distributions.<p><a href=""http://web.engr.oregonstate.edu/~erwig/pfp/"" rel=""nofollow"">http://web.engr.oregonstate.edu/~erwig/pfp/</a>",1280739998
1567209,comment,1565375,1565375,0,0,known,,,"I wouldn't recommend India to foreigners. You'll be exploited.
Hire some good local managers, if you really prefer India.",1280739995
1567208,story,,,1,0,satyan,"How to choose software projects to work on..",http://onsoftwares.com/2010/07/30/how-to-choose-software-projects-to-work-on/,,1280739979
1567207,comment,1565375,1566113,0,0,tomh-,,,"Can you tell a bit more about the startup scene in Seoul? In my experience Korean web companies are very focused on the local market or they make computer games (but don't hire international people).",1280739975
1567206,comment,1566278,1567020,0,0,jamii,,,">  it's forms (interfaces for getting data into databases) and reports (interfaces for getting data out of databases)<p>Well, with formlets and takusen you're pretty much sorted.<p><a href=""http://haskell.org/haskellwiki/Formlets"" rel=""nofollow"">http://haskell.org/haskellwiki/Formlets</a><p><a href=""http://blog.codersbase.com/2010/08/takusen-tutorial-part-1-hello-takusen.html"" rel=""nofollow"">http://blog.codersbase.com/2010/08/takusen-tutorial-part-1-h...</a>",1280739898
1567205,comment,1566850,1566850,0,0,dkasper,,,"My only regrets are the ideas I don't bring to completion, especially if someone else ends up executing on something similar.",1280739864
1567204,comment,1565884,1565884,0,0,pieter,,,"> ""while"" is up to 92% faster over 100000 repetitions<p><pre><code>    Array#each_with_index    1.3768820762634277  secs    92% Slower
    while                    0.10703921318054199 secs    Fastest
</code></pre>
Don't you mean it's around 13x fast (or 1200% faster)?",1280739839
1567202,comment,1566278,1567144,0,0,tkahn6,,,"Can you give an example of where monads are not used to interact with stateful things? That would be helpful to me.",1280739684
1567201,comment,1566278,1566704,0,0,jrockway,,,"The problem with that Reddit post is that it would take a long time to write du, and Reddit users don't have that long of an attention span.  Some people are being nice and trying to answer, but nobody took enough time (say, a week of work) to generate a really good answer.<p>If you asked any question in the form of, ""how do I write <non-trivial program> in <any langauge>"", and you aren't paying for a week of someone's time to get you a really good answer, you aren't going to get a really good answer.  It has nothing to do with Haskell.  The reality is that programming involves trial, error, and iteration.   People on Reddit can give you good first-drafts, but the final product is up to you.  (If you asked, ""how can I write du in C"", then someone could just paste the source code.  But du isn't necessarily the best implementation of du.)<p>I've written some directory traversal code in Haskell for a work project, and I didn't find it to be particularly mind-bending or difficult.  I did it the same way I would have in Perl or any other language; visit directory, run my computation, collect the answer, recurse.",1280739627
