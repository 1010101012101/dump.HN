ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
1480,comment,363,1479,0,0,vegashacker,,,"Something like a ""code"" tag that you can put around sections of your comment, and within these tags, the formatting will be left alone.  This is supposed to be a technical news site after all, so I think this should be pretty high-priority.  Thanks!",1172645093
1479,comment,363,363,0,0,vegashacker,,,"Better display of source code in comments",1172645018
1478,comment,1452,1458,0,0,vegashacker,,,"I'm rusty on my Python, but I'd have to guess that no, Python's dynamic features don't get you the kind of power that Pascal's talking about.  The key thing to realize is that any particular feature that your language has doesn't necessarily matter.  For example, Python may happend to have a built-in way of doing<p>(with-input-file (in ""myfile.txt"")
  (do-something in))<p>In Python, this might look like<p>withInputFile in ""myfile.txt"":
 doSomething(in)<p>(hey, I told you I was rusty on my Python...especially my totally made up Python!)<p>So maybe the feature came built-in to Python, in which case you're lucky--Guido happened to decide to implement this feature.  But what if he hadn't?  Well, just write your own abstraction.  Obviously, Python can open files and do stuff with the file's contents.  So it seems logical that you should be able to create an abstraction which saves you from writing the same boilerplate that you do every time you open an input file.  Unfortunately, there are some abstractions that *you just can't write* in most languages (including Python).  This file open example is a good one.  Here's another example, in the form of a programming challenge:<p>In Python, create an abstraction called ""debugExpr"" that consumes an expression E, and then does two things:
  1) prints ""Expression E = V"", where E is the given expression, and V is the value E evaluates to.
  2) returns the value V.<p>For example,<p>%python% 6 * debugExpr(2+3)<p>Expression 2+3 = 5<p>30<p>I'm betting you can't implement debugExpr in Python.  So assuming Guido didn't extend the language to implement this feature, you're pretty much SOL.  It's a shame because debugExpr, I think, is pretty darn useful.  It means that you can take any expression in your code and ""inspect it"", without worrying about adjusting the structure of your program, and without affecting its semantics.  Without debugExpr, I'd have to change my example code to be something like this to get the same result:<p>print ""Expression 2+3 =""<p>tmp = 2+3<p>print tmp<p>6 * tmp<p>
YUCK!
",1172644475
1477,comment,1338,1338,0,0,bootload,,,"Not a bad article, bit light on Rails though. <p>INTERESTING QUOTES: '... although there is no reason why fastcgi couldnt be used ...' ~ except it's slower! ~ http://superjared.com/entry/quick-django-benching. '... here is no equivalent of a model-specific SQL refresh  something that could drop a specific models tables and regenerate the needed SQL automatically ...' ~ true, recognised & being corrected ~ http://www2.jeffcroft.com/blog/2006/jul/20/top-ten-things-suck-about-django. <p>SOME POINTS: Two things come to mind that are not mentioned. The first is hosts. What is the comparison between hosts? The second is how mature the language is. If I want to use python and I need a particular module that does 'fo '. it is probably out there somewhere (though it may be alpha or beta it will most likely out of date) unless you want to re-invent the wheel.  I can't say the same for Rails. Ruby is just a younger language with less code mass.<p>QUESTIONS TO ASK: In the end what really matters is how good the idea & business is. There are plenty of Rail based companies I can think of making a go of it. The same applies to Python based companies. If you accept that technology is an amplifier of ideas, will using Rails or Django alone make a better choice? Is the difference between them compelling enough to make a difference?  One area that could tip in Rails favour is ""susinctness"". But Django with it's python code base has more tools to choose from. 
",1172644000
