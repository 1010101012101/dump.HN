ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
1026987,comment,1026983,1026983,0,0,cperciva,,,"I don't offer phone support for Tarsnap; but I do offer email, twitter, and IRC support.  It all depends on what sort of users you have -- I'm quite fortunate in that Tarsnap has very technically competent users.",1262422779
1026985,comment,1026909,1026978,0,0,DarkShikari,,,"Slightly tangential, but I think ""Premature optimization is the root of all evil."" is the most misquoted statement in the history of computer science.  Most importantly, people tend to misinterpret ""premature"" to mean ""any time before the software is done"" or similar.<p>I can't even count the number of times where I've worked on or watched a project where performance is important and the following series of events occurs:<p>1.  Module is designed with that quote in mind: it must be simple to implement and performance is unimportant.  Note that this isn't a prototype: this is a plan for the actual final product.<p>2.  Module is built and finished, then submitted for a review.  The reviewers, knowing the importance of performance for this module, point out a number of ways that the module is extremely suboptimal.<p>3.  Because of the assumptions so heavily ingrained into the module, implementing these performance improvements--which could have been foreseen as necessary far earlier--requires a near-complete rewrite of a large part of the module.<p>It's exactly as if we finished our software and our customer decided that his requirements were actually totally different--except in this situation, it's entirely our fault, because performance <i>was</i> a requirement and we ignored it because we didn't want to optimize ""prematurely"".  If you want performance, you have to design with performance in mind; if you don't, and then decide later you want performance, the cost of your earlier decision is magnified a hundredfold.<p>I have almost never seen that quote used correctly.",1262422474
1026984,comment,1026916,1026971,0,0,cperciva,,,"<i>can we have an example of one of your long functions as to what it does?</i><p>Sure.  main() in <a href=""http://www.freebsd.org/cgi/cvsweb.cgi/src/usr.sbin/portsnap/phttpget/phttpget.c?rev=1.14"" rel=""nofollow"">http://www.freebsd.org/cgi/cvsweb.cgi/src/usr.sbin/portsnap/...</a> is over 400 lines long, and it<p>* Looks up a server's DNS entries,<p>* Connects to the server (trying multiple addresses if necessary),<p>* Constructs HTTP requests and sends them to the server,<p>* If less than one HTTP request is pending, blocks until it can finish writing a request,<p>* Reads HTTP response headers,<p>* Reads an HTTP response body and writes the data to disk,<p>* Prints a status line,<p>* if the server sent an HTTP/1.1 response, loops back to the top to continue sending more requests and reading more responses using the same TCP connection,<p>* and if the connection broke, closes it and loops back to the top to open a new connection and continue downloading.<p>I separated out the bits which could usefully be put into their own functions (e.g., constructing an HTTP request, or reading a \r\n terminated line from a socket), but there was no point dividing up the rest.",1262422423
1026983,story,,,15,16,kyro,"Ask HN: Phone Support Number for Startups",,"How have you guys gone about setting up a support line for your startups? I have a Google Voice account that I never got round to using, so I was considering using that. Do consumers feel more comfortable calling an 800 number? And what other services do you use to manage voicemails, etc?",1262422370
1026982,comment,1026073,1026073,0,0,roundsquare,,,"Very cool.  Two thoughts:<p>1) I wouldn't call the numbers you enter into the boxes ""scores.""  They are really weights - I don't know about others but I got confused by that at first.<p>2) Is there a way to substring searches?  E.g. If I type in ""debate"" I might want ""mydebate"" to come up...",1262422266
1026981,comment,1026909,1026970,0,0,jorgeortiz85,,,"JGit isn't meant to be a replacement for git on the command-line. It's meant to be used inside IDEs and web servers that 1) are already running on a JVM, 2) need to interact with git, and 3) don't want to pay JNI costs. JVM start-up times are a non-issue for these use cases.",1262422178
1026980,comment,1026296,1026296,0,0,namin,,,"Vehicles by Valentino Braitenberg -- a study of theoretical robots whose behavior is interpreted as more and more biologically plausible.",1262422136
1026979,comment,1026893,1026893,0,0,Groxx,,,"""their"" time.<p>And as to ""new"" languages, I'd generally (<i>generally</i>) say no.  A lot of them are under heavy flux, and the people most involved in the community around them are likely going to be the CS-linguists, not the average learning-programmer.<p>That said, if you're looking at language / compiler design, it'd be <i>ideal</i>.  And any programmer with competency in a language or two should branch out a bit into other languages.",1262422048
1026978,comment,1026909,1026974,0,0,Locke1689,,,"Couldn't agree more. One thing to remember though: ""Premature optimization is the root of all evil."" C Git is optimized and fast. Mercurial, with a combination of Python and C, is almost as fast. Maybe not quite as fast, but fast enough for me. A lot of the time those optimizations just don't pay off in terms of programmer time.",1262422044
1026977,comment,1026909,1026970,0,0,strlen,,,"The point of JGit was to provide a Git plugin for Eclipse. In this case the start-time is ""outsourced"" to Eclipse.<p>Seems like there are many other potential uses for this: other Java IDEs, web applications, integration into Java SCM tools - places where Git would be very useful and start-time can be neglected.",1262422042
1026976,comment,1026296,1026296,0,0,namin,,,"The Naked Ape by Desmond Morris -- a zoological study of homo sapiens. A classic nicely supplemented by Our Inner Ape by Frans der Waal.",1262421731
1026975,comment,1026865,1026865,0,0,Groxx,,,"VERY introductory.  i.e., no content whatsoever yet.<p>Also, the grammar / spelling errors literally, physically, pain me.  Proofreading should be considered mandatory for any blog that desires to be taken seriously.",1262421719
1026974,comment,1026909,1026909,0,0,DarkShikari,,,"This has always been true and will continue to be true.<p>It's possible to build a high level language that's as fast as C?  Sure--but only if you restrict the programmer to the same amount of <i>effort</i> in both languages.  If your application is one where it's worthwhile applying a great deal of extra programmer time in order to improve performance, a low level language will <i>always win</i> because it exposes more of the native machine.<p>The goal of a high-performance high-level language should be to provide C-like performance <i>for a reasonably unoptimized application</i>.  Once one starts to optimize a program down to the last instruction, staying on par with a low level language becomes simply impossible for a high level language.<p>In my experience, every level of abstraction one creates away from the machine limits your performance by some amount.  This can be demonstrated without even leaving assembly language!<p>Fastest possible: raw assembly code in a NASM-like assembler.  With this, you can write basically any code possible with no limitations, at the cost of extremely high programmer time costs.<p>Shortcut: Use inline assembler instead of NASM to simplify calling convention and other niceties.<p>Cost: There's now a whole bunch of stuff, like calling convention optimization and computed jumps, which you can no longer do.<p>Shortcut: Use compiler intrinsics instead of raw assembly.<p>Cost: You can no longer tweak your algorithm to minimize register spills because you aren't directly controlling spills anymore.<p>Shortcut: Use a set of macros (like my project does) for handling calling convention, MMX/SSE abstraction, and other such simplifications.<p>Cost: You tend to overlook optimizations that apply to one possible output of the abstraction and not others, resulting in either messes of ifdefs or suboptimal code--the former of which is of course violating the abstraction.<p>Shortcut: Use a framework like liboil to write SIMD assembly instead of native code.<p>Cost: By using generic SIMD operators, you lose access to specialized architecture-specific operations, along with the aforementioned issue of register spills.<p>Here we <i>haven't even gotten beyond assembler</i> and we're already losing performance.  Now scale this up to C and beyond: abstraction inherently comes at a performance cost.  It isn't even merely a function of language: abstractions within a language reduce performance as well.",1262421671
1026973,comment,1022944,1026637,0,0,derefr,,,"I don't see any point in graduation, really. Why stop learning? The ideal school curriculum, in my mind, would have four unassisted co-op terms (i.e. two years of real, normal work) followed by one or two terms of instruction, repeated in a cycle, for as long as you may live. At no point would you be handed a certificate and kicked out of the building; you'd just keep coming back and learning more stuff (presumably in a myriad of unrelated subjects), then going back out and making use of it.",1262421557
1026972,comment,1026896,1026896,0,0,Groxx,,,"It's a really nice breakdown of sub-sequence calculation methods.  If you're doing a letter-perfect diff calculation, or need to know how ""different"" two strings are, this is what you need.  It even includes code and <i>explanations of the code</i> and how it all works.<p>All in all, the post is roughly worth a couple algorithm class sessions.  Worth the read for just about anyone, if only for picking up a few new logical tricks.",1262421494
1026971,comment,1026916,1026951,0,0,yannis,,,"Interesting! Personally I find that once a function is too long it needs refactoring either into an object or more functions although with web stuff one tends to end up with much longer functions. can we have an example of one of your long functions as to what it does?",1262421493
1026970,comment,1026909,1026909,0,0,mhansen,,,"Good article, but it seems to ignore the elephant in the room: the JVM's cold start times.<p>For me, git's use case is being called from the command line, often interactively, between code editing sessions. It needs to start fast and finish fast, to not interrupt my workflow.<p>The JVM's cold start times are huge. On the order of a second. Noticeably slow. So slow, that in the common case of committing a few files, the JVM startup time would totally dwarf the time spent actually doing work.",1262421489
1026969,comment,1026296,1026296,0,0,namin,,,"The Fabric of the Cosmos by Brian Green -- vulgarizes relativity and quantum theories and touches upon string theory, emphasizing the consequences of those theories on the properties of space and time.",1262421478
1026968,comment,1025585,1026247,0,0,Locke1689,,,"They could just create the PDF from the blacked documents in the first place.",1262421452
1026967,comment,1026588,1026663,0,0,covercash,,,"What fields did you have before your leap of faith?",1262421396
1026966,comment,1026296,1026420,0,0,gintas,,,"""Fooled By Randomness"" is an interesting read and its central claim, namely that humans tend to see patterns where there aren't any, is correct and scientifically proved by psychology. However, the book seems to go way too far by occupying a strongly skeptic position and therefore refuting itself.",1262421171
1026964,comment,1026615,1026833,0,0,tlrobinson,,,"He apparently just redirected fundable.com to his new thing.",1262421067
1026963,comment,1026916,1026916,0,0,Groxx,,,"A general rule I hear is screen +~50%.  Once you go beyond that, a study I read a while ago (apologies, no links) showed a huge leap in error, they believed stemmed from our difficulty remembering complex / random things.  With my own testing, I'd say it fits pretty close.  On-screen is pretty limiting, but 2x screen gets harder to be <i>certain</i> about <i>everything</i> in it, all the time.  My error ratio is definitely best when I keep my functions below 2x screen height.<p>That, and once you get into the hundred+ lines of code, you are probably doing something that's more easily summed up as a couple pieces.  Using multiple pieces also has the advantage of it being very easy to rapidly change / experiment with your code.",1262420980
1026962,comment,1022419,1022687,0,0,Locke1689,,,"Just to be clear, the tax is on a transfer of money, not on the money itself. If you transfer only $10 million to your family, the tax will only apply to that $10 million in transfer. Similarly, if you gift them $10 million while they are alive, that money will be subject to taxes.",1262420978
1026961,comment,1022419,1022728,0,0,Locke1689,,,"[citation needed]<p>I see that both gave huge portions of their estates to the Bill and Melinda Gates Foundation. This in no way violates the principle of their position.",1262420852
1026958,comment,1022419,1022625,0,0,Locke1689,,,"The government isn't taxing the estate itself, it's taxing the transfer. See gift tax as well.",1262420622
1026957,comment,1026221,1026221,0,0,jbert,,,"Typo/error on page 4 (of postscript version)?<p>((lambda (f) (f '(b c)))\n '(lambda (x) (cons 'a x)))<p>afaics, the 2nd lambda shouldn't be quoted.",1262420575
1026956,comment,1026296,1026940,0,0,yr,,,"I'm amazed at the number of books you read in one year. Where do you get all the time ?",1262420315
1026955,comment,1026296,1026296,0,0,pizza,,,"The Game (Neil Strauss), hands down. Not so much that I found it useful but rather that it was very interesting to watch a guy hack society and attraction.",1262420302
1026954,comment,1026250,1026645,0,0,psygnisfive,,,"You're one of the first. ;)",1262420292
1026953,comment,1022419,1023239,0,0,Locke1689,,,"Sure. Why not? ""Want to bet"" isn't really an argument in any shape or form.<p>Edit: Interesting. After looking into the Foundation (<a href=""http://en.wikipedia.org/wiki/Bill_&_Melinda_Gates_Foundation"" rel=""nofollow"">http://en.wikipedia.org/wiki/Bill_&_Melinda_Gates_Founda...</a>) I've actually become incredibly impressed by the transparency and general properness with which they have composed themselves. Given the track record of the foundation, I see absolutely no reason to suspect them of foul play now or in the future.",1262420259
1026952,comment,1026421,1026919,0,0,Locke1689,,,"I'm confused to your point, besides a general helplessness.",1262420112
1026951,comment,1026916,1026916,0,0,cperciva,,,"I don't find that it's useful to have any limits on the <i>length</i> of functions; I have code with functions (even main!) are hundreds of lines long.<p>I do, however, find that it is essential to limit the <i>width</i> of functions, and if my code doesn't comfortably fit into 80 columns when using 8-column tabs, there's a clear sign that it needs to be broken up.<p>In general, nested loops are far more of a problem than simple ""do X, then do Y, then do Z"" code.",1262419954
1026950,comment,1026296,1026855,0,0,pizza,,,"Would it really matter? I mean, you could still detect the contrast between the two and walk safely across.",1262419905
1026949,comment,1026615,1026927,0,0,potatolicious,,,"Step #1 to making sure no capable engineers ever work with you: presume to know their craft better than they do.",1262419686
1026948,comment,1026916,1026943,0,0,blintson,,,"50 lines is long as I'd ever let it get, not how long I try to make a function. I think hearing from people about why they had to write long functions is like listening to an airplane's black box. It could provide insight on what a language does poorly.",1262419668
1026945,comment,1026588,1026668,0,0,blasdel,,,"The second password field is necessary to avoid confusing your users.<p>It's the only element that can cleanly disambiguate between a normal 'sign in' and a clean 'sign up'.",1262419425
