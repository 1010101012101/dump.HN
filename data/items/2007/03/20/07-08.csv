ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
5145,story,,,3,0,ryan,"8 tips for a good elevator pitch",http://www.fastcompany.com/articles/archive/act_joos1.html,,1174376539
5144,comment,5143,5143,0,0,staunch,,,"<i>""The firm prides itself the equal status of its partners, in contrast to many other firms, where there can be hierarchies ranging from managing partner on top to the suitcase-carrying principal at bottom. The Benchmark partners took a ""pay-cut"" to bring Lasky on board -- dividing profits (""carry"") and fees by eight, instead of seven.""</i><p>Not knowing much about the way VCs are structured internally I found that pretty interesting. It does seem like a big vote of confidence that they would split profits like that -- just like a startup might.\n",1174376524
5143,story,,,2,1,staunch,"Benchmark Capital takes on 8th partner: Mitch Lasky (Jamdat CEO)",http://venturebeat.com/2007/03/19/benchmark-capital-hires-lasky-of-jamdat-fame/,,1174376387
5142,comment,5018,5018,0,0,ryan,,,"I always liked this post on the value of ideas:\n<a href=""http://www.oreillynet.com/onlamp/blog/2005/08/ideas_are_just_a_multiplier_of.html"">http://www.oreillynet.com/onlamp/blog/2005/08/ideas_are_just_a_multiplier_of.html</a>",1174375569
5141,comment,5126,5126,0,0,brett,,,"In principle I agree with what he is saying: If you know what you are going to need you should put in effort up front so you can react faster later. The problem is with knowing what you are going to need. You hear that startups end up moving away from there initial ideas so often that bar for being sure that you ""know"" what you're going to need is very high. <p>I also think he overstates the difficulties of abstracting out extensible pieces as you go. His point about your # of customers being proportional to the difficulty of refactoring is well taken, but for an early startup this probably does not mean as much as he suggests. On the web you can do a great deal that is transparent to your customers. The risk of this approach might lie more in not having to discipline to take the time to refactor as you go as opposed to not having the technical ability. 37 Signals seems to have had certain project go very well for them by pushing down abstractions as they went (granting however, that everyone can't count on a gang of open source hackers coming in and both contributing to and evangelizing your product's infrastructure - though maybe this isn't a bad goal?). ",1174374568
