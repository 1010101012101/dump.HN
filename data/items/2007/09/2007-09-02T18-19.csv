ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
49487,comment,49443,49443,0,0,pg,,,"If you want a cofounder for a startup: sanity, trustworthiness, determination, general intelligence, hacking skills, and ability to do things you're bad at.",1188759070
49485,comment,49444,49477,0,0,jey,,,"Start simple: store the data in-memory in whatever way makes sense, and just write a log file that contains pickled transactions that can be played back. Conceptual sketch of how I would do it follows. This isn't ""the"" way to do it, just ""a"" way to do it.<p><pre><code>  # this is the utility method used by the rest of your code 
  # to register a new user. maybe this is at module scope in
  # the User.py module
  def register_user(user):
     run_transaction(AddUserTransaction(user))

  # this is the actual object that represents the
  # transaction
  class AddUserTransaction(Transaction):
     def __init__(self, user):
        Transaction.__init__(self)
        self.user = user

     # all Transaction objects have an apply() method
     def apply(self):
       Transaction.apply(self) # invoke base method

       # the following MyGlobalUserTable probably just
       # stores a couple dicts as indexes over the user info
       # e.g. it will have a dict by username, by user ID, etc
       MyGlobalUserTable.add_user(self.user)



  def run_transaction(t):
    # apply the transaction first, then write to the log.
    # since if it crashes while running the transaction,
    # you don't want to crash again when you play back the log.
    t.apply()
    transaction_log.append(t)

</code></pre>
Here transaction_log.append(t) is some method that will pickle the transaction and append it to some log file. You'll have multiple classes like AddUserTransaction, all derived from Transaction. When you crash and want to play back the transaction log, all you have to do is unpickle the Transaction-derived objects and call apply() on them in the same order. <a href=""http://docs.python.org/lib/module-pickle.html"" rel=""nofollow"">http://docs.python.org/lib/module-pickle.html</a><p>Caveats:<p>-- This will eventually get to have too large a startup cost to play back all the transactions, when you have a huge number of transactions. You can fix it at that point, and you can just replay all the transactions to get the data imported into the new format.<p>-- The above approach is horrid if you want to launch a new process for every single request. You'd have to replay the transaction log for each incoming request, you'd have a data coherency nightmare, etc. So if you want to use this approach, make sure you're using something that shares one process amongst all requests.<p>You might also need to worry about whether your server is multithreaded and in that case deal with locking and other crap. I'd suggest going simple with something like Twisted's single-request-at-a-time approach. This isn't as bad as it sounds at first; you just write everything to finish ASAP, and if there's something you need to come back to, you just request the Twisted Reactor to schedule an event. If you have some big blocking thing to do, do it in another thread then notify the Reactor when it's complete (and have the Reactor schedule an event for your code to be notified that the big blocking thing finished).<p>As you can see, it's not totally trivial and general purpose like the RDBMS + ThingThatGeneratesNastySQLFromObjects approach (aka ORM). But you get more flexibility in your interfaces, and lower overhead. While it can be rewarding and simplifying to work in this way, it could also can lead to over-engineering and/or lost time and effort if you aren't already intimately familiar with the steps in this approach.",1188758740
49484,story,,,7,0,brett,"Ask the Wizard: What is obvious to you is not necessarily obvious to others",http://www.burningdoor.com/askthewizard/2007/09/lessons_learned_obviously_its.html,,1188758492
49483,comment,49444,49460,0,0,dood,,,"I wasn't really after a pre-packaged framework necessarily. I'm also very pleased with Pylons so far, getting a non-RDMBS thing to play well with Pylons could work out very neatly.",1188758238
49482,comment,49444,49444,0,0,mxh,,,"Twisted is an interesting framework, though a little lower-level than others.  I think you could build a self-contained, in-memory solution around it, as DBs aren't particularly central to its operation.
",1188757711
49481,comment,49266,49278,0,0,aston,,,"Seriously? Me, too. Sweet.",1188757435
49480,comment,49440,49440,0,0,nablaone,,,"
<a href=""http://www.usemod.com/cgi-bin/wiki.pl"" rel=""nofollow"">http://www.usemod.com/cgi-bin/wiki.pl</a>
",1188757414
49478,comment,49464,49464,0,0,wmf,,,"Yikes, where to start.<p>""Databases store data to disk. Thats all what 90% of us use them for. They are essentially elaborate hash tables backed by a disk drive.""<p>Sure, if you don't need indices or transactions.<p>""a disk failure is still a major disaster. Even if you have backups, even if you have replication, there will be downtime and manual labor while a new master server is established.""<p>If you use a dual-port, dual-controller RAID 10 with hot spares, you'll never even notice a disk failure. (No wonder the SmugMug people are so smug.) But I admit replication is a great solution for people who consider their time to be a sunk cost.<p>""Databases never put your 10-20 commodity server boxes with all their spare disk space to use.""<p>At least this is true (for now). Given that Web 2.0ers apparently don't care about most database features anyway, maybe HBase will solve this problem.",1188757241
49477,comment,49444,49470,0,0,dood,,,"I should have been clearer in the question, I'm not looking for a solution to a specific problem, I'm looking for a general approach to building this kind of system, or an understanding of the benefits and trade-offs of different methods. I understand why RDBMS are normally used, and am comfortable with SQL, but I'm interested in the alternatives.",1188757207
49476,comment,49266,49266,0,0,jey,,,"She sounds like a talking Markov chain.",1188757186
49475,comment,49383,49383,0,0,joe,,,"I'm glad Steve doesn't take himself too seriously.",1188757067
49474,comment,49440,49440,0,0,jamesbritt,,,"I'm a fan of DokuWiki.  Easy to install, no database (so easy to write grep-like tools to do fun things with text file content), fairly decent permissions scheme.
",1188757062
49473,comment,49440,49440,0,0,DocSavage,,,"MediaWiki is the most used/supported wiki app.  It has plenty of extensions. It's weak if you need wiki silos that require separate authorization.  (There are extensions for controlling access, but it's added security and they have to patch holes where you can see data that should be protected.)<p>I like the simplicity and DB-free nature of DokuWiki. Because wiki pages are simple text files, you can easily add wiki pages through some scripts and backup/syncing is as easy as it gets.  The plugin architecture is good. Uploads go a namespaced upload area, so it's easy to embed and share uploaded files between wiki pages.<p>MoinMoin is an OK wiki with the advantage that it's python.  It's fairly easy to create wiki farms with MoinMoin, and you can add ""macros"" so pushing a button will get you a wiki page from different templates.  Sections in a wiki page (delimited by headers) aren't independently editable, unlike the two PHP wikis above. User uploads are through page-specific attachments, unlike the more global space for file uploads in DokuWiki. You can have an ACL per page, but I like the Authorization system in DokuWiki better because it allows ACLs for entire namespaces.<p>All of the above are easily skinned. For example, in DokuWiki, we can change from my lab website skin (<a href=""http://taylorlab.stanford.edu"" rel=""nofollow"">http://taylorlab.stanford.edu</a>) to the default skin (<a href=""http://wiki.splitbrain.org/wiki:dokuwiki"" rel=""nofollow"">http://wiki.splitbrain.org/wiki:dokuwiki</a>) using a drop-down menu.",1188756881
49472,story,,,2,4,rokhayakebe,"Can one of you create a web based email aggregator?  ",,"I have several email accounts with several providers . Can one of you guys cr8 something really nice and simple to use so i can have one interface to manage my emails. I know some startup has done it, but if i cannot remember their name that is not a good sign. Thanks in advance",1188756831
49471,comment,47754,47870,0,0,tipjoy,,,"Thanks.  I've been thinking about your advice and I made a quick mockup of sparklines which show 4 bars, each representing a week, where height is average popularity over that week, and darkness of the bar is how many posts there were that week:  <a href=""http://www.tipjoy.com/our2cents/2007/09/sparkline_update.html"" rel=""nofollow"">http://www.tipjoy.com/our2cents/2007/09/sparkline_update.htm...</a>",1188756755
49470,comment,49444,49444,0,0,jey,,,"Depends, what are your requirements or what does your program do?<p>RDBMSes are popular because they're easy and they perform decently for most answers to the previous question. And it may be that an RDBMS <i>is</i> the best answer for your application.",1188756390
49469,comment,49468,49468,0,0,nostrademons,,,"This looks vaguely familiar...",1188756270
