ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
64247,comment,63009,63315,0,0,pg,,,"I wondered if anyone would bring that up.  I think another thing that will happen is that acquirers will figure out how not to ruin the startups they buy.  <p>A company that bought a bunch of hot startups early on and didn't destroy their productivity would be a force to reckon with.",1191711585
64246,comment,63617,64228,0,0,bilbo0s,,,"Is there a feature on this site that will allow me to send you my email on a private channel?",1191711509
64245,comment,64112,64180,0,0,Tichy,,,"Hm, let's say I want to take a slightly different approach from Ponoko and the likes.<p>Maybe in a week I will talk more about it ;-) Anyway, definitely serious stuff, not just a niche market.",1191711192
64244,comment,63702,64214,0,0,olavk,,,"Alway handle errors locally? That seem to break both modularity and abstraction. <p>Consider a module that does some IO. The module might be used in different kinds of apps, both GUI apps, services and command line apps. How should this module handle a ""disk is full""-error? Should it show a dialog with a warning, or write the message to the console and die? The appropriate action would be completely different depending on the type of app and the context wherein the module is invoked.<p>Exceptions allows the module to delegate the error handling to the right level of abstraction. ",1191711115
64243,story,,,2,0,cbetta,"MeeCard - A Snippet of Youness Online",http://fourstarters.com/2007/10/06/fowa-roundup-meecard-a-snippet-of-youness-online/,,1191711038
64242,story,,,2,0,cbetta,"Blurb - Self Publish Without Webapp",http://fourstarters.com/2007/10/06/fowa-roundup-blurb-self-publish-without-webapp/,,1191711016
64241,story,,,2,0,cbetta,"FlexiScale - A Good Alternative to Amazon EC2",http://fourstarters.com/2007/10/06/fowa-roundup-flexiscale-a-good-alternative-to-amazon-ec2/,,1191710996
64240,story,,,4,0,cbetta,"Use OpenID Beyond Authentication",http://fourstarters.com/2007/10/06/fowa-talk-use-openid-beyond-authentication/,,1191710969
64239,comment,63978,64135,0,0,electric,,,"""It's an online rolodex! ""<p>LinkedIn is.  <p>",1191710449
64238,comment,64028,64237,0,0,rms,,,marked,1191710396
64237,comment,64028,64163,0,0,SonOfLilit,,,"This is one of the best pieces of advice that I've ever given, so mark it :)<p>\nTo approach a hacker and not be ignored, you need one thing: to be a hacker.\nNow, if you're not a software hacker, just don't talk about software. Start a conversation about astronomy, psychology or whatever the field is where you really HACK. By HACK I mean you are so knowledgeable that you flow, you are very curious for the hell of it and you constantly experiment and innovate. Now, it could even be DANCING. It doesn't matter. We hackers love to hack together. I'm an electronics noob, I have a good friend who's an electronics hacker and when he tries to break down his ideas to me like you tell a three year old I barely follow, and yet I love to spend nights hacking electronics with him, even if sometimes all I can do is turn the screwdriver. It's so much fun to experiment and innovate together, or talk about cool experiments in a field you love.\nSo hack together, get to know the guy, and THEN suggest a project in his field, and if he likes it - you're in. Clue: he'll like it 90% of the times.<p>For example, I met this bioinformatics Ph.D. in a Ruby User Group where he came to look for programmers for his really cool web startup. He could do some perl and pascal but wasn't a developer. We started talking about his startup ideas, my startup ideas, genetic music composition - whatever came to mind. During the conversation it happened that we INVENTED NEW THINGS together. Today I advise him technically for free, just because it's fun to work with him, sometimes a few hours a day.<p>\nAur",1191710243
64236,comment,64147,64147,0,0,DaniFong,,,"\ncowmoo,<p>The vast majority of startups fail. An important corollary: The vast majority of social networking startups will fail. Social networking has, predictably, massive network effects. There's only going to be room for maybe a dozen major winners. Everything else will be a niche or be eventually undercut by open source. For some reason most founders don't recognize that.<p>I'm someone who can't handle corporate dronery. In a graduate school environment (at a top school in physics) I was, intellectually, quite happy -- some of the smartest people in the world go to grad school, and while they're shirking on their advisors they can be incredibly interesting and productive. <p>So far, the only experience I have with startups is trying to, unsuccessfully, suggest to them what to do (it's difficult to convince people to modify their sacred ideas...) and trying to found two (one, something that was to be a working web annotation engine, I was working on this before Diigo was announced and got millions in funding, in retrospect I could have beaten them anyway because their entire approach is ill-conceived) and my project that I'm working on now (it's going to change the paradigm of Healthcare online and perhaps fix healthcare in the USA -- no joke. I merely need to avoid being jailed for hyperbole -- email me if interested, especially if interested in cofounding for the winter founders program.)<p>But grad school in CS isn't really school. You're given a lot of free time, a license to basically study what you want, if you play it right. That's extremely valuable, but it isn't necessary, and it might be more productive to learn how to do that without going to grad school at all.<p>Just avoid the corporate vampires, that's all.<p>Dani<p>(Dani <dot> Fong <at symbol> gmail)",1191709937
64235,comment,63978,64164,0,0,mattmaroon,,,"That sentence ""Platform is the Bubble 2.0... was speaking about platforms in general. Average Joe doesn't know or care about platforms. Average Facebook user (who is far from Average Joe) may know about some of the apps on Facebook, but has yet to find anything compelling and never really will.",1191709878
64234,comment,64148,64179,0,0,rms,,,"You don't need funding, but getting money lets you take advantage of the irrational exuberance of the VCs or the FREE MONEY that the Facebook grant fund is offering.",1191709716
64233,comment,63978,64186,0,0,mattmaroon,,,"Weren't business professionals Rolodex's target audience as well?",1191709695
64232,comment,63978,64172,0,0,mattmaroon,,,"eBay was not started to sell Pez dispensers. That's a marketing myth they perpetuated which has since been recanted. A brief Wikipedia search shows that it was story crafted by a brilliant P.R. agent a couple years after they'd launched.",1191709540
64231,comment,63978,64127,0,0,mattmaroon,,,"Andreesen is wrong on so many fronts. The biggest is <p>""The web, after all, vanquished proprietary online services like America Online, Prodigy, and Compuserve -- the so-called ""walled gardens"" -- in large part because the web is a platform and the walled gardens were not.""<p>Umm, no. Broadband vanquished them. They allowed unfettered internet access long before they began their downward spirals. I had AOL in high school, when they were approaching their zenith, and never used any of the walled features, just internet and IM.<p>When you phrase platform the way he does, it sounds superior. When, in reality, you have people piling layer on top of layer until what remains is something so complex and unreliable that few people can understand or tolerate it, you end up with something nobody wants.<p>And honestly, anything is a platform once somebody turns it into one. Myspace most definitely is. People make good livings just making layouts for it. Photobucket got rich off of it. Lots of indie bands sold concert tickets and CDs thanks to it. Dane Cook owes it his entire career.<p>So in the platform race, Facebook is losing. They're a more restrictive platform built onto a smaller one.",1191709259
64230,comment,64028,64030,0,0,bluishgreen,,,"Try kaizen to become a hacker. It worked for me. ",1191709253
64229,comment,63916,63916,0,0,tlrobinson,,,Legos.,1191709145
64228,comment,63617,64076,0,0,motoko,,,"A smart guy like you doesn't need to be so owned by an office such that people can't come to <i>you</i> on their time. Why not post an email address?",1191709060
64227,comment,63916,64224,0,0,rms,,,"to disqualify malicious hackers, probably",1191709054
64226,comment,64129,64134,0,0,cperciva,,,"I haven't used 411 recently; but if I used it at all, I guarantee that my girlfriend wouldn't approve of me using it for that purpose.",1191708994
64225,story,,,5,8,DaniFong,"Favorite Language/Editor Features",,"(Originally posted on the TopCoder forums)<p>What are your favorite language or editor features, or what would you love to be able to use?<p>Some of my favorites are closures, dynamic typing, mix-ins, and functions as first order objects. Originally these were just neat features, but I've found myself using them as the best way to express my ideas in code, even in a contest situation. Actually, C#'s anonymous delegates are the reason I use it in contests, despite generics being quite a bit weaker than templates (superficially they seemed as powerful, but as a scientist the first thing I would want to do is code numerical routines in a generic fashion, and guess what -- you can't even ensure that a certain class can use regular operators. This really bugs me.)<p>I'll also admit to being swayed by Paul Graham's Essays, and I'd love to try out some of the interesting macro hacks that he speaks of, but so far I haven't had many opportunities to do so.<p>There are a few dream features I'd love to use, even though I'm not sure if they'd be altogether useful. I've just never seen them before, and I figure that language/editor design is something fun enough that I'd like to throw them out there to see what people have to say.<p>There's a pattern running through most of these requests, namely that programming languages seemed to have evolved and entrenched themselves at a time when terminal capabilities enforced a text-only approach to programming. Now we have real-time 3D games producing life-like imagery, but for some reason, programming has only incorporated such features into a layer on top of the languages (like the facilities in ReSharper, which has made my programming much more enjoyable). I want to know how much farther you can push things.<p>1. Support for different fonts and symbols, native to the code, and extremely accessible to the editor.<p>This might just be my background in math, but I'd love to declare my variables using Greek letters, declare a function using a big beautiful, curly, math blackboard font F, write case statements using a curly brace { and conditionals on the right side, access array fields with subscript notation -- or tensors using super/subscript notation, and have all of that shown to me graphically.<p>Again, I'm not sure if it's just my background, but when I see people sketching out a program on a blackboard, or on scratch paper, or formatting it for publication, it doesn't look like code, but much more like formulas. They don't use massive variable names -- they declare these once, like in documentation, and then proceed to think using this extremely compressed language, with one letter identifiers and mathematical notation. I don't know why languages haven't done this yet. (Edit: actually this might be a good jumping off point. Scoped aliases, which would work like c-macros, not references, but they'd be scoped)<p>2. Support for mathematical notation like summation (the Sigma symbol), or products, or set operations, and so forth, in the code. I also think a facility to distinguish between enumerable, comparable, and hashable objects and data structures might be a win, but it seems quite heavy-weight.<p>3. Easy and straightforward access to random numbers and characters within a range, in the code. It's no secret that random numbers are useful for a wide range of problems. They're so useful that it seems silly that every time I want one, just any old random number, that I must declare a randomization object, then type Rand.Next(0,100) or whatever. Why can't I write ~(0,100) or something?<p>4. A graphical representation of state machines. Over and over again, state machines seem to drastically simplify a large number of otherwise difficult problems. We can work these out on paper, but then we can't ship them with the code. Or we can use some external program to draw things for us, and then ship the doc with the code, hoping that people will read it, and not let it get out of sync. Why not have simple facilities for writing or detecting state machines, and then graphical representations of them? With facilities like Yield, Iterators, and object wide booleans, we're halfway there.<p>5. Interactive compilation. I don't just mean like a regular interpreter, I mean something more like when in Mathematica or Maple, you type in a command, hit the enter button, and it produces something that the program compiles down to. ""What's the derivative of some long expression?"" Write it, take the derivative, and it tells me. I want to be able to ask, ""What code is produced when I pass this closure to this function?"" Write it, hit enter, and it should be able to say.<p>Do you guys have any other dream features? Anything so good that it would compel you to try a new language? Why?",1191708706
64224,comment,63916,64020,0,0,bct,,,"Why qualify it with ""safely""?",1191708626
64223,comment,64112,64180,0,0,weber,,,"Do you mean building on demand hardware something like assembling pcs with 4 gb memory OR building fpgas (or asics) that solve your client's problems in hardware? ",1191708609
64222,story,,,1,0,amichail,"Donald Knuth Questions Answered Video",http://video.google.com/videoplay?docid=3147833455273735180#8m45s,,1191708554
64221,story,,,2,0,bluishgreen,"The Future of Cognitive Computing - Panel Discussion (vid)",http://video.google.com/videoplay?docid=41347195024906280,,1191708510
64220,comment,63978,63978,0,0,alaskamiller,,,"AOL was the internet to a lot of people. Why we regressing? We used to make fun of AOL people. ",1191708436
64219,comment,64034,64146,0,0,neilk,,,"I checked out your blog. Someone who blogs about Scala doesn't need schooling from me on CS. ;) I think I see what you're doing now.<p>Ok, to tell you the truth -- this is something I've wondered about recently myself. I happen to know about the codebases of several successful Web 2.0 sites post-acquisition. And in many cases, they used the naive solution and got away with it until acquisition. It's difficult to blog about these things in public, but I've circulated similar speculations privately, that maybe all CS knowledge is a huge waste of time for entrepreneurs.<p>Using naive solutions has definitely worked for some startups. But it comes at a fairly heavy price. You are essentially betting everything on being acquired before you get so slow that your own users start hating you. Once acquired, you then get a reprieve from death, and then you spend about one year building your 2.0 version that actually scales decently (all the while fighting fires with the clunky 1.0 version). Meanwhile your users scratch their heads wondering why, once you got all that money, you stopped building any new features. This pattern has been repeated many times for successful web 2.0 startups.<p>Contrast that situation with a company like Google or Facebook. One of Google's main advantages was scaling, from their algorithms to their ability to create vast computing infrastructures. Facebook acquired this sort of talent a little bit later in their history, but they are definitely there today. So when they got offers to buy their company for millions of dollars -- even a billion dollars -- they were able to say no. Because they knew they could grow faster by themselves. Last year Zuckerberg was considered an idiot for turning down a billion dollars. But he knew that F8 was in the pipeline, and he was very smart to say no.<p>Being able to scale means freedom. Ignoring scalability is a high-stakes bet. But either strategy might work, depending on what the startup's business model is, and the talents and inclinations of the founders.",1191708423
