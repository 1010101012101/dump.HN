ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
34096,comment,33931,34021,0,0,sethg,,,"Even that would be too generous.  Brainfuck, Befunge, INTERCAL, and Java2k were <i>jokes</i>, duh, never intended by their authors to ""take off"" in the first place.  And I think ""never took off"" and ""waned"" are both inaccurate when applied to Haskell.<p>I don't know much about VRML, SMIL, and Haskell, but I'm not inclined to trust this author's judgement of them.",1184353085
34095,comment,34057,34057,0,0,sethjohn,,,"My sense is that the people in charge of Facebook are happy to take big risks with their company, and I don't see why they shouldn't.<p>Whether the company sells now for $6 billion or tanks and sells for $600 million in a few years, they'll have a lifetime of riches. With money a less important consideration, the question becomes which would be a more interesting activity for the next decade: Building a globally powerful company that fundamentally changes how the internet game is played...or becoming idly rich?<p>Financial risk/benefit calculations are much different for an individual than they are for a large corporation.",1184352975
34094,story,,,1,0,gibsonf1,"Getting outsiders involved in sites: Conference examines user-generated content",http://www.sfgate.com/cgi-bin/article.cgi?f=/c/a/2007/07/13/BUG6AQVG6G22.DTL,,1184352498
34093,comment,34065,34072,0,0,jsjenkins168,,,"The GoF book is great as a design patterns reference (despite its age), but I would personally recommend Design Patterns Explained by Shalloway and Trott if you are new to the concepts.. Its much better at teaching you the thought process of why and when and when not to use design patterns, which is probably more important than the design patterns themselves.",1184352227
34092,comment,34065,34091,0,0,brlewis,,,"Except Gopher and TechInfo already had graphical interfaces in 1991, on more platforms than the WWW, where you could click to get the information you wanted.  I think it was the IMG tag that initiated a lot of the excitement about TBL's project.  You could already browse words and images separately through existing information systems.  It was putting them together that gave the WWW lots of momentum.",1184352219
34091,comment,34065,34087,0,0,nostrademons,,,"No, there was no image support in the original HTML.  TBL wanted image tags that opened the image as a new document; Marc Andreesen and Mosaic pushed it through as an inline element.<p>The reason that GUIs helped so much is that you could <i>click</i> on a hyperlink and it'd take you directly to the page.  There are often lots of hyperlinks on a page: it's very cumbersome to navigate between them with the keyboard.  (Trust me, I spent a year using Lynx over a 2400 baud modem before we got a real Internet connection. ;-)).  And any interface like that locks out the vast majority of potential users, who don't want to remember that 'g' lets you go to a url or arrows select or that you hit space (or was it enter?) to follow a URL.",1184351780
34090,story,,,20,1,thingsilearned,"The Dangers of a Startup",http://thingsilearned.wordpress.com/2007/07/09/the-dangers-of-a-startup/,,1184351715
34089,comment,34065,34065,0,0,jsjenkins168,,,"If you are interested in learning more about core technologies in an area valuable (in terms of future technology trends), I would advise learning more about networking.<p>Having strong networking knowledge is very useful and can be applied to cool areas of growth such as the Internet and mobile devices. I took a graduate level course in networking as an undergrad and it was one of the best decisions I've made.<p>If you want to teach yourself, I recommend the following books:<p>Computer Networks by Andrew Tanenbaum - This book is from 2002, but is still considered the Bible of Networking. It covers all of the advanced topics and is great as a reference. You can pick it up used for cheap.<p>TCP/IP Socket in ____ by Michael J Donahoo - This is a series of books that cover network programming in different languages. There is a C/C++, Java, and C# version of the book that I know of, but there might be more now too. These books are very concise and to the point and teach you everything you need to know to write advanced network programs.",1184351634
34088,comment,34033,34033,0,0,sethjohn,,,"Hmm, did the auction start before the TC article, or after?. <p>Seems like an incredible steal right now at $7500 with such a positive TechCrunch writeup and all the associated buzz that is sure to follow. I wonder where the bidding will end...$100K?",1184351535
34087,comment,34065,34081,0,0,brlewis,,,"Was there image support in HTML in 1991?  I thought NCSA Mosaic introduced the IMG tag later, apart from any standards process.  I think the only thing graphical about browsing in 1991 was that the NeXT browser could do header, bold and italic.",1184351509
34086,comment,34065,34065,0,0,maxklein,,,"There are no significant advances in algorithms worth looking at, in my opinion. Current hardware only supports bruteforcing things by optimizing cycles or throwing more cycles at things. You can do that by improving hardware, and that will come in any case.<p>Real advances only come when new _ways_ of doing things appear. And for that, just reading tech news is enough. For example, the Table Top PC.<p>The only really two significant areas where algorithms can still make a difference are in video manipulation / object recognition, audio manipulation and artificial intelligence.<p>But you'll find that in those areas, advances are usually very complex and difficult to monetize.<p>It's much more effective to just look at advances in hardware, and figure out what you can do on a software level to take advantage of this hardware.<p>But even better, look at the internet, and watch as data opens up. Use that data to create new things.",1184351311
34085,comment,34065,34065,0,0,brlewis,,,"Crash a social event at a school with a strong CS department and talk about your work.  I bet people will be more than happy to give you pointers.  The academic world is overflowing with ideas that ought to be more widely used but aren't.  Academic people like it when you take their ideas and run with them.",1184351211
34084,comment,34050,34050,0,0,maxklein,,,"Cool. I suggested this a while back as a feature for a startup.",1184350881
34083,comment,34065,34073,0,0,juwo,,,"thanks. I notice though it may be a bit dated - 1999. ",1184350767
34082,story,,,5,0,wmorein,"Writeup of interesting VC panel at Fortune iMeme conference",http://blogs.barrons.com/techtraderdaily/2007/07/13/fortune-imeme-vcs-talk-about-the-new-tech-economy/,,1184350763
34081,comment,34065,34065,0,0,nostrademons,,,"I'm going to say something heretical here: I don't think entrepreneurs should base their companies off the latest advances in computer science.  Problem is, many of them are really ""bleeding edge"", and even the researchers themselves don't know all the implications for them.  <i>Nobody</i> has a clue where they might lead, or if anyone will ever find them useful.<p>Instead, you should look for the stuff that came out of academia 20 years ago but was rejected as unfeasible, useless, or just plain idiotic.  Then keep an eye on economic trends that change the assumptions that made those discoveries useless.  If you keep in mind a large enough set of rejected technologies and a large enough set of economic changes, eventually you'll find a match between them.<p>Some examples:<p>The architecture, performance, and programming techniques for early microcomputers mimicked 1950s mainframe technology.  Many of the features of PC OSes were considered incredibly backwards at the time - no multitasking, segmented memory, assembly language coding.  Yet this primitive hardware cost perhaps 1/10,000th of a 1950s mainframe and fit on a desk.  This opened up a whole new market, one that was willing to put up with buggy software, single-tasking, and limited functionality.<p>Java consists mostly of poor implementations of ideas from the 1960s and 1970s.  Garbarge collection was invented in 1960; object orientation in 1968; monitors in 1978; virtual machines in the early 1970s.  Yet Java targetted the PC, Internet, and embedded device market that had previously been limping along with C/C++ and assembly.  To them, these innovations were new, and performance of devices was just barely improving to the point where they were becoming feasible.<p>HyperText was invented in 1960- actually, you could argue that Vannevar Bush came out with the concept in 1945.  But there was no easy physical way to put together large amounts of information, so Ted Nelson's Xanadu project went nowhere.  Fast forward to 1991: the Internet had linked together most research institutions, and PCs were becoming powerful enough to support graphical browsing.  When Tim Berners-Lee put the WWW up, there was a ready infrastructure just waiting to be expanded.  And the rest is history.<p>PC video has been around since the mid-1990s: I remember recording onto a Mac Centris 660AV in 1993.  Flash has also been around since then, as has the Internet.  Previous attempts to combine them failed miserably.  Yet YouTube succeeded in 2005, because a bunch of factors in the environments had changed.  People were now comfortable sharing things online, and many people now have broadband access.  Cell-phone video makes it really easy to record, without expensive equipment.  And the rise of MySpace and blogs made it really easy for people to share videos they'd created with their friends.",1184350700
34080,comment,34057,34057,0,0,epi0Bauqu,,,"Does anybody else think this logic is crazy?  I believe Facebook's two major financing rounds were for $13M and $25M (see <a href=""http://www.startup-review.com/blog/facebook-case-study-offline-behavior-drives-online-usage.php"" rel=""nofollow"">http://www.startup-review.com/blog/facebook-case-study-offli...</a>).  Given those numbers, they couldn't have taken that much money out compared to what they would be able to take out in a $6B acquisition.  We're talking like a 1:500 ratio.  <p>And they may not ""need"" anyone right now, but that doesn't mean they shouldn't sell at that price or that they don't have real risks to their business.  There is always risk in moving forward, and in their case, I think there is a whole lot of risk.  Their perceived valuation is tied up in (a) continual increases to their traffic; (b) continual dominance in the college age group; and (c) longer-term, in their creation of real earnings.  Any perception that they will not deliver on any of that and the offering prices will immediately drop off that ridiculous multiple.  <p>Firms like Google may not care about their earnings, but I think other firms like Microsoft, Viacom, and Yahoo do, and if those firms fall by the wayside, the ultimate sell price is going to go way down.  Of course, they could IPO too.  But they should do it quickly while they are still hot.",1184350527
34079,comment,34065,34074,0,0,brent,,,"Fads usually come with a fair bit of unsubstantiated hype (like RoR and Ajax) whereas algorithms (and such) are not usually hyped at all in the media (sometimes due to copyrights on their publications [journals] and sometimes due to academic obscurity, abstraction, or even complexity).",1184350444
34078,comment,34065,34076,0,0,juwo,,,"clarification: Cormen is wonderfully easy to read, relatively speaking. I learnt from Automata Theory, Formal Languages, and Computation, by Aho, Hopcroft, Ullman. 
That was <i>hard</i> :)",1184350226
34077,comment,34065,34076,0,0,far33d,,,"They made ACM with digital library close to $200... ugh.
",1184349964
34076,comment,34065,34071,0,0,nostrademons,,,"How else are you gonna pay for the ACM membership? ;-)<p>Really, it's a matter of making time for reading and learning.  Pick up a paper sometime at night when you don't feel like coding and would otherwise watch TV.  Or print it out and read it on the subway or carpool.<p>You also mentioned Cormen being too hard for the ""average developer"" and covering stuff you didn't learn in college.  Cormen is intended as a textbook for later undergrads or early grad student courses.  If you didn't learn the material in college, Cormen is your chance to learn it.  And you have to treat it just like you're in college again - really, you can't expect to just magically know things.  The whole <i>point</i> is to learn from it - if it covered stuff you already knew, there'd be no reason to read it.",1184349898
34075,comment,34051,34051,0,0,donna,,,"Since nobody has figured out how to make money off their databases then an API won't heard them.",1184349700
