ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
109834,comment,109726,109726,0,0,ericb,,,"Another interesting possibility, which I almost wrote about, is robotic warfare. If there are truckloads of robot shells in the combat zone and US troops who clock into at an office building in the US to pilot them, how can an enemy fight that? Every time you destroy a bot, another one walks out of the warehouse. Our soldiers are already trained for this.  Just like a video game, you get 'killed' then respawn.",1202237972
109833,comment,109360,109639,0,0,akkartik,,,"That's a good point. Thanks.",1202237972
109832,comment,108172,109114,0,0,mooneater,,,"I'm struggling with this though I can tell it will be well worth it.<p>Try the peepcode git tutorial, which includes info on migrating from svn.",1202237924
109831,comment,109802,109816,0,0,mechanical_fish,,,"<i>Book exercises are boring and will ruin your motivation.</i><p>I would agree with you about 95% of the computer books on the market. But, if you find the shortest and least pedantic books, they can be really helpful.<p>Greenspun had a fun rant about how book publishers insist on producing gigantic doorstopper books in the style of <i>Learn Blub in 21 Days</i> -- 850 pages, only about 150 of which are actually useful, and the rest of which consist of tedious examples and filler material and stdlib documentation which you'd much rather just look up online when you actually need it. He argued that, e.g., Cooper's <i>About Face</i> was a good 125-page book trapped in the body of a 600-page book.<p>Of course, I've already admitted on this thread that I haven't really read K&R, so I can't speak from experience, but I've heard it said that K&R is the essence of a great language book: it's <i>short</i>. It doesn't feel the need to seem heavy in order to seem important.",1202237274
109830,comment,109802,109802,0,0,wallflower,,,"I was trying to learn Salsa dancing by watching videos on the train. That really didn't work and in fact was counter-productive. Weekly lessons here and there helped but I really didn't start climbing up the pretty-steep Salsa learning curve until I started messing up on the dance floor dancing with random women. You can't simulate experience and the hardest thing was getting started (and continuing). I think you learn by taking on new experiences (if you do the same thing at work every day, you're bored and not learning).<p>Programming is similar. We make mistakes and brute-force our way through. We start to recognize patterns. That's experience. It's a lot easier however (even though it's all in the head) to do fail in something if it's only you and the compiler/runtime (who cares if it doesn't work right away, you know it will) - when other people are involved, it's a lot harder (fear of what people think)",1202237029
109829,story,,,1,1,pius,"What Is a Living Wage?",http://www.nytimes.com/2006/01/15/magazine/15wage.html?_r=1&oref=slogin,,1202236950
109828,story,,,1,0,terpua,"Is the Democratic Party, well democratic?",http://www.msnbc.msn.com/id/18277678/,,1202236780
109827,comment,109802,109802,0,0,bfioca,,,"Trial and error.  I'm a tinkerer.  I learn just enough to get me going, and then I tinker with everything until the rest comes.  Seems more efficient, but sometimes I miss out on some fringe things.",1202236762
109826,comment,109802,109802,0,0,mechanical_fish,,,"My style is different, of course. :) I tend to learn new things by reading, or at least skimming, the best book I can find, first. I like having an overall perspective on the scene before getting into the weeds.<p>For Scheme, I read SICP, of course. For Java and C++, Bruce Eckel. For Ruby, _Why followed by the Pickaxe. For Emacs, I read <i>Learning Emacs</i>, a very good book. I even learned Perl from a book, although not the Camel book, which is torture to read -- I used Randal Schwartz's <i>Learning Perl</i>, which was very good. I learned CSS by reading Eric Meyer's O'Reilly book, pretty much cover to cover, as well as Dan Cederholm's book. I learned SQL (and Tcl as well) from Greenspun's books (e.g. <i>SQL for Web Nerds</i>) which weren't really dedicated and pedantic SQL tutorials but were, in a way, much more useful.<p>Of course, I'm the guy who got bored with BASIC as a kid and decided to teach himself Pascal. So I read a few books on Pascal. Unfortunately, we didn't own a computer at the time, and the library didn't have a Pascal compiler, so I didn't get to compile a Pascal program until two years later. So maybe I just got into that habit early and never really lost it.<p>Of course, you can't actually learn a language from a book. You have to practice a lot to get the syntax and the semantics and the idioms into your fingers. So it's just a question of whether you do the reading first, or second.<p>There are quite a few exceptions to my usual rule. I know a bunch of C, but I never read a really <i>good</i> C programming book. Of course, that means I get to look <i>forward</i> to K&R, which is nice. :) I probably learned as much Perl from randomly hacking as I did from <i>Learning Perl</i>. I still haven't gotten far through <i>Mastering Regular Expressions</i>, though I've used them for years. I have yet to find a really great book on PHP (to everyone's astonishment, I'm sure) -- the O'Reilly book is okay, but I keep getting bored. And for some reason I cannot make myself read any docs for jQuery. It's so <i>sensible</i> that I can't concentrate on the docs; it feels like a language that I already know!<p>Technology is changing things. I normally hate learning from lectures -- talking is just too slow, and you can't skim it -- so I was surprised to discover that podcasts and screencasts about programming are actually quite useful. There are aspects to being a good programmer that are best learned by watching over someone's shoulder, or listening to them ramble on about their most-favored and least-favored tools. And then, you know, there are blogs and news.yc.",1202236388
109825,story,,,1,0,comatose_kid,"Ratzilla (Cool micromouse robot)",http://mikecheng.net/projects/micromouse/ratzilla/reports.php,"This is a great design report for a neat robot.  It is built by a team of students including fellow news.yc'er chengmi.",1202236203
109824,comment,109726,109726,0,0,eugenejen,,,"He is not the first one to think about this. John McCarthy put in around his page long time ago on his future. <a href=""http://www-formal.stanford.edu/jmc/future/index.html"" rel=""nofollow"">http://www-formal.stanford.edu/jmc/future/index.html</a>, Remote service <a href=""http://www-formal.stanford.edu/jmc/future/teleserve.html"" rel=""nofollow"">http://www-formal.stanford.edu/jmc/future/teleserve.html</a>",1202236166
109823,comment,109351,109351,0,0,anamax,,,"Giving them a discount devalues their investment and reduces the odds of success.<p>Why do you want to do that to friends?",1202236121
109822,comment,109632,109632,0,0,modoc,,,"I love SoftLayer.  They've been amazing.  Dedicated boxes only, but you can get something decent for under $150, and they can get you new hardware in about two hours, which is great.  Granted our needs are a bit larger than yours at this time, but even when I just had a single server, I thought they were a great host.  Amazing support, simple plans, etc...",1202236102
109821,comment,109709,109709,0,0,dawnerd,,,"What I really hate is when people comment the obvious. For example:<p><pre><code>    /**\n     * Add var1 to var 2\n     **/\n    $total = $var1 + $var2;</code></pre>",1202236033
109820,comment,109802,109802,0,0,Hexstream,,,"I used to be a ""read the reference manual in full first"" guy, but I was cured of that when I tried to read the whole manual for GNUS.<p>Also, when you use a ""obscure"" language like lisp the documentation is often subpar/incomplete/obsolete/lying/whatever so sometimes the best it can bestow is a false sense of knowledge (which fortunately is somewhat useful to get started).",1202235986
109819,comment,108723,109636,0,0,curi,,,"I think he wants me to learn not to post things that will be downmodded. He probably thinks I didn't see it coming.",1202235830
109818,comment,109671,109806,0,0,chaostheory,,,"i hate to say this, but I feel that it's not very intuitive and it should be changed",1202235809
109817,story,,,1,0,luccastera,"A Quick Jaunt Through Merb's Framework Code",http://brainspl.at/articles/2007/12/02/a-quick-jaunt-through-merbs-framework-code,,1202235767
109816,comment,109802,109802,0,0,mwmanning,,,"This is almost exactly the way I learn.  After years of doing it the ""traditional"" way (ex. reading an entire book on a language), I realized that I was mostly wasting my time.  The only way to really learn is to try to solve a real problem that you will benefit from directly.  Book exercises are boring and will ruin your motivation.<p>I think the idea of staying in a tight edit/test loop is good too.  I tend to make lots of typographical/syntax errors that can be a nightmare to debug if you're having to scan many lines of newly written code.  If you're only writing a few lines at a time and then testing, finding errors is much faster.",1202235602
109815,comment,109354,109761,0,0,curi,,,"Interestingly, your comment lacks humility. How about quoting to back it up?",1202235565
109814,story,,,7,1,terpua,"Reble, Reble, I Like Your Playlist",http://www.techcrunch.com/2008/02/05/reble-reble-i-like-your-playlist/,,1202235367
109813,story,,,2,1,bfioca,"Google Open Social Hackathon - Who's Going?",http://opensocialapis.blogspot.com/2008/02/our-doors-are-open-to-opensocial.html,,1202235290
109812,comment,109763,109763,0,0,gruseom,,,"""Years of experience"" is a lousy metric. It only gets used as much as it does because people (especially recruiters and managers) have no better way to distinguish good programmers from bad. It's not only possible but common for a programmer to do something for years, <i>badly</i>.<p>Would you rather have a good programmer with little experience on a given platform or a mediocre programmer with lots?",1202235091
109811,story,,,1,0,jmorin007,"Cinematic Web Design",http://thebignoob.com/posts/cinematic-web-design/,,1202234783
109810,comment,109577,109805,0,0,cstejerean,,,"Oh, I have no intent on writing a new version of Arc and floating it around. I simply used Arc as an example of something that should be easy to write in a new powerful language.<p>I would love to contribute to Arc if it was available for example via distributed source control (like Git).",1202234691
109809,comment,109683,109683,0,0,mattmaroon,,,"Congrats Nick. Glad to see it.",1202234629
