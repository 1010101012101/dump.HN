ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
29394,comment,29392,29392,0,0,joshwa,,,"don't make me find and click a button.. just let me click the picture to vote.",1182308356
29393,comment,29392,29392,0,0,nonrecursive,,,"I haven't shown this to many people, so I'd really appreciate any comments or suggestions!",1182308128
29392,story,,,8,25,nonrecursive,"rails + kitten wars + reddit clone + politics = redbluesmackdown.com, my would-be startup",http://www.redbluesmackdown.com,,1182308093
29391,comment,29386,29387,0,0,palish,,,"Easy.  Don't use IE6.<p>Really..  Stuff like this isn't about 'not supporting IE6'.  It's about the time spent not being worth it. :)",1182307854
29390,comment,29389,29389,0,0,joshwa,,,"how about showing what the top-level article is for each comment? like reddit does:<p><a href=""http://reddit.com/user/joshwa/comments"" rel=""nofollow"">http://reddit.com/user/joshwa/comments</a>",1182306869
29389,story,,,2,4,joshwa,"A page showing just the latest news.yc comments",http://news.ycombinator.com/newcomments,,1182306782
29388,comment,29307,29307,0,0,Readmore,,,"Good work guys!",1182306097
29387,comment,29386,29386,0,0,benhoyt,,,"I've just been tightening up our upcoming microPledge website -- <a href=""http://micropledge.com"" rel=""nofollow"">http://micropledge.com</a> -- to prevent cross-site request forgery (CSRF). I added a random SHA as a form key to each form.<p>But! Then I discovered this lovely IE security hole. An attacker can use cross-domain JavaScript and an mhtml: redirect to grab the page, get the form key, and then do the POST. Brilliant! Anyone have any experience in getting around this?<p>(To test the vulnerability in your browser, go to <a href=""http://secunia.com/Internet_Explorer_Arbitrary_Content_Disclosure_Vulnerability_Test/"" rel=""nofollow"">http://secunia.com/Internet_Explorer_Arbitrary_Content_Disclosure_Vulnerability_Test/</a> -- my copy of IE6 was vulnerable, IE7 wasn't, and Fx doesn't support mhtml so it's not.)
",1182305806
29386,story,,,3,4,benhoyt,"Any ideas to prevent cross-site hacks that use IE's MHTML redirection bug?",,,1182305790
29385,comment,29335,29370,0,0,nostrademons,,,"NewLisp is dynamically scoped.  That's a showstopper for many people who have any experience with dynamically-scoped languages (eg. Emacs Lisp, Maclisp).",1182305594
29384,comment,29335,29366,0,0,shiro,,,"Yeah, I've seen the pattern.  Part of the problem is, I guess, that Lisp has long history and stable user base so that the newbie/expert ratio is much lower than other languages; and (a) experts tend to forget how they were like when they were newbies, or (b) even they remember, there weren't such a thing like irc back then and they figured out most by themselves, so they expect a newbie nowadays can do the same thing.<p>However, another part of the problem, which I think is larger, is that the way of functional thinking is <i>so</i> different than the way of procedural thinking, and it is simply impossible to tell concisely ""this is the functional way"" (except very abstract statement like ""avoid side effects"").  If the asking one only has procedural background, his very <i>question</i> often doesn't make sense when viewed from the functional world; and we cannot answer a question which is not really a question.<p>Take one example: You asked about stack and heap.  Probably you assumed a specific storage model, used mainly in C, C++, etc.  However, in many functional languages, the extent of objects are just infinite by default, conceptually---and you just let the compiler to figure out which objects can be stack allocated and which should be heap allocated.  Or, even a compiler can allocate <i>everything</i> on stack first, and when stack is popped or becomes full it moves live objects into heap, effectively using stack as a nursery of objects.  It all depends on implementations, not the language.  See, just asking ""how to put an object on the stack instead of a heap"" doesn't really make sense, except you are talking about a specific optimization technique on a specific implementation (in which case you should've already known the language and quite deeply about the implementation.)<p>This is just an example.  Treating states, when to use mutation, how to model I/O, ... all require very different views.<p>I program in Lisp/Scheme both for work and hobby, and I feel sorry about your experience.  If you still think giving a try to the functional way, another path may be to taste a few other functional languages (Haskell seems to get quite attention recently, and ML claims very fast); then you'll get the perspective of procedural vs functional ways, instead of (all other languages) vs Lisp.<p>",1182305381
29383,comment,29301,29369,0,0,nostrademons,,,"I guess I really explained this poorly.  I don't mean that <i>capitalism</i> is a zero-sum game.  I mean that the <i>financial</i> industry, and more specifically the buy-side firms dealing in secondary securities markets, is a zero-sum game.<p>The DJIA has gone from 89 to 15k because of the labor and ingenuity of American employees and entrepreneurs.  New companies come out with new products, these products meet consumer needs, this creates value, this value is reflected in the company's earnings, and corporate earnings are reflected in the stock price.  <i>None</i> of this happens because some quant sits at a computer and programs in mathematical models of prices.  If Coca-Cola was still trading at 50 cents with its current earnings, everyone - financial professional or not - would be jumping on it.  It wouldn't stay at 50 cents a share for long.<p><i>Some</i> sort of stock market, with decent liquidity and abundant information, is necessary for proper functioning of the economy.  But the stock market we have, where hedge funds colocate boxes <i>on the exchange</i> so that they can execute trades within <i>milliseconds</i> of new information coming in, is overkill.  I think it's really sad that so many of the best and brightest minds are drawn into competing with each other instead of creating value for others.<p>I feel the same way about law, which is another necessary-but-zero-sum profession.  It also tends to attract really smart people, perhaps because really smart people are used to being smarter than everyone else.  The link to tournament economics that someone posted on another article here is quite appropriate.",1182305354
29382,comment,29335,29335,0,0,rzwitserloot,,,"Just to play devil's advocate here:<p>I'm a frequent contributor on The GWT newsgroups and it's very easy to get annoyed. Specifically, java suffers from a lot of wannabe programmers. For those of you liking the ambiance amongst Ruby and Python groups, you should do yourself a favour and stop advocating the use of Ruby/Python in colleges.<p>The influx of those idiots will kill your newsgroups and your IRC channels -very- quickly.<p>Now, as to the LISP community, they aren't usually bothered too much, I'd gather, with wannabees. However, where they do waltz I'm, I can imagine they'll be mentioning Paul Graham's essays. Result: short fused posters take the piss out of you.<p>And, you have to admit, Paul Graham's ramblings on LISP are a bit out of left field. The problem with promising magical performance with any one programming tool is that you create expectations. I'm fairly sure the expectations created by PG are waaay out of proportion of what you can reasonably expect a functional programming newbie to do in the span of a couple of months.<p>This isn't an excuse or anything. The chat logs are certainly horrible. Just trying to figure out if I can explain why this is happening.
",1182305289
