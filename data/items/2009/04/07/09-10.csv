ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
550681,comment,550583,550634,0,0,catch23,,,"I agree that the ""crazy parentheses"" might not be the core reason people who hate Lisp hate Lisp, but it certainly doesn't help advocacy for management types.  It's definitely knee-jerk, but lots of people make their decisions in a ""blink"" and it definitely helps when code looks like ""User.find_or_create_by_name(john)"".  Usually the people who hate lisp, have never done a significant project in it, and never will simply because of the syntax.  In a way, it's like trying to learn Korean as an English speaker.  Korean is a very modern alphabet based language, but the random strokes in their alphabet would probably make anyone take one look and say ""jeez, that looks chinese to me""",1239098374
550679,comment,550544,550568,0,0,whatusername,,,"In a positive thinking / karmic kind of sense - that's a good way to look at it.  From a TRUTH perspective - it's just wrong - the applications are all looked at.",1239097973
550678,comment,550583,550583,0,0,sbt,,,"I've been programming in Common Lisp for about a year and I consider myself an intermediate beginner. Someone made a terrific comment in response to Ron Garret's post earlier: the way you get productive in today's environment is primarily through libraries.<p>Thus the situation is inescapable. You need tons of libraries to be productive. You need tons of programmers to write these libraries. You need an easy learning curve and appealing features to get these programmers. The bottom line is that you need the bad coders as well.<p>As a beginner, I can safely say that it took a while before I finally got reasonably productive in Lisp. I still consider it 'the best' programming language. But the learning curve is much steeper than Python.<p>Lisp will get nowhere without all the bad programmers. This may sound cynical, but the reason is that academically minded programmers won't spend time writing things like a download library for youtube videos, which many people find useful. These programmers are now all over Python.<p>So why is Lisp difficult to learn? The most severe in my opinion is assignment. People find it intuitive to make temporary variables and store intermediate results in these. This is done by 'let' in CL, but if the previous style of programming is assumed, 'let' is clumsy and inconvenient to use.<p>Another achilles heal I would like to mention is the lack of an editor with propper auto-completion. Yes, slime does this, but using emacs is too geeky for many programmers (remember you need these people) and this creates an additional stumbling block.<p>Yet another problem is the CL websites. Remember that many people are in a hurry. The Python website is ripe with snippets that lets you do stuff fast without understanding much. In contrst, CL gives you some of the most monotone autogenerated documentation sites I've ever seen. Again, fine for people who already know Lisp, tedious for people that want to try stuff out as beginners.<p>Faced with these realities I don't blame anyone who just want to get things done and run with Python. Unfortunately.",1239097811
550677,comment,549919,550481,0,0,dave_au,,,"So bluetooth file transfer at 28kbps with some old school modem hackery, awesome :)",1239097793
550676,comment,549568,550329,0,0,wlievens,,,"<a href=""http://tinyurl.com/cjj5ms"" rel=""nofollow"">http://tinyurl.com/cjj5ms</a>",1239097526
550675,comment,550583,550583,0,0,tetha,,,"I belong to those people who tried to get into lisp and gave up, because the confusion to navigate per potential advantage over my major language (python) was too large. \nMy background is a knowledge in C, Python and Java, using Python mostly. \nI mostly looked into lisp, because I kept encountering something I call the syntactic barrier when I tried to remove duplication from my code, and I knew: lisp had macros. Macros could break this barrier. So looking into lisp looked promising.<p>I didn't care too much about the syntax, a good editor fixes this without a problem and it was a good opportunity to look into emacs a bit (usually, I use vim). Surfing through the chapters of practical common lisp when pretty well and understanding was not exactly hard.<p>However after that, I was faced with confusion. There is a boatload of lisp dialects, each with a boatload of implementations and each implementation as another boatload of libraries that do something looking similar to what other implementations libraries do without being the same or compatible. How am I supposed to select any of these without having a clue?\nAfter a few days of back and forth, I decided to close the book lisp for me, because I could not find a way through this wall of selections -- at least not without investing a lot of time. Too much time for too little benefit over python.<p>HTH,\nTetha",1239097334
550674,comment,549076,549548,0,0,leadnose,,,"Consider libraries in dynamic languages, there's no way to know beforehand the type of the argument a function is called with.",1239097332
550673,comment,550160,550218,0,0,veemjeem,,,"I think the acceptance MD5 is 88c23f22dc832d010564b4bcc3e2271c",1239097328
550672,comment,550351,550351,0,0,satyajit,,,"Your users will tell you whether you are creating something of value for them or not, YC isn't always capable of seeing that! So trust your users, in yourself, and move on!",1239097327
550670,comment,549852,549892,0,0,jaytee_clone,,,"More than they used to, so that's a step up.<p>Still, I'd rather see these resource being spent on educating the public on behavioral economics as suppose to using the knowledge to manipulate the public.<p>It's true that in most situations, indirect persuasion is more effective at influencing someone's behavior than direct preaching. However, at some point, the public needs ""grow up"" too, and always treating us like five year olds certainly won't stimulate this process.<p>I hope these guys see that.",1239097118
550669,comment,549780,549783,0,0,petercooper,,,"Hang on, this <i>wasn't</i> satire? I wasn't 100% sure so I came to see the comments and.. it seems I'm wrong :)",1239097015
550668,comment,550583,550663,0,0,davidw,,,"Isn't Dylan a sort of lisp-without-parens?",1239097007
550667,story,,,2,0,ohneworte,Skywrite.me,http://www.skywrite.me,"Skywrite.me is all about writing Remarkable Messages! Social Networks and Microblogging Systems offer you a lot of possibilities to write what you think nowadays. But who really notices what you write, no matter how interesting, wise or funny it may be? Skywrite.me is the approach to define a Sky in the World Wide Web. Whoever looks at it will see what is written. What do you have to say that should be read by everyone?",1239096951
550665,comment,550583,550657,0,0,davidw,,,"Notepad is exactly what I'm talking about.  With Perl, C, and Ruby, at least, there really aren't any indentation <i>rules</i> - your program will work fine even if you don't put any in at all, or do a hacky job of it.  With Lisp, especially when modifying someone else's code you're stuck counting parens.<p>Oh, also a weird (maybe crackpot?:-) theory of mine: parenthesis, graphically, don't form a nice, rigid vertical line, but sort of point diagonally, possibly making it just that much harder to see how they line up.  In any case, 4 or 8 space indented C/Tcl/Ruby/whatever code is certainly more obvious to the eye.",1239096632
550664,comment,526120,526156,0,0,mookid,,,"hmm<p>REST is just using HTTP properly (as a transfer protocol) - if you want to implement RPC go use some other protocol that is actually a transport, instead of raping HTTP simply because it will get you through firewalls.<p>REST is a far superior approach to developing web apps because it actually respects the style of the underlying protocol. It's not that mystical or complicated.<p>Oh and stop using front controller patterns, they're stupid.",1239096535
550663,comment,550583,550634,0,0,berntb,,,"Lisp was my favorite language when I studied (hrm, long ago).<p>IMHO, there is quite a lot of support for the argument that modern day scripting languages are getting closer and closer to becoming lisps, except for syntax and the macro system. (Maybe Perl 6 will have meta-language power enough to equal the macro system? I should start learning it.)<p>I've never really understood why there are no successful projects to transfer code between the S-EXPR parenthesis-based syntax and some Algol-like notation; if that managed to also copy comments between the formats and auto formatted well, it would be an easy introduction for new lispers.",1239096527
550662,comment,549852,549852,0,0,bk,,,"This is a peeve of mine: It's not ""behavioral economics"". It's social and organizational psychology. Virtually all the research has been done by psychologists. For example, Daniel Kahneman, Economics Nobel Laureate, is a <i>Psychologist</i>.<p>""Smart"" people and the media have been obsessed with ""rationality"", (pseudo-)math and quantitative research, until it finally emerged in the economistic world view that people are - surprise, surprise - not that rational; something that psychologists have known for ages.<p>Right now, economics is sort assimilating a lot of psychological insights, which is good for humanity, but it's not economics, the original creativity stems from psychology.",1239096446
550660,comment,550351,550582,0,0,russ,,,"We were also rejected the first time as well.  And were accepted for a different idea in the next batch.",1239096360
550659,comment,550069,550507,0,0,rs,,,"You are spot on . Twitter has an asymmetric follow model, whereas Facebook tends to be guided towards smaller closed networks.<p>Here's where I learnt about ""asymmetric follow"" : <a href=""http://www.redmonk.com/jgovernor/2008/12/05/assymetrical-follow-a-core-web-20-pattern/"" rel=""nofollow"">http://www.redmonk.com/jgovernor/2008/12/05/assymetrical-fol...</a>",1239096288
550658,comment,550281,550312,0,0,afri-silicon,,,"Notifications are already out. Me, rejected!!!",1239096246
550657,comment,550583,550642,0,0,chandler,,,">> The parenthesis do require that you have at least a moderately capable editor to navigate them effectively.<p>I disagree, with a caveat--writing code using a terrible editor requires knowledge of the indentation rules for the language, regardless of whether that language is a lisp, Perl, Ruby, etc.<p>However (the caveat), although the indentation rules for Perl, C, Python are relatively simple (indent after a '{' or ':', line up arguments), each function/macro in a lisp can have different indenting rules (e.g. in CL compare `let' to `multiple-value-bind' to functions, to lists, to the various `with-*' macros, etc).<p>Once you know the library for a specific implementation, the indentation rules become more obvious; at this point, using (e.g.) Notepad isn't particularly terrible (until that knowledge is acquired, though, yikes).",1239096155
550656,story,,,6,10,dawson,"How Apple should have implemented the controls on the new iPod Shuffle",http://www.robotification.com/component/content/article/61-controlsnewipodshuffle.html,,1239096132
550655,comment,550149,550149,0,0,nickyp,,,"Most Mac apps seem to remember its window size when you open a new window: Safari, TextMate, Firefox, Pages etc.<p>So I make drag these apps into nice grids:\n- a small left hand strip for Twitterific, iChat, Skype etc. this strip also pushes the next windows a bit more to the center. Helpful because the 30inch is so wide.\n- Safari, Texmate, Firefox etc. is next.My default Safari width is often the width of Apple.com so no scrollbars are shown.\n- leftover space is for PDF documentation and when I need 2 windows next to each other e.g. 2 Xcode windows. Plenty of space left for that.<p>Apps like Logic Pro, Aperture, iPhoto, iMovie, iTunes are run maximized/fullscreen.<p>Terminal.app is indeed ill-equipped when it comes to resizing etc. I usually build a couple of window groups that fit my needs (e.g. four-in-a-square with a wide window for logs) and open-and-close such a window group if the current layout isn't optimal.",1239095944
550654,comment,550120,550151,0,0,tlrobinson,,,"""Social media consultants"" are the snake oil salesmen of Twitter. I try to avoid it, but there's so damn many of them.<p>Also, recently I've been noticing a bunch of people peddling MLM and other get-rich-quick schemes. It's quite annoying.",1239095643
550652,comment,550351,550351,0,0,afri-silicon,,,"Me, I have already recieved my rejection (i prefer ""unsuccessful"") notification, but I can assure you, i will push on. Though honestly, the opportunity for YC would have been welcome.",1239095450
550651,comment,550069,550299,0,0,mcdowall,,,"I think I would have to agree, though I use a couple more, for example<p>Like yourself I use Facebook for breifly chatting to friends and family, though I predominantly use it for Photos and Events.<p>Twitter on the other hand I use as a tool for promotion, especially the search function and following users in my niche.<p>Other than that I use LinkedIn for my professional profile and Posterous for uploading photos to my Facebook & Flickr photo albums from my Iphone.<p>Im still holding out for a central repository for all my usernames and passwords, I must have about 30 active sites I visit on a daily basis and really struggle to keep up with them",1239095119
550650,comment,550583,550583,0,0,jobeirne,,,"In response to the parting question from the article, here's an idea: make cool things with Lisp. Make cool things <i>for</i> Lisp.",1239095025
550649,comment,550233,550233,0,0,petercooper,,,"Bizarre article. I'm British and in analyzing my speaking recently discovered I um and ah a lot and have been trying to conquer it. I hear it a lot in speakers over here too, as much as in American speakers. Not sure about all this British vs American forming words ""on the lips"" or ""in the throat"" malarkey..",1239095014
550648,comment,549076,549076,0,0,tetha,,,"I think typesystems span far deeper than most object oriented typesystems go. In fact, I think, it goes even deeper than what haskell does (and I consider Haskells typesystem to be among the most advanced typesystems we have today).<p>One question for the typesystem is: If I have this object, will it understand message X?<p>Another question is: If I send this sequence of messages to this object, will the sequence of messages exiting the object be as expected? (Or, much rather: will a certain ""interesting"" subset of the messages sent by the object (triggered by my messages) be a certain sequence? (In fact, sequence is too restraining. I rather need to know if the messages sent by the object will fulfill a certain predicate)<p>Another question is: If I conceptually send this message to that object, how do I find the implementation of the handler of this message?<p>(I am sure that there are more complicated questions around and I just do not know them).<p>Given these questions, consider what most static type systems do. They answer questions 1). (Dispatch strategies and strong typing answer question 3) )\nGuess what unit tests do? They answer question 2). \nHowever, in a dynamically typed language like Python, sending a  message to an object that is unable to understand this message (read: there is no implementing method), then an unexpected message will be sent by the object (read: an Exception is thrown). This violates the contract. In other words: checking the contract can answer at least question 1) already!<p>Thus, I think --  or rather hope -- for major improvements at typesystems, because it appears that things are far, far more complicated than just compile-time vs run-time and strong vs weak. Consider Eiffel. Eiffel does contract checking. Now think about attaching contracts to objects at runtime. This could reduce the amount of of_kind?-checks in the article. Consider roles. Consider things like pythons metaclasses. I really think a lot of problems come from a lack of unterstanding object oriented typing more than we already do. (Maybe this kind of pushed me into a good direction for a master thesis. who knows?)",1239094817
