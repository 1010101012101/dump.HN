ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
94770,comment,94765,94765,0,0,buckpost,,,"My guess is new music services will emerge that will analyze your digital music collections, and create playlists for you. There are, of course, many of these around already but you'll see a flurry of activity soon. If the music labels were smart, they would be right in the middle of the action by offering a free service that would pay for itself by providing download services, Webcasts and advertising.",1199451491
94769,story,,,7,12,buckpost,"Are the Cool Kids Leaving Facebook? ",http://www.markevanstech.com/2008/01/04/are-the-cool-kids-leaving-facebook/,,1199451212
94768,comment,80662,80839,0,0,dlweinreb,,,"It's true that the system was feature-laden.  I think this was more true of the API's than the user interfaces, though, and so I'm not sure that the Steve Jobs reference is exactly appropriate.  Steve Jobs is making consumer products; most customers don't care much about the API's.<p>It was also featureful because we didn't know which features were the ones that would turn out to be most useful; if there had been a second generation, we could have pruned out some of the stuff that never really got used.  It was something of a ""laboratory"" that way.<p>Also, the kind of people who used Lisp machines, generally early adopter types, really did ask for amazing numbers of features.  If you had been there, you would have experienced this.  We wanted to make all our users happy by accommodating all their requests.  It's probably similar to the reason that Microsoft Word has so many features.  Everyone thinks there are too many and has a long list of the ones they'd get rid of; but everyone has a different list!  I think Joel Spolsky wrote something very convincing about this topic once but I can't remember where.<p>Lucid on Suns was eventually as fast, if you turned off a lot of runtime checking and put in a lot of declarations. Later it was even fast if you didn't do that; the computational ecosystem changed a whole lot since the Lisp machine was originally designed.  You have to remember how old it was.  At the time it came out, it was very novel to even suggest that every AI researcher have his or her very own computer, rather than timesharing!  That's early in the history of computers, by today's standards.<p>No, we didn't teach all of our customers personally, although we did have an education department that taught courses, and some of them learned that way.  There were classes in Cambridge and in San Francisco.  Allan Wechsler designed the curriculum, and he's one of the best educators I have ever met.  (My own younger brother worked as a Symbolics teacher for a while.)<p>Common Lisp is complicated because (a) it had to be upward-compatible with very, very old stuff from Maclisp, and (b) it was inherently (by the very nature of what made it ""Common"") a design-by-committee.  For example, consider how late in the lifetime of the language that object-oriented programming was introduced.  (Sequences and I/O streams should obviously be objects, but it was too late for that.  CLOS wasn't even in the original CLtL standard.)<p>In other words, I'm mainly not disagreeing with your points, just explaining how things got that way.",1199450562
94767,comment,94705,94705,0,0,jamescoops,,,"interesting stuff - SMO, SEO is so interesting - would like to see more posts on this on YC.",1199450437
94766,comment,94765,94765,0,0,dood,,,"The notion of artists releasing a collection of ordered tracks in a batch is pretty ingrained, I don't see that idea going anywhere soon. Or are you posing a hypothetical assuming otherwise?",1199450342
94765,story,,,16,33,Tichy,"Ask YC: what will replace the music album?",,"If in the future there will be no more CDs or music albums, how will people listen to music? Will everything just be ""random shuffle""? Will they select genres and shuffle through them? Will they create their own playlists by arduous work? Will playlists become valuable content?",1199449875
94764,comment,94757,94757,0,0,david927,,,"I don't see the future playing out this way, mainly for the same reason that Google has standardized on only four languages: someone after you will probably have to understand it.<p>Most systems are refactored in the same language simply because the new person in charge wants to understand it on their terms.  The same is true for languages.  Don't hold your breath.  Polyglot programming isn't happening anytime soon.",1199448804
