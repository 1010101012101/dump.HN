ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
107583,comment,107545,107545,0,0,sanj,,,"This reminds me of something from college.  I worked in aviation safety, so one of the questions my advisor always got during interviews was ""What's the safest airline to fly?""<p>His response: ""The one that's had an accident most recently.  They'll be under the most scrutiny to not screw up again.""<p>I wonder if this is the BEST possible time to be deploying at Joyent.",1201820221
107582,comment,107548,107548,0,0,bfioca,,,"This is patently true.",1201820111
107581,comment,106398,107318,0,0,shiro,,,"I think they've been done and abandoned.  You might want to dig some history to see why (I don't have references handy.  Maybe asking comp.lang.lisp would help).<p>(1) Let's separate implementation and semantics issues.  In semantics level, list as a datatype is defined recursively:<p><pre><code>  List a = () | (a, List a)
</code></pre>
This definition maps well to recursive algorithms.<p>It also maps well to the implementation that uses cons cell, but as you say, it's not the only way to implement it.  There was a technique called CDR-coding, which represents a list as if it's a vector (e.g. cell's CDR doesn't contain a pointer but it overlaps the next cell's CAR); specially tagged pointer distinguished normal cells and CDR-coded cells.  I guess it was abandoned since deailng with set-cdr! would be very messy.   But if you're creating a new dialect, you can go for big change like dropping set-cdr! (some of Scheme people even talking about dropping mutable cells.)  In today's computer where access locality means a lot, maybe you can shed a new light to this old technique.<p>(2) I think the current state of macro was the result of simplification.  IIRC, the old lisp dialects allow to pass around syntactic values (FSUBRs) as if it's first class, but it's easily messes up the semantics.   It's conceptually <i>simpler</i> to restrict macros as curretly they are.  If passing macro around is allowed, you'll never know how (+ 1 2) in the following function is evaluated until runtime:<p><pre><code>  (defun call-it (x) (funcall x (+ 1 2)))
</code></pre>
It may be evaluated as a normal expr, or in a completely different way, depending on whether x is a macro or not. Or are you suggesting that, in this case, (+ 1 2) is evaluated immediately because funcall is not a macro?  It is a possible strategy, but then it clipples the expressive power, since it can't represent the same thing as:<p><pre><code>  (defmacro call-it (x) `(,x (+ 1 2)))
</code></pre>
But there are still people who wants to unify macros and functions.  Search comp.lang.lisp and comp.lang.scheme---I've seen some discussions there.  Also search ""first class macros""; there are some papers.<p>Another way to eliminate (most) need of macros is to adopt normal order evaluation.  I've seen some Lisp dialects using lazy evaluation by default.   Beware that it changes the programming style <i>a lot</i>, though.",1201819783
107580,comment,107545,107545,0,0,sanj,,,"""Divorce"" may be an apt metaphor here.  There seems to be a lot of ""he said, she said"" sort of rumblings.<p>Having said that, I've been pretty happy with Joyent so far.  They offer a service which is nice for Rails apps: scaling (smoothly) vertically for a long time until you need to go horizontal.<p>I don't really want to spend time scaling out horizontally (eg, to AWS) until that's necessary.<p>Other opinions?",1201819278
107579,story,,,1,0,hhm,"Take Harvard Classes, And Without All the Harvard People",http://blog.wired.com/wiredscience/2008/01/take-harvard-cl.html,,1201819268
107578,comment,107468,107484,0,0,ks,,,"And don't forget the other handheld device - iPod. It has all the characteristics of a PDA, but the software is limited to media.",1201818873
107577,comment,107504,107504,0,0,Tichy,,,"Would be cool if they could also monitor the workers brain function and ensure that it is related to the task at hand.<p>On the other hand, if they have reached that stage, maybe they won't need workers anymore...",1201818814
107576,comment,107542,107542,0,0,jgrahamc,,,"Nice service.  Back in 2002 we were doing something like this when I was consulting at Flytecomm.  We would suck up people's trip confirmations and parse them (just a whole bunch of regexps in Perl) and spit out detailed information about the trip.   Since we had real time flight information (since we had an FAA feed) we could match the reservation to flight legs and do cool stuff like realize your flight is going to be late arriving and that you are missing your connection; then we'd look up alternate flights and send you an SMS message with details.   Happy days.",1201818681
107575,comment,107468,107569,0,0,kirse,,,"That's really the only fault in my N95-8gb... it has Assisted-GPS and usually takes 90+ seconds to lock on with a satellite.  It already crushes the iPhone in functionality and I've had plenty of ""omg cool phone"" comments on the actual design.<p>When you do get a lock-on, the navigation features are wonderful, hopefully this Garmin phone has a faster way to do so.<p>Overall this Garmin phone looks damn functional, I just wish it wasn't boring-PDA grey.",1201818456
107574,story,,,7,0,transburgh,"The Macbook Air is pretty and dumb",http://hijinksensue.com/2008/01/21/the-macbook-air-is-pretty-and-dumb/,,1201817507
107573,comment,107433,107433,0,0,Tichy,,,"I wonder how they created pictures of earth from a million light years away? Are those fantasy pics, or, if they rendered them via computer, did they really have all the data for all the stars?",1201817470
107572,comment,107542,107542,0,0,oditogre,,,"How do they make money, I wonder?",1201817016
107571,story,,,1,0,mk,"Rumor: Yahoo To Announce Large Video Acquisition - Maven Networks For $150 Million.",http://www.techcrunch.com/2008/01/31/rumor-yahoo-to-announce-large-video-acquisition-today/,,1201816801
