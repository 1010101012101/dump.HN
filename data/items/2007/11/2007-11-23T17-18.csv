ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
83009,comment,82965,82965,0,0,nextmoveone,,,"That's super gay. I don't download or distribute P2P content, but still.
",1195840638
83008,comment,82864,82995,0,0,edw519,,,"""I've never had a case where I visually missed an early exit.""<p>Too bad the same's not true for those I have followed.  And when it does happen, it makes the worst kind of mess - the kind you don't discover until 6 months later.<p>Guidelines and rules are not meant for the best of us; we don't need them as much.  They're meant for the mediocre masses who are everywhere and wouldn't know any better.",1195840495
83007,comment,82829,82990,0,0,boucher,,,"There aren't new concepts, just actual explanations of what the presentation is talking about.  <p>""I'd use the presentation as a way of glossing over the high points, and then refer somebody to your link as a way of figuring out how it all works.""<p>Probably a good strategy. ",1195840341
83006,comment,82864,83001,0,0,boucher,,,"Not at all.  What I meant was, you're calling the function in two places, instead of in one place (inside the loop).  You've pasted that function call.  Thus, by all the same logic, you are introducing a possible future headache.  ",1195840030
83005,comment,82864,83001,0,0,edw519,,,"Maybe this is the crux of Dijkstra's original arguments.<p>Which is more expensive, a few milliseconds of machine time a few million times or a whole bunch of human time once or twice?
",1195839944
83004,comment,82864,82955,0,0,Tichy,,,"That's what the other rule is for, to not make functions span too many lines ;-)",1195839616
83003,comment,82877,82962,0,0,nostrademons,,,"The Java API's are wildly inconsistent.  Some are pretty good, but some (Calendar, Date, IO) are massive trainwrecks that even some of Java's architects don't like.  Joshua Bloch gave a presentation somewhere on effective API design where he ragged on Calendar.<p>And the Design Patterns and Refactoring should be considered starting points, not the be-all-and-end-all of programming.  Every programmer should be familiar with them just for the vocabulary.  But there are better examples of programming in SICP, <i>On Lisp</i>, <i>Programming Pearls</i>, and <i>TeX: The Program</i>.",1195839247
83002,comment,82926,82926,0,0,gruseom,,,"Microsoft does do this. You have to prove you're a real software startup and then they give you basically everything for a nominal price. But I don't agree that the presence or lack of such a program is the reason why most startups don't base themselves on MS.",1195839080
83001,comment,82864,82983,0,0,Goladus,,,"Are the costs of function call overhead worth worrying about?",1195839058
83000,comment,82949,82949,0,0,suziedw,,,"A few clarifications: Canada is generally a country where the concept of ""employment at will"" does not exist. You want to fire someone?  You need to pay severance. We also have human rights legislation that can add to what you must pay if you fire someone who is older, pregnant or has one of a wide range of conditions that can be deemed a disability (drug addiction, alcoholism, depression). There are penalties payable for toxic work places or for firing in a particularly harsh manner. These are many reasons why employers based in the US tend to dislike Canadian employment laws - if you hire the wrong person, you have to pay to get rid of them.<p>Onto the stickiness issue - you're generally right - there is great R&D talent in Ottawa, for example, but very few superstar tech companies at the moment. If you are like most R&D talent and attracted by the quality of work, you're pretty sticky.<p>A related point - thanks to the limited number ofwork Visas to the US, we've become a naturally sticky country for near-shoring talent from India, etc that cannot get a permit to work in the valley.  Sticky by geography works for us, too.
",1195838810
82999,comment,82864,82968,0,0,nostrademons,,,"I usually follow the childhood adage ""First time it's funny, second time it's silly, third time's a spanking.""  Probably better summed up as <a href=""http://www.c2.com/cgi/wiki?ThreeStrikesAndYouRefactor"" rel=""nofollow"">http://www.c2.com/cgi/wiki?ThreeStrikesAndYouRefactor</a>.  Problem is, after 2 repetitions you often don't know what the <i>real</i> abstraction behind the duplicated code is, and so you end up with convoluted objects or closures to swap out parts of behavior, while there's a more natural abstraction just around the corner.  If you mercilessly refactor after only the first duplication, you might not see it after the second, because the original code has been abstracted enough that it doesn't look like the third repetition.<p>This also squares with a lot of IBM's experience in <i>The Mythical Man Month</i>, i.e. code needs at least <i>three</i> clients to really be reusable.",1195838793
82998,comment,82997,82997,0,0,gruseom,,,"I heard this principle a few times and finally tracked down the original 1968 paper. One can point out several applications of his idea. For example, large, hierarchical organizations whose parts don't work well together tend to produce large, hierarchical software systems whose parts don't work well together.",1195838652
82997,story,,,18,3,gruseom,"Conway's Law (A software system will resemble the organization that built it)",http://www.melconway.com/research/committees.html,,1195838350
82996,comment,82864,82981,0,0,edw519,,,"""15 different programmers are rarely touching the same piece of code over any short or medium span of time""<p>I see it all the time.  But then again, maybe I'm like the blind man with the elephant; I only know what I've encountered.<p>Wouldn't it be great if analysis was conducted properly, design specs were tight, functional specs were accurate, projects were managed properly, programmers were trained, resources were adequate, and the people paying the bills had a clue as to what they needed?  I've never seen it.  That may be why code gets modified so many times.  I've even seen ""quick & dirty"" temporary programs still in production for 15 years.  This is the world we have to deal with.  That's why we adhere to structured programming principles: to save ourselves a whole lot of trouble down the road. ",1195838343
82995,comment,82864,82973,0,0,nostrademons,,,"That's why ""return"" (and ""throw"" and ""assert"") is syntax-highlighted in most editors. ;-)<p>Honestly, I've <i>never</i> had a case where I visually missed an early exit.  Most of the time, such exits are guard statements, designed to bail out with an exception if some precondition isn't met.  Most of the rest, they're ""found it, don't need to do any more processing"" and apparent from the logic.  I'll usually mark the latter with a quick comment anyway, just to be sure I don't miss them.<p>And early returns let you apply additional invariants to your code.  You've checked your preconditions and bailed if necessary; you don't need to worry that this array might be null.  You've handled the 1-item base case; you don't need to worry about your recursive function blowing up.  I find that broken invariants cause many, many more bugs than missing an exit and not executing code.",1195838229
82994,comment,82864,82976,0,0,Goladus,,,"<i>Where'd you ever get the idea that there is any trade-off between ""quick"" and ""right""?</i><p>I don't have that idea.  There is sometimes, though, a tradeoff between current needs and future needs; and that tradeoff can not always be predicted.  When that happens, it's logical to give current demands priority.<p>I can't for example, predict whether a future maintainer of my code would prefer code written with multiple returns, or code that sets temporary values, or code that uses a set of nested ifs, or code that assigns function pointers to a matrix and calls code based on the indices.  Each technique has potential drawbackss in terms of future maintainability, likelihood of errors, and speed of immediate implementation.  Trying to guess what a future coder (other than myself) will think is just not important in that case.<p>Effective Principles can only be Established based on a given development environment, and it's the responsibility of those in charge of the environment to make sure the established principles are effective and followed by the developers.",1195837988
82993,comment,82864,82991,0,0,edw519,,,"""if you're in a company where the other programmers are top notch""<p>I've never seen such a thing (and I've seen alot).<p>Reason #127 for starting your own.",1195837945
82992,story,,,7,16,spking,"""I was stuck in a prison of Microsoft Operating Systems, and I have been released.""",http://seekingalpha.com/article/55112-why-i-m-all-about-apple?source=yahoo,,1195837875
82991,comment,82864,82973,0,0,tyler,,,"""Programmer 15 puts his mod ON THE WRONG SIDE of your early exit because he never saw it. He doesn't do regression testing, and the data base gets screwed up over the next 6 months.""<p>I can certainly see how this is true in a large organization which hires lots of mediocre programmers.  However, if you're in a company where the other programmers are top notch, this sort of thing is not a problem.<p>In fact, if I ever see nested ifs and such in a function where I work, it gets changed to the least number of lines of code possible.  I can do this because there is only 1 other programmer here, and I know he's not going to screw it up.<p>I don't know your situation, obviously, but my initial reaction is... ""Holy crap man... run!""",1195837422
82990,comment,82829,82985,0,0,DanielBMarkham,,,"Thanks. That was a good link. I have bookmarked it.<p>
It's much more explanatory, though. I believe the intent of the main linked article is a presentation giving more of a tour to what is possible. The author makes clear at the end that the reader might not get it all -- it's just an overview.<p>
I didn't find much difference in terms of metaprogramming, however. Were there any concepts in your article that weren't mentioned in the first one? I might have missed it.<p>
I'd use the presentation as a way of glossing over the high points, and then refer somebody to your link as a way of figuring out how it all works.",1195837222
