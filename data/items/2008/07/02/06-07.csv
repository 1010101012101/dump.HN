ID,Type,Story,Parent,Points,Comments,Author,Title,URL,Content,Created
233872,comment,233819,233819,0,0,thomasswift,,,"After you get a domain name that you want to keep for ever make sure pay for renewal before it is up. There are plenty of companies that have system in place to snail mail spam you about switching to their service after you get one.<p>I use namecheap.com - the admin panel is pretty nice to use, unlike godaddy's. They also send out 60,30,5 day reminder notices.",1214981890
233871,comment,233836,233865,0,0,Mapou,,,"I see what you're saying and I think you're probably right. But if you can design and build a kick-ass multicore processor that blows everyone else out of the water in terms of performance, energy efficiency and ease of programming, it makes sense to give all your dev tools away for free. Heck, you could even throw in an OS and a nice browser for good measure.<p>I realize that I'm biased since I happen to think that multicore design is the most exciting thing out there. In my opinion, whoever solves the multicore/parallel programming problem will dominate computing for the rest of the century. The rest of the industry, including Intel, IBM, AMD, APPLE, etc... would flock like migratory birds to come and worship at your feet.",1214981522
233868,comment,233145,233847,0,0,thomasswift,,,"I wouldn't, becuase i was joking, and after the massive downmod i figured i'd rather not muddy up the conversation more by trying to explain myself.<p>this was a joke... about how people outsource their work to other countries because they are too cheap to pay for developers in their own countries. sorry i forgot that the internet was serious business all the time.<p>i apologize  to anyone if you took offense to it",1214980653
233867,comment,233654,233654,0,0,nreece,,,"Found some more details @<p><a href=""http://mudreading.com/article/?q=Shneiderman"" rel=""nofollow"">http://mudreading.com/article/?q=Shneiderman</a><p><a href=""http://www.smashingmagazine.com/2007/10/09/30-usability-issues-to-be-aware-of/"" rel=""nofollow"">http://www.smashingmagazine.com/2007/10/09/30-usability-issu...</a>",1214980604
233866,comment,233027,233156,0,0,paul,,,"Twitter is no harder to partition/shard than Google is. (your search is against the entire web, not just one part of it) Batching has nothing to do with this issue.",1214980590
233865,comment,233836,233861,0,0,paul,,,"Parallel programming tools may make for interesting research, but that doesn't mean that it will be a good business. In general, tools startups haven't been terribly successful.",1214980169
233864,comment,232890,232890,0,0,BrandonM,,,"I personally thought the article was garbage. The author rehashed a lot of old ideas and lumped together a bunch of anecdotes without giving much new insight.<p>The thing that really bothered me is that I got the distinct feeling that the author is only parroting old advice, without actually trying anything himself.<p>In particular, he said that exceptions are expensive in any language. In Python in particular, exceptions are no more expensive than any other control structure, as that was an explicit design decision.<p>Exceptions <i>work</i>, that's all there is to it, but they <i>have</i> to be documented. The Python documentation is a very good example of this. For the built-ins in particular, every single operation states what type of exception is thrown in what case.<p>Exceptions can be very effective if:<p>1. Each function/method documents what exceptions it throws under what circumstances.<p>2. Exception causes are thoughtfully separated into different types. One example of a violation of this principle that has frustrated me recently is Python's os.makedirs function, which recursively creates a hierarchy of directories. This can cause an exception if one of the directories cannot be created for some reason (permissions, desired directory is an existing file, etc.) or if the leaf directory already exists. In some cases, the latter case really is not an error (you just want ""mkdir -p"" functionality), but it's hard to distinguish between the two cases.<p>3. The proper exceptions are caught. Too often programmers attempt to catch every exception and re-propagate it (or worse, ignore it). In many cases, exceptions are only meaningful during debugging, and once minor issues are worked out, the exceptional case is guaranteed to never occur. These types <i>should be allowed to propagate to the top-level and crash the program</i>, that is the whole point of the exception. In other cases, the programmer needs to be aware of what exceptions may occur (see 1), to reason about how such cases should be handled (if at all, perhaps allowing it to pass up the stack makes sense), and to handle it appropriately. Only in a top-level logger for a long-running program should a catch-all exception ever be used.<p>...and that turned out much longer than I initially planned. I am just tired of hearing the same old ""exceptions are bad because people will use them to mask real errors"" argument repeated over-and-over, when no programmer worth anything would ever do that. Also, this popular comparison of exceptions to GOTOs is ridiculous. The article on GOTOs was written at a time when spaghetti code which jumped all over the place to save repetition was not at all uncommon. Thanks to more recent constructs like do...while, break, continue, for loops, function objects, and more, crazy ""old school"" code patterns are much less common. To march that argument out today any time someone dislikes a given control flow structure is a disservice to the original paper (which was actually addressing <i>real</i> problems in code structure), because the comparison invariably is between apples and oranges.",1214979979
233863,story,,,1,0,gibsonf1,"The Great Robot Race: NOVA [video]","http://www.hulu.com/watch/23347/nova-the-great-robot-race#x-0,vepisode,1",,1214979959
233862,comment,233172,233368,0,0,jauco,,,"well, the thing with these comparisons between vim and emacs features is that they mostly come down to ""do you know <i>how to do</i> feature X"" because both emacs and vim (vim, not vi) will surely <i>have</i> feature X somewhere.<p>In this case, vim allows tabs and split windows and the Tramp functionality is built in. I'm not sure about the python terminal, but then again, I've never felt the need.",1214979750
233861,comment,233836,233836,0,0,Mapou,,,"Why does almost every startup have to be a social web site or some other web app? The web is surely not the only thing in the hacker universe, is it? The biggest opportunities in computing today are in parallel programming tools and multicore architecture and design. How come nobody seems to care about those things?<p>I note that your Phd dissertation was titled, ""Prefetch mechanisms by application memory access pattern"". Surely this qualifies you for all sorts of computing projects.",1214979640
233860,comment,233700,233812,0,0,mwinters58,,,"how come I didn't get an SMS invite? I'm so bored at home...",1214979531
233859,comment,233850,233856,0,0,kashif,,,"Thanks, deleted the post :)",1214979418
233858,comment,232890,233036,0,0,BrandonM,,,"<i>If you don't check a pointer before dereferencing it - the code is wrong.</i><p>Really? This might be true after a malloc or another system call, but in general, your modules should have specifications. If you have written a function which states that the incoming value must be a pointer to some value, that pointer shoud <i>never</i> be checked before dereferencing it. It's the caller's job to ensure that a valid pointer is sent.<p>Blindly checking for errors that will never come up is not much better than not checking at all.",1214979043
233857,comment,233855,233855,0,0,ivey,,,"I'm not a huge Prototype fan, so SproutCore initially turned me off, but the more I look, the more potential I see.  Anyone used it for more than experiments, and have opinions to share?",1214979002
233856,comment,233850,233850,0,0,ivey,,,"It's just you.",1214978768
233855,story,,,4,2,ivey,"Is SproutCore worth it?  The Reg finds promise, limitations.",http://www.theregister.co.uk/2008/07/02/inside_sproutcore/,,1214978702
